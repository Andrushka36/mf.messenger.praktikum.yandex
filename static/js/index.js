(()=>{"use strict";eval("\n// CONCATENATED MODULE: ./src/utils/render.ts\nconst render = (selector, component) => {\r\n    const root = document.querySelector(selector);\r\n    const element = component.getContent();\r\n    if (root !== null && element !== null) {\r\n        root === null || root === void 0 ? void 0 : root.appendChild(element);\r\n    }\r\n    return root;\r\n};\r\n\n// CONCATENATED MODULE: ./src/lib/Router/Route.ts\n\r\nclass Route {\r\n    constructor(_pathname, _block, _title, _selector) {\r\n        this._pathname = _pathname;\r\n        this._block = _block;\r\n        this._title = _title;\r\n        this._selector = _selector;\r\n    }\r\n    leave() {\r\n        if (this._block !== null && this._block.element instanceof HTMLElement) {\r\n            this._block.element.remove();\r\n        }\r\n    }\r\n    match(pathname) {\r\n        const regexp = new RegExp(`^${this._pathname}\\/?$`, 'i');\r\n        return regexp.test(pathname);\r\n    }\r\n    render() {\r\n        document.title = this._title;\r\n        render(this._selector, this._block);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/lib/Router/index.ts\n\r\nclass Router {\r\n    constructor(_selector) {\r\n        this._selector = _selector;\r\n        this.routes = [];\r\n        this.history = window.history;\r\n        this._currentRoute = null;\r\n        this.fallback = null;\r\n        if (Router.__instance) {\r\n            return Router.__instance;\r\n        }\r\n        Router.__instance = this;\r\n        document.body.addEventListener('click', (event) => {\r\n            const path = event.composedPath();\r\n            const link = Array.from(path).find(({ tagName }) => tagName === 'A');\r\n            if (link !== undefined) {\r\n                const url = link.getAttribute('href');\r\n                if (url !== null) {\r\n                    this.go(url);\r\n                }\r\n                event.preventDefault();\r\n            }\r\n        });\r\n    }\r\n    use(pathname, block, title) {\r\n        const route = new Route(pathname, block, title, this._selector);\r\n        this.routes.push(route);\r\n        return this;\r\n    }\r\n    start() {\r\n        window.onpopstate = ((event) => {\r\n            this._onRoute(event.currentTarget.location.pathname);\r\n        });\r\n        this._onRoute(window.location.pathname);\r\n    }\r\n    _onRoute(pathname) {\r\n        const route = this.getRoute(pathname) || this.fallback;\r\n        if (this._currentRoute) {\r\n            this._currentRoute.leave();\r\n        }\r\n        this._currentRoute = route;\r\n        if (this._currentRoute !== null) {\r\n            this._currentRoute.render();\r\n        }\r\n    }\r\n    go(pathname) {\r\n        this.history.pushState({}, '', pathname);\r\n        this._onRoute(pathname);\r\n    }\r\n    back() {\r\n        this.history.back();\r\n    }\r\n    forward() {\r\n        this.history.forward();\r\n    }\r\n    getRoute(pathname) {\r\n        return this.routes.find(route => route.match(pathname));\r\n    }\r\n    useFallback(pathname, block, title) {\r\n        this.fallback = new Route(pathname, block, title, this._selector);\r\n        return this;\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/lib/EventBus/index.ts\nclass EventBus {\r\n    constructor() {\r\n        this.listeners = {};\r\n    }\r\n    on(event, callback) {\r\n        if (!this.listeners[event]) {\r\n            this.listeners[event] = [];\r\n        }\r\n        this.listeners[event].push(callback);\r\n    }\r\n    off(event, callback) {\r\n        if (!this.listeners[event]) {\r\n            throw new Error(`Нет события: ${event}`);\r\n        }\r\n        this.listeners[event] = this.listeners[event].filter(listener => listener !== callback);\r\n    }\r\n    emit(event, ...args) {\r\n        if (!this.listeners[event]) {\r\n            throw new Error(`Нет события: ${event}`);\r\n        }\r\n        this.listeners[event].forEach(function (listener) {\r\n            listener(...args);\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/lib/Component/index.ts\n\r\nclass Component {\r\n    constructor(props = {}) {\r\n        this._element = null;\r\n        this._mounted = false;\r\n        this.setProps = (nextProps) => {\r\n            if (!nextProps) {\r\n                return;\r\n            }\r\n            Object.assign(this.props, nextProps);\r\n        };\r\n        const eventBus = new EventBus();\r\n        this.props = this._makePropsProxy(props);\r\n        this.eventBus = () => eventBus;\r\n        this._registerEvents(eventBus);\r\n        eventBus.emit(Component.EVENTS.INIT);\r\n    }\r\n    _registerEvents(eventBus) {\r\n        eventBus.on(Component.EVENTS.INIT, this.init.bind(this));\r\n        eventBus.on(Component.EVENTS.FLOW_CDM, this._componentDidMount.bind(this));\r\n        eventBus.on(Component.EVENTS.FLOW_RENDER, this._render.bind(this));\r\n        eventBus.on(Component.EVENTS.FLOW_SCDU, this._shouldComponentDidUpdate.bind(this));\r\n        eventBus.on(Component.EVENTS.FLOW_CDU, this._componentDidUpdate.bind(this));\r\n    }\r\n    init() {\r\n        this._prerender();\r\n        this._render();\r\n    }\r\n    _componentDidMount() {\r\n        this.componentDidMount();\r\n    }\r\n    componentDidMount() { }\r\n    _shouldComponentDidUpdate(oldProps, newProps) {\r\n        const response = this.shouldComponentUpdate(oldProps, newProps);\r\n        if (response) {\r\n            this.eventBus().emit(Component.EVENTS.FLOW_RENDER);\r\n        }\r\n    }\r\n    shouldComponentUpdate(oldProps, newProps) {\r\n        return oldProps !== newProps;\r\n    }\r\n    _componentDidUpdate() {\r\n        this.componentDidUpdate();\r\n    }\r\n    componentDidUpdate() {\r\n    }\r\n    _render() {\r\n        const result = this.render();\r\n        if (!this._mounted || this._element === null || result === null) {\r\n            this._element = result;\r\n        }\r\n        else {\r\n            if (this._element instanceof HTMLElement) {\r\n                this._element.replaceWith(result);\r\n                this._element = result;\r\n            }\r\n        }\r\n        if (!this._mounted) {\r\n            this.eventBus().emit(Component.EVENTS.FLOW_CDM);\r\n            this._mounted = true;\r\n        }\r\n        else {\r\n            this.eventBus().emit(Component.EVENTS.FLOW_CDU);\r\n        }\r\n    }\r\n    render() {\r\n        return null;\r\n    }\r\n    get element() {\r\n        return this._element;\r\n    }\r\n    getContent() {\r\n        return this.element;\r\n    }\r\n    _makePropsProxy(props) {\r\n        return new Proxy(props, {\r\n            set: (target, prop, value) => {\r\n                const oldProps = Object.assign({}, this.props);\r\n                target[prop] = value;\r\n                this.eventBus().emit(Component.EVENTS.FLOW_SCDU, oldProps, target);\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n    show(propertyValue = 'block') {\r\n        if (this._element instanceof HTMLElement && this._element.style.display === 'none') {\r\n            this._element.style.display = propertyValue;\r\n            this.eventBus().emit(Component.EVENTS.FLOW_CDU);\r\n        }\r\n    }\r\n    hide() {\r\n        if (this._element instanceof HTMLElement && this._element.style.display !== 'none') {\r\n            this._element.style.display = 'none';\r\n            this.eventBus().emit(Component.EVENTS.FLOW_CDU);\r\n        }\r\n    }\r\n    visibilityToggle(propertyValue = 'block') {\r\n        if (this._element instanceof HTMLElement) {\r\n            if (this._element.style.display === 'none') {\r\n                this.show(propertyValue);\r\n            }\r\n            else {\r\n                this.hide();\r\n            }\r\n        }\r\n    }\r\n    forceUpdate() {\r\n        this.eventBus().emit(Component.EVENTS.FLOW_RENDER);\r\n    }\r\n    _prerender() {\r\n        this.prerender();\r\n    }\r\n    prerender() {\r\n    }\r\n}\r\nComponent.EVENTS = {\r\n    INIT: \"init\",\r\n    FLOW_CDM: \"flow:component-did-mount\",\r\n    FLOW_RENDER: \"flow:render\",\r\n    FLOW_SCDU: \"flow:should-component-did-update\",\r\n    FLOW_CDU: \"flow:component-did-update\",\r\n};\r\n\n// CONCATENATED MODULE: ./src/lib/Templator/index.ts\n\r\nclass Templator {\r\n    constructor() {\r\n        this._allowed = null;\r\n        this.EVENTS = {\r\n            onChange: 'input',\r\n            onClick: 'click',\r\n            onSubmit: 'submit',\r\n        };\r\n        this.SVG_TAGS = ['svg', 'circle', 'path', 'stroke', 'rect', 'line'];\r\n    }\r\n    _setAttributes(node, attrs, ctx) {\r\n        const regexp = /(?<prop>[a-zA-Z0-9-]+)(=\"(?<value>.*?)\")?/;\r\n        attrs.forEach(attr => {\r\n            var _a;\r\n            const { prop, value = '' } = (_a = attr.match(regexp)) === null || _a === void 0 ? void 0 : _a.groups;\r\n            let val = value;\r\n            const match = value === null || value === void 0 ? void 0 : value.match(/{{ (\\w+) }}/);\r\n            if (match !== null && match !== undefined && match[1] !== undefined) {\r\n                if (typeof ctx[match[1]] === 'function') {\r\n                    val = ctx[match[1]];\r\n                }\r\n                else {\r\n                    const re = new RegExp(`{{ ${match[1]} }}`);\r\n                    val = val === null || val === void 0 ? void 0 : val.replace(re, ctx[match[1]] || '');\r\n                }\r\n            }\r\n            if (typeof val === 'function' && prop in this.EVENTS) {\r\n                node.addEventListener(this.EVENTS[prop], val);\r\n            }\r\n            else if (prop === 'class' && val !== undefined && node instanceof HTMLElement) {\r\n                node.className = String(val);\r\n            }\r\n            else if (value === undefined) {\r\n                node.setAttribute(prop, \"true\");\r\n            }\r\n            else {\r\n                node.setAttribute(prop, String(val));\r\n            }\r\n        });\r\n    }\r\n    _createNode(element, ctx) {\r\n        if (typeof element === 'string') {\r\n            let newItem = element;\r\n            const vars = (element\r\n                .match(/{{ (\\w+) }}/g) || [])\r\n                .reduce((prev, current) => prev.includes(current) ? prev : [...prev, current.replace(/({)|(})|( )/g, '')], []);\r\n            const fragment = document.createDocumentFragment();\r\n            for (const v of vars) {\r\n                const regexp = new RegExp(`{{ ${v} }}`, 'g');\r\n                if (this._allowed !== null) {\r\n                    if (ctx[v] instanceof this._allowed) {\r\n                        const item = ctx[v].getContent();\r\n                        if (item !== null) {\r\n                            fragment.appendChild(item);\r\n                        }\r\n                    }\r\n                    if (Array.isArray(ctx[v])) {\r\n                        ctx[v].forEach(el => {\r\n                            const item = el.getContent();\r\n                            if (item !== null) {\r\n                                fragment.appendChild(item);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                newItem = newItem.replace(regexp, ctx[v] || '');\r\n            }\r\n            if (Array.from(fragment.children).length > 0) {\r\n                return fragment;\r\n            }\r\n            return document.createTextNode(newItem);\r\n        }\r\n        const { children, fullTag, tag } = element;\r\n        if (tag === '<>') {\r\n            const fragment = document.createDocumentFragment();\r\n            children.forEach(ch => {\r\n                fragment.appendChild(this._createNode(ch, ctx));\r\n            });\r\n            return fragment;\r\n        }\r\n        const wrapper = !this.SVG_TAGS.includes(tag) ? document.createElement(tag) : document.createElementNS('http://www.w3.org/2000/svg', tag);\r\n        const attrs = fullTag.match(/([a-zA-Z0-9-]+)=\"(.*?)\"/g);\r\n        if (attrs !== null) {\r\n            this._setAttributes(wrapper, attrs, ctx);\r\n        }\r\n        children.forEach((child) => {\r\n            wrapper.appendChild(this._createNode(child, ctx));\r\n        });\r\n        return wrapper;\r\n    }\r\n    _createTree(elements) {\r\n        const isTag = (str) => /<([a-zA-Z]+.*?)|(\\/[a-zA-Z]+)>/ig.test(str);\r\n        const parseFullTag = (str) => str.replace(/(<)|(( .*?)?\\/?>)/g, '');\r\n        const isSelfClosedTag = (str) => /<[a-zA-Z]+.*?\\/>/ig.test(str);\r\n        const firstElement = elements.shift();\r\n        if (isTag(firstElement)) {\r\n            const tag = parseFullTag(firstElement);\r\n            const children = [];\r\n            const end = `</${tag}>`;\r\n            if (!isSelfClosedTag(firstElement)) {\r\n                while (elements.length !== 0 && elements[0] !== end) {\r\n                    children.push(this._createTree(elements));\r\n                }\r\n                elements.shift();\r\n            }\r\n            return { tag, fullTag: firstElement, children };\r\n        }\r\n        else if (firstElement === '<>') {\r\n            const children = [];\r\n            while (elements[0] !== '</>') {\r\n                children.push(this._createTree(elements));\r\n            }\r\n            return { tag: firstElement, fullTag: firstElement, children };\r\n        }\r\n        else {\r\n            return firstElement;\r\n        }\r\n    }\r\n    _parseTemplate(str) {\r\n        const row = str.replace(/([\\r\\n]+)/g, '').replace(/ {2,}/g, '');\r\n        const elements = row.match(/(<.*?>)|([^<]+)/ig);\r\n        return elements.filter(item => item !== '');\r\n    }\r\n    compile(str, ctx = {}) {\r\n        // получим массив тегов и текстовых нод\r\n        const elements = this._parseTemplate(str);\r\n        // преобразуем этот массив в дерево\r\n        const tree = this._createTree(elements);\r\n        // выводим элементы дерева\r\n        return this._createNode(tree, ctx);\r\n    }\r\n}\r\nclass ComponentTemplator extends Templator {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._allowed = Component;\r\n    }\r\n}\r\nconst templator = new ComponentTemplator();\r\n\n// CONCATENATED MODULE: ./src/components/Error/template.ts\nconst template = `\n        <main class=\"wrapper-center\">\n        <h1 class=\"visually-hidden\">Ошибка</h1>\n        <div class=\"error\">\n            <div class=\"error__title\">{{ code }}</div>\n            <div class=\"error__description\">Мы уже фиксим</div>\n            <a href=\"/\" class=\"error__link\">Назад к чатам</a>\n        </div>\n    </main>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/Error/index.ts\n\r\n\r\n\r\nclass Err extends Component {\r\n    render() {\r\n        return templator.compile(template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/pages/404.ts\n\r\nconst error404 = new Err({\r\n    code: 404,\r\n});\r\n\n// CONCATENATED MODULE: ./src/pages/500.ts\n\r\nconst error500 = new Err({\r\n    code: 500,\r\n});\r\n\n// CONCATENATED MODULE: ./src/components/Chat/template.ts\nconst template_template = `\n    <main class=\"chat\">\n        {{ chatHeader }}\n        {{ messages }}\n        {{ messageForm }}\n        {{ deleteModal }}\n    </main>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/Chat/index.ts\n\r\n\r\n\r\nclass Chat extends Component {\r\n    render() {\r\n        return templator.compile(template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ChatActionsButton/template.ts\nconst ChatActionsButton_template_template = `\n    <button class=\"{{ className }}\" type=\"button\" title=\"{{ title }}\" onClick=\"{{ onClick }}\">\n        {{ icon }}\n    </button>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ChatActionsButton/index.ts\n\r\n\r\n\r\nclass ChatActionsButton extends Component {\r\n    render() {\r\n        return templator.compile(ChatActionsButton_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ChatActions/template.ts\nconst ChatActions_template_template = `\n    <div class=\"chat-actions\">\n        {{ buttons }}\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ChatActions/index.ts\n\r\n\r\n\r\nclass ChatActions extends Component {\r\n    render() {\r\n        return templator.compile(ChatActions_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ChatActionsItem/template.ts\nconst ChatActionsItem_template_template = `\n    <button class=\"chat-actions__item\" type=\"button\" onClick=\"{{ onClick }}\">\n        {{ icon }}\n        <span class=\"chat-actions__item-label\">{{ label }}</span>\n    </button>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ChatActionsItem/index.ts\n\r\n\r\n\r\nclass ChatActionsItem extends Component {\r\n    render() {\r\n        return templator.compile(ChatActionsItem_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ChatActionsModal/template.ts\nconst ChatActionsModal_template_template = `\n    <div class=\"chat-modal {{ className }}\">\n        {{ content }}\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ChatActionsModal/index.ts\n\r\n\r\n\r\nclass ChatActionsModal extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closeModal = () => {\r\n            this.hide();\r\n        };\r\n    }\r\n    getXClassName(x) {\r\n        return x === 'left' ? 'chat-modal_left' : 'chat-modal_right';\r\n    }\r\n    getYClassName(y) {\r\n        return y === 'top' ? 'chat-modal_top' : 'chat-modal_bottom';\r\n    }\r\n    render() {\r\n        const { content, x, y } = this.props;\r\n        return templator.compile(ChatActionsModal_template_template, {\r\n            content,\r\n            className: `${this.getXClassName(x)} ${this.getYClassName(y)}`\r\n        });\r\n    }\r\n    componentDidMount() {\r\n        this.hide();\r\n    }\r\n    componentDidUpdate() {\r\n        const modal = this.getContent();\r\n        if (modal instanceof HTMLElement) {\r\n            setTimeout(() => {\r\n                if (modal.style.display === 'none') {\r\n                    document.removeEventListener('click', this.closeModal);\r\n                }\r\n                else {\r\n                    document.addEventListener('click', this.closeModal);\r\n                }\r\n            }, 0);\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ChatInformation/template.ts\nconst ChatInformation_template_template = `\n    <div class=\"chat-row\">\n        <img class=\"chat-header__avatar\" src=\"{{ avatarSrc }}\" alt=\"{{ avatarAlt }}\" width=\"34\" height=\"34\" />\n        <div class=\"chat-header__information\">\n            <div class=\"chat-header__title\">{{ chatName }}</div>\n            <div class=\"chat-header__status\">{{ status }}</div>\n        </div>\n        {{ chatActionsButton }}\n        {{ chatActionsModal }}\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ChatInformation/index.ts\n\r\n\r\n\r\nclass ChatInformation extends Component {\r\n    render() {\r\n        return templator.compile(ChatInformation_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ChatRenameForm/template.ts\nconst ChatRenameForm_template_template = `\n    <form class=\"chat-header-form\" onSubmit=\"{{ onSubmit }}\">\n        <input type=\"text\" class=\"chat-header-form__input\" value=\"{{ title }}\" onChange=\"{{ onChange }}\" />\n        <button type=\"submit\" class=\"chat-header-form__button\">Сохранить</button>\n    </form>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ChatRenameForm/index.ts\n\r\n\r\n\r\nclass ChatRenameForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.message = '';\r\n        this.message = this.props.title;\r\n    }\r\n    render() {\r\n        const { onSubmit, title } = this.props;\r\n        return templator.compile(ChatRenameForm_template_template, {\r\n            title,\r\n            onChange: ({ target }) => {\r\n                const { value } = target;\r\n                this.message = value;\r\n            },\r\n            onSubmit: (e) => {\r\n                e.preventDefault();\r\n                if (this.message !== '') {\r\n                    console.log(`chat_name: ${this.message}`);\r\n                    onSubmit();\r\n                }\r\n            },\r\n        });\r\n    }\r\n    componentDidMount() {\r\n        this.hide();\r\n    }\r\n    componentDidUpdate() {\r\n        var _a;\r\n        const element = this.getContent();\r\n        if (element instanceof HTMLElement && element.style.display !== 'none') {\r\n            (_a = element.querySelector('input')) === null || _a === void 0 ? void 0 : _a.select();\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ChatHeader/template.ts\nconst ChatHeader_template_template = `\n    <header class=\"chat-header\">\n        {{ chatInformation }}\n        {{ chatRenameForm }}\n    </header>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ChatHeader/index.ts\n\r\n\r\n\r\nclass ChatHeader extends Component {\r\n    render() {\r\n        return templator.compile(ChatHeader_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ChatItem/template.ts\nconst ChatItem_template_template = `\n    <li class=\"chat-item-wrapper\">\n        <div class=\"chat-item\">\n            <img class=\"chat-item__avatar\" src=\"{{ avatarSrc }}\" alt=\"{{ avatarAlt }}\" width=\"47\" height=\"47\" />\n            <h3 class=\"chat-item__title\">\n                <a href=\"{{ chatUrl }}\" class=\"chat-item__link\">{{ chatName }}</a>\n            </h3>\n            <div class=\"chat-item__message\">{{ chatMessage }}</div>\n            <div class=\"chat-item__time-wrapper\">\n                <div class=\"chat-item__time\">{{ date }}</div>\n            </div>\n            {{ newMessage }}\n        </div>\n    </li>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ChatItem/index.ts\n\r\n\r\n\r\nclass ChatItem extends Component {\r\n    render() {\r\n        return templator.compile(ChatItem_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/NewMessage/template.ts\nconst NewMessage_template_template = `\n    <div class=\"chat-item__new-message\">\n        {{ count }}\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/NewMessage/index.ts\n\r\n\r\n\r\nclass NewMessage extends Component {\r\n    render() {\r\n        return templator.compile(NewMessage_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ChatItemOutgoingMessage/template.ts\nconst ChatItemOutgoingMessage_template_template = `\n    <>\n        <span class=\"chat-item__you-label\">Вы:</span> {{ message }}\n    </>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ChatItemOutgoingMessage/index.ts\n\r\n\r\n\r\nclass CharItemOutgoingMessage extends Component {\r\n    render() {\r\n        return templator.compile(ChatItemOutgoingMessage_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/Chats/template.ts\nconst Chats_template_template = `\n    <div class=\"chats-wrapper\">\n        <h1 class=\"visually-hidden\">{{ pageTitle }}</h1>\n        <aside class=\"chats-wrapper__aside\">\n            <div class=\"link-profile-wrapper\">\n                <a href=\"/profile\" class=\"link-profile\">Профиль</a>\n            </div>\n            <div class=\"chats-search\">\n                <input type=\"search\" class=\"chats-search__input js-input-search\" placeholder=\"Поиск\" name=\"search\"  autocomplete=\"off\" onChange=\"{{ onChange }}\" />\n            </div>\n            <section class=\"chats-list\">\n                <h2 class=\"visually-hidden\">Список чатов</h2>\n                <ul class=\"chats-list__content\">\n                    {{ chatItems }}\n                </ul>\n            </section>\n        </aside>\n        {{ content }}\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/Chats/index.ts\n\r\n\r\n\r\nclass Chats extends Component {\r\n    render() {\r\n        return templator.compile(Chats_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/assets/ActionsIcon/template.ts\nconst ActionsIcon_template_template = `\n    <svg width=\"3\" height=\"16\" viewBox=\"0 0 3 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"1.5\" cy=\"2\" r=\"1.5\" fill=\"currentColor\" />\n        <circle cx=\"1.5\" cy=\"8\" r=\"1.5\" fill=\"currentColor\" />\n        <circle cx=\"1.5\" cy=\"14\" r=\"1.5\" fill=\"currentColor\" />\n    </svg>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/ActionsIcon/index.ts\n\r\n\r\n\r\nclass ActionsIcon extends Component {\r\n    render() {\r\n        return templator.compile(ActionsIcon_template_template);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/assets/RenameIcon/template.ts\nconst RenameIcon_template_template = `\n    <svg width=\"22\" height=\"19\" viewBox=\"0 0 22 19\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M0 19h22v-1.5H0z\" fill=\"currentColor\" />\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M16.26 0L19 2.74l-2.055 2.055-2.74-2.74L16.26 0zm-2.74 2.74l2.74 2.74L6.74 15H4v-2.74l9.52-9.52z\" fill=\"currentColor\" />\n    </svg>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/RenameIcon/index.ts\n\r\n\r\n\r\nclass RenameIcon extends Component {\r\n    render() {\r\n        return templator.compile(RenameIcon_template_template);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/assets/DeleteIcon/template.ts\nconst DeleteIcon_template_template = `\n    <svg width=\"22\" height=\"22\" viewBox=\"0 0 22 22\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"11\" cy=\"11\" r=\"10.25\" stroke-width=\"1.5\" stroke=\"currentColor\" />\n        <path stroke-width=\"1.5\" d=\"M7.111 7.111l7.778 7.778m-7.778 0l7.778-7.778\" stroke=\"currentColor\" />\n    </svg>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/DeleteIcon/index.ts\n\r\n\r\n\r\nclass DeleteIcon extends Component {\r\n    render() {\r\n        return templator.compile(DeleteIcon_template_template);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/Messages/template.ts\nconst Messages_template_template = `\n    <div class=\"chat__content\">\n        <h2 class=\"visually-hidden\">Список сообщений</h2>\n        <ul class=\"chat__messages\">\n            {{ messages }}\n        </ul>\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/MessageDate/template.ts\nconst MessageDate_template_template = `\n    <li class=\"messages-date\">\n        {{ date }}\n    </li>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/MessageDate/index.ts\n\r\n\r\n\r\nclass MessageDate extends Component {\r\n    render() {\r\n        return templator.compile(MessageDate_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/Message/template.ts\nconst Message_template_template = `\n    <li class=\"message {{ className }}\">\n        {{ content }}\n        <span class=\"message__time\">\n            {{ timeIcon }}\n            <time>{{ time }}</time>\n        </span>\n    </li>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/SentIcon/template.ts\nconst SentIcon_template_template = `\n    <svg width=\"8\" height=\"4\" viewBox=\"0 0 11 5\" xmlns=\"http://www.w3.org/2000/svg\">\n        <line y1=\"-0.5\" x2=\"3.765\" y2=\"-0.5\" transform=\"matrix(0.705933 0.708278 -0.705933 0.708278 0.700195 2.33301)\" stroke=\"currentColor\" />\n        <line y1=\"-0.5\" x2=\"5.6475\" y2=\"-0.5\" transform=\"matrix(0.705933 -0.708278 0.705933 0.708278 3.3584 5)\" stroke=\"currentColor\" />\n    </svg>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/SentIcon/index.ts\n\r\n\r\n\r\nclass SentIcon extends Component {\r\n    render() {\r\n        return templator.compile(SentIcon_template_template);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/assets/ReadIcon/template.ts\nconst ReadIcon_template_template = `\n    <svg width=\"8\" height=\"4\" viewBox=\"0 0 11 5\" xmlns=\"http://www.w3.org/2000/svg\">\n        <line y1=\"-0.5\" x2=\"3.765\" y2=\"-0.5\" transform=\"matrix(0.705933 0.708278 -0.705933 0.708278 0.700195 2.33301)\" stroke=\"currentColor\" />\n        <line y1=\"-0.5\" x2=\"5.6475\" y2=\"-0.5\" transform=\"matrix(0.705933 -0.708278 0.705933 0.708278 3.3584 5)\" stroke=\"currentColor\" />\n        <line y1=\"-0.5\" x2=\"5.6475\" y2=\"-0.5\" transform=\"matrix(0.705933 -0.708278 0.705933 0.708278 6.01611 5)\" stroke=\"currentColor\" />\n    </svg>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/ReadIcon/index.ts\n\r\n\r\n\r\nclass ReadIcon extends Component {\r\n    render() {\r\n        return templator.compile(ReadIcon_template_template);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/Message/index.ts\n\r\n\r\n\r\n\r\n\r\nclass Message extends Component {\r\n    getAttachClassName(attach) {\r\n        return attach ? 'message_attach' : '';\r\n    }\r\n    getStatusClassName(type, status) {\r\n        return type === 'outgoing' ? (status === 'read' ? 'message_read' : (status === 'sent' ? 'message_sent' : '')) : '';\r\n    }\r\n    getTypeClassName(type) {\r\n        return type === 'incoming' ? 'message_incoming' : (type === 'outgoing' ? 'message_outgoing' : '');\r\n    }\r\n    getTimeIcon(type, status) {\r\n        return type === 'outgoing' ? (status === 'read' ? this.readIcon : (status === 'sent' ? this.sentIcon : '')) : '';\r\n    }\r\n    prerender() {\r\n        this.sentIcon = new SentIcon();\r\n        this.readIcon = new ReadIcon();\r\n    }\r\n    render() {\r\n        const { attach, content, status, time, type, } = this.props;\r\n        return templator.compile(Message_template_template, {\r\n            className: `${this.getAttachClassName(attach)} ${this.getStatusClassName(type, status)} ${this.getTypeClassName(type)}`,\r\n            content,\r\n            time,\r\n            timeIcon: this.getTimeIcon(type, status),\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/MessageContent/template.ts\nconst MessageContent_template_template = `\n    <div class=\"message__content\">{{ text }}<span class=\"{{ timeHolderClassName }}\"></span></div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/MessageContent/index.ts\n\r\n\r\n\r\nclass MessageContent extends Component {\r\n    render() {\r\n        const { text, last } = this.props;\r\n        return templator.compile(MessageContent_template_template, {\r\n            text,\r\n            timeHolderClassName: last ? 'message__time-holder' : '',\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/MessageAttach/template.ts\nconst MessageAttach_template_template = `\n    <picture>\n        <source srcset=\"{{ srcset }}\" />\n        <img src=\"{{ src }}\" alt=\"{{ alt }}\" />\n    </picture>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/MessageAttach/index.ts\n\r\n\r\n\r\nclass MessageAttach extends Component {\r\n    render() {\r\n        return templator.compile(MessageAttach_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/Messages/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Messages extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.messages = [];\r\n    }\r\n    prerender() {\r\n        this.messages = [\r\n            new MessageDate({ date: '19 июня' }),\r\n            new Message({\r\n                content: [\r\n                    new MessageContent({\r\n                        text: 'Привет! Смотри, тут всплыл интересный кусок лунной космической истории — НАСА в какой-то момент попросила Хассельблад адаптировать модель SWC для полетов на Луну. Сейчас мы все знаем что астронавты летали с моделью 500 EL — и к слову говоря, все тушки этих камер все еще находятся на поверхности Луны, так как астронавты с собой забрали только кассеты с пленкой.',\r\n                    }),\r\n                    new MessageContent({\r\n                        last: true,\r\n                        text: 'Хассельблад в итоге адаптировал SWC для космоса, но что-то пошло не так и на ракету они так никогда и не попали. Всего их было произведено 25 штук, одну из них недавно продали на аукционе за 45000 евро.',\r\n                    }),\r\n                ],\r\n                time: '11:56',\r\n                type: 'incoming',\r\n            }),\r\n            new Message({\r\n                attach: true,\r\n                content: [\r\n                    new MessageAttach({\r\n                        alt: 'photo.jpg',\r\n                        src: '/assets/photo.jpg',\r\n                        srcset: '/assets/photo.webp',\r\n                    })\r\n                ],\r\n                time: '11:56',\r\n                type: 'incoming',\r\n            }),\r\n            new Message({\r\n                content: [\r\n                    new MessageContent({\r\n                        last: true,\r\n                        text: 'Круто!',\r\n                    }),\r\n                ],\r\n                status: 'read',\r\n                time: '12:00',\r\n                type: 'outgoing',\r\n            }),\r\n        ];\r\n    }\r\n    render() {\r\n        return templator.compile(Messages_template_template, { messages: this.messages });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/MessageForm/template.ts\nconst MessageForm_template_template = `\n    <form class=\"message-form\" onSubmit=\"{{ onSubmit }}\">\n        <div class=\"chat-row\">\n            {{ buttonAttach }}\n            {{ attachModal }}\n            <input type=\"text\" class=\"message-form__input\" placeholder=\"Сообщение\" name=\"message\" autocomplete=\"off\" onChange=\"{{ onChange }}\" />\n            <button type=\"submit\" class=\"message-form__submit\" title=\"Отправить сообщение\">\n                <svg width=\"13\" height=\"12\" viewBox=\"0 0 13 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect y=\"5.2002\" width=\"11\" height=\"1.6\" fill=\"currentColor\" />\n                    <path d=\"M7 1L11 6L7 11\" stroke-width=\"1.6\" stroke=\"currentColor\" />\n                </svg>\n            </button>            \n        </div>\n    </form>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/AttachIcon/template.ts\nconst AttachIcon_template_template = `\n    <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M7.187 13.5l7.576-7.576.943.943-7.577 7.576-.942-.943zM9.7 16.014l7.577-7.576.943.943-7.576 7.576-.943-.943zm5.343 5.343l7.577-7.577.942.943-7.576 7.576-.943-.942zm2.514 2.513l7.576-7.576.943.943-7.576 7.576-.943-.942z\" fill=\"currentColor\" />\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M17.557 23.87c-2.615 2.616-6.845 2.625-9.449.022-2.603-2.604-2.594-6.834.021-9.45l-.942-.942c-3.139 3.138-3.15 8.215-.026 11.339 3.125 3.124 8.201 3.113 11.34-.025l-.944-.943zm5.063-10.09l.942.943c2.441-2.44 2.45-6.389.02-8.819-2.43-2.43-6.379-2.421-8.82.02l.944.943c1.917-1.918 5.02-1.925 6.929-.016 1.91 1.91 1.902 5.012-.016 6.93z\" fill=\"currentColor\" />\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.7 16.015c-1.743 1.743-1.749 4.563-.013 6.3 1.735 1.735 4.556 1.729 6.3-.015l-.944-.943a3.118 3.118 0 0 1-4.41.01 3.118 3.118 0 0 1 .01-4.41l-.942-.942z\" fill=\"currentColor\" />\n    </svg>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/AttachIcon/index.ts\n\r\n\r\n\r\nclass AttachIcon extends Component {\r\n    render() {\r\n        return templator.compile(AttachIcon_template_template);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/assets/PhotoIcon/template.ts\nconst PhotoIcon_template_template = `\n    <svg width=\"22\" height=\"22\" viewBox=\"0 0 22 22\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M4 1.5h14A2.5 2.5 0 0 1 20.5 4v10l-5.98-1.595A11.998 11.998 0 0 0 11.427 12h-.856c-1.043 0-2.083.136-3.091.405L1.5 14V4A2.5 2.5 0 0 1 4 1.5zM0 4a4 4 0 0 1 4-4h14a4 4 0 0 1 4 4v14a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4V4zm8 2a2 2 0 1 1-4 0 2 2 0 0 1 4 0z\" fill=\"currentColor\" />\n    </svg>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/PhotoIcon/index.ts\n\r\n\r\n\r\nclass PhotoIcon extends Component {\r\n    render() {\r\n        return templator.compile(PhotoIcon_template_template);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/assets/FileIcon/template.ts\nconst FileIcon_template_template = `\n    <svg viewBox=\"0 0 22 22\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M4 1.5h14A2.5 2.5 0 0 1 20.5 4v8H16a4 4 0 0 0-4 4v4.5H4A2.5 2.5 0 0 1 1.5 18V4A2.5 2.5 0 0 1 4 1.5zM12 22H4a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4h14a4 4 0 0 1 4 4v14a4 4 0 0 1-4 4h-6z\" fill=\"currentColor\" />\n    </svg>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/FileIcon/index.ts\n\r\n\r\n\r\nclass FileIcon extends Component {\r\n    render() {\r\n        return templator.compile(FileIcon_template_template);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/assets/LocationIcon/template.ts\nconst LocationIcon_template_template = `\n    <svg width=\"22\" height=\"22\" viewBox=\"0 0 22 22\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M20.5 11a9.5 9.5 0 1 1-19 0 9.5 9.5 0 0 1 19 0zm1.5 0c0 6.075-4.925 11-11 11S0 17.075 0 11 4.925 0 11 0s11 4.925 11 11zm-11 3a3 3 0 1 0 0-6 3 3 0 0 0 0 6z\" fill=\"currentColor\" />\n    </svg>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/LocationIcon/index.ts\n\r\n\r\n\r\nclass LocationIcon extends Component {\r\n    render() {\r\n        return templator.compile(LocationIcon_template_template);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/MessageForm/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass MessageForm extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.message = '';\r\n    }\r\n    prerender() {\r\n        this.attachFormMessageModal = new ChatActionsModal({\r\n            content: new ChatActions({\r\n                buttons: [\r\n                    new ChatActionsItem({\r\n                        icon: new PhotoIcon(),\r\n                        label: 'Фото или Видео',\r\n                        onClick: () => console.log('Фото или Видео'),\r\n                    }),\r\n                    new ChatActionsItem({\r\n                        icon: new FileIcon(),\r\n                        label: 'Файл',\r\n                        onClick: () => console.log('Файл'),\r\n                    }),\r\n                    new ChatActionsItem({\r\n                        icon: new LocationIcon(),\r\n                        label: 'Локация',\r\n                        onClick: () => console.log('Локация'),\r\n                    }),\r\n                ],\r\n            }),\r\n            x: 'left',\r\n            y: 'top',\r\n        });\r\n        const attachFormMessageModalToggle = () => {\r\n            this.attachFormMessageModal.visibilityToggle();\r\n        };\r\n        this.buttonFormMessageAttach = new ChatActionsButton({\r\n            className: 'message-form__attach',\r\n            icon: new AttachIcon(),\r\n            onClick: attachFormMessageModalToggle,\r\n            title: 'Добавить вложение',\r\n        });\r\n    }\r\n    render() {\r\n        return templator.compile(MessageForm_template_template, {\r\n            attachModal: this.attachFormMessageModal,\r\n            buttonAttach: this.buttonFormMessageAttach,\r\n            onChange: ({ target }) => {\r\n                const { value } = target;\r\n                this.message = value;\r\n            },\r\n            onSubmit: (e) => {\r\n                e.preventDefault();\r\n                if (this.message !== '') {\r\n                    console.log(`message: ${this.message}`);\r\n                    this.forceUpdate();\r\n                }\r\n            },\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ChatDeleteModal/template.ts\nconst ChatDeleteModal_template_template = `\n    <div class=\"modal-delete js-modal-delete\">\n        <div class=\"modal-delete__content\">\n            <div class=\"modal-delete__title\">Вы хотите удалить чат?</div>\n            <button class=\"modal-delete__button modal-delete__button_confirm\" type=\"button\" onClick=\"{{ onConfirm }}\">Удалить</button>\n            <button class=\"modal-delete__button modal-delete__button-cancel\" type=\"button\" onClick=\"{{ onCancel }}\">Отменить</button>\n        </div>\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ChatDeleteModal/index.ts\n\r\n\r\n\r\nclass ChatDeleteModal extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closeModal = () => {\r\n            this.hide();\r\n        };\r\n    }\r\n    render() {\r\n        return templator.compile(ChatDeleteModal_template_template, {\r\n            onCancel: () => {\r\n                console.log('cancel');\r\n            },\r\n            onConfirm: () => {\r\n                console.log('confirm');\r\n            },\r\n        });\r\n    }\r\n    componentDidMount() {\r\n        this.hide();\r\n    }\r\n    componentDidUpdate() {\r\n        const modal = this.getContent();\r\n        if (modal instanceof HTMLElement) {\r\n            setTimeout(() => {\r\n                if (modal.style.display === 'none') {\r\n                    document.removeEventListener('click', this.closeModal);\r\n                }\r\n                else {\r\n                    document.addEventListener('click', this.closeModal);\r\n                }\r\n            }, 0);\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/data/chatItemsData.ts\nconst chatItemsData = [{\r\n        avatarAlt: 'Аватар беседы с Андреем',\r\n        avatarSrc: '/assets/avatar.jpg',\r\n        incomingMessage: 'Изображение',\r\n        chatName: 'Андрей',\r\n        chatUrl: '/chat',\r\n        date: '10:49',\r\n        newMessage: 2,\r\n    }, {\r\n        avatarAlt: 'Аватар беседы Киноклуб',\r\n        avatarSrc: '/assets/avatar.jpg',\r\n        outgoingMessage: 'стикер',\r\n        chatName: 'Киноклуб',\r\n        chatUrl: '/chat',\r\n        date: '12:00',\r\n    }, {\r\n        avatarAlt: 'Аватар беседы с Илья',\r\n        avatarSrc: '/assets/avatar.jpg',\r\n        incomingMessage: 'Друзья, у меня для вас особенный выпуск новостей! Тут еще текст, который не влезает',\r\n        chatName: 'Илья',\r\n        chatUrl: '/chat',\r\n        date: '15:12',\r\n        newMessage: 4,\r\n    }, {\r\n        avatarAlt: 'Аватар беседы с Вадимом',\r\n        avatarSrc: '/assets/avatar.jpg',\r\n        outgoingMessage: 'Круто!',\r\n        chatName: 'Вадим',\r\n        chatUrl: '/chat',\r\n        date: 'Пт',\r\n    }, {\r\n        avatarAlt: 'Аватар беседы тет-а-теты',\r\n        avatarSrc: '/assets/avatar.jpg',\r\n        incomingMessage: 'И Human Interface Guidelines и Material Design рекомендуют и еще текст, который не влезает',\r\n        chatName: 'тет-а-теты',\r\n        chatUrl: '/chat',\r\n        date: 'Ср',\r\n    }, {\r\n        avatarAlt: 'Аватар беседы 1, 2, 3',\r\n        avatarSrc: '/assets/avatar.jpg',\r\n        incomingMessage: 'Миллионы россиян ежедневно проводят десятки часов свое и тут тоже есть текст, который не влезает',\r\n        chatName: '1, 2, 3',\r\n        chatUrl: '/chat',\r\n        date: 'Пн',\r\n    }, {\r\n        avatarAlt: 'Аватар беседы Design Destroyer',\r\n        avatarSrc: '/assets/avatar.jpg',\r\n        incomingMessage: 'В 2008 году художник Jon Rafman начал собирать - да-да, и этот текст тоже не влезает',\r\n        chatName: 'Design Destroyer',\r\n        chatUrl: '/chat',\r\n        date: 'Пн',\r\n    }, {\r\n        avatarAlt: 'Аватар беседы Day.',\r\n        avatarSrc: '/assets/avatar.jpg',\r\n        incomingMessage: 'Так увлёкся работой по курсу, что совсем забыл его анонсировать - фух, это последний текст, который не влезает',\r\n        chatName: 'Day.',\r\n        chatUrl: '/chat',\r\n        date: '31 Мая 2020',\r\n    }];\r\n\n// CONCATENATED MODULE: ./src/pages/chat.ts\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst renameFormToggle = () => {\r\n    chatRenameForm.visibilityToggle('grid');\r\n    chatInformation.visibilityToggle('grid');\r\n};\r\nconst deleteModalToggle = () => {\r\n    chatModalDelete.visibilityToggle('flex');\r\n};\r\nconst renameIcon = new RenameIcon();\r\nconst deleteIcon = new DeleteIcon();\r\nconst chatActions = new ChatActions({\r\n    buttons: [\r\n        new ChatActionsItem({\r\n            icon: renameIcon,\r\n            label: 'Переименовать',\r\n            onClick: renameFormToggle,\r\n        }),\r\n        new ChatActionsItem({\r\n            icon: deleteIcon,\r\n            label: 'Удалить',\r\n            onClick: deleteModalToggle,\r\n        }),\r\n    ],\r\n});\r\nconst chatActionsModal = new ChatActionsModal({\r\n    content: chatActions,\r\n    x: 'right',\r\n    y: 'bottom'\r\n});\r\nconst chatActionsModalToggle = () => {\r\n    chatActionsModal.visibilityToggle();\r\n};\r\nconst actionsIcon = new ActionsIcon();\r\nconst chatActionsButton = new ChatActionsButton({\r\n    className: 'chat-header__actions',\r\n    icon: actionsIcon,\r\n    onClick: chatActionsModalToggle,\r\n    title: 'Действия с чатом',\r\n});\r\nconst chatRenameForm = new ChatRenameForm({\r\n    onSubmit: renameFormToggle,\r\n    title: 'Вадим',\r\n});\r\nconst chatInformation = new ChatInformation({\r\n    avatarAlt: 'Аватар беседы с Вадимом',\r\n    avatarSrc: '/assets/avatar.jpg',\r\n    chatActionsButton,\r\n    chatActionsModal,\r\n    chatName: 'Вадим',\r\n    status: 'Был 5 минут назад',\r\n});\r\nconst chatHeader = new ChatHeader({\r\n    chatRenameForm,\r\n    chatInformation,\r\n});\r\nconst messages = new Messages();\r\nconst messageForm = new MessageForm();\r\nconst chatModalDelete = new ChatDeleteModal();\r\nconst chatBlock = new Chat({\r\n    chatHeader,\r\n    deleteModal: chatModalDelete,\r\n    messages,\r\n    messageForm,\r\n});\r\nconst chatItems = chatItemsData.map((_a) => {\r\n    var { newMessage, incomingMessage, outgoingMessage } = _a, mainProps = __rest(_a, [\"newMessage\", \"incomingMessage\", \"outgoingMessage\"]);\r\n    const props = Object.assign({}, mainProps);\r\n    if (newMessage !== undefined) {\r\n        props.newMessage = new NewMessage({ count: newMessage });\r\n    }\r\n    if (incomingMessage !== undefined) {\r\n        props.chatMessage = incomingMessage;\r\n    }\r\n    else if (outgoingMessage !== undefined) {\r\n        props.chatMessage = new CharItemOutgoingMessage({ message: outgoingMessage });\r\n    }\r\n    return new ChatItem(Object.assign({}, props));\r\n});\r\nconst chat = new Chats({\r\n    chatItems,\r\n    content: chatBlock,\r\n    onChange: ({ target }) => {\r\n        const { value } = target;\r\n        console.log(`search: ${value}`);\r\n    },\r\n    pageTitle: 'Выбор чата',\r\n});\r\n\n// CONCATENATED MODULE: ./src/components/SelectChat/template.ts\nconst SelectChat_template_template = `\n    <main class=\"wrapper-center\">\n        Выберите чат, чтобы отправить сообщение\n    </main>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/SelectChat/index.ts\n\r\n\r\n\r\nclass SelectChat extends Component {\r\n    render() {\r\n        return templator.compile(SelectChat_template_template);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/pages/chats.ts\nvar chats_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst selectChat = new SelectChat();\r\nconst chats_chatItems = chatItemsData.map((_a) => {\r\n    var { newMessage, incomingMessage, outgoingMessage } = _a, mainProps = chats_rest(_a, [\"newMessage\", \"incomingMessage\", \"outgoingMessage\"]);\r\n    const props = Object.assign({}, mainProps);\r\n    if (newMessage !== undefined) {\r\n        props.newMessage = new NewMessage({ count: newMessage });\r\n    }\r\n    if (incomingMessage !== undefined) {\r\n        props.chatMessage = incomingMessage;\r\n    }\r\n    else if (outgoingMessage !== undefined) {\r\n        props.chatMessage = new CharItemOutgoingMessage({ message: outgoingMessage });\r\n    }\r\n    return new ChatItem(Object.assign({}, props));\r\n});\r\nconst chats = new Chats({\r\n    chatItems: chats_chatItems,\r\n    content: selectChat,\r\n    onChange: ({ target }) => {\r\n        const { value } = target;\r\n        console.log(`search: ${value}`);\r\n    },\r\n    pageTitle: 'Выбор чата',\r\n});\r\n\n// CONCATENATED MODULE: ./src/components/Profile/template.ts\nconst Profile_template_template = `\n    <div class=\"profile-page\">\n        <div class=\"profile__back-link-wrapper\">\n            <a href=\"/\" class=\"profile-back-link\" title=\"Вернуться к выбору чата\">\n                <svg width=\"13\" height=\"12\" viewBox=\"0 0 13 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect x=\"13\" y=\"6.80005\" width=\"11\" height=\"1.6\" transform=\"rotate(-180 13 6.80005)\" fill=\"white\" />\n                    <path d=\"M6 11L2 6L6 1\" stroke=\"white\" stroke-width=\"1.6\" />\n                </svg>\n            </a>\n        </div>\n        <main class=\"profile {{ className }}\">\n            <h1 class=\"visually-hidden\">\n                {{ pageTitle }}\n            </h1>\n            <img src=\"{{ avatarSrc }}\" alt=\"Аватар пользователя {{ displayName }}\" width=\"131\" height=\"131\" />\n            <div class=\"profile__title\">\n                {{ displayName }}\n            </div>\n            {{ content }}\n        </main>\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/Profile/index.ts\nvar Profile_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\nclass Profile extends Component {\r\n    render() {\r\n        const _a = this.props, { long } = _a, others = Profile_rest(_a, [\"long\"]);\r\n        return templator.compile(Profile_template_template, Object.assign(Object.assign({}, others), { className: long ? 'profile_long' : '' }));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ProfileForm/template.ts\nconst ProfileForm_template_template = `\n    <form class=\"profile-section\">\n        {{ content }}\n        <button type=\"submit\" class=\"profile__submit\">Сохранить</button>\n    </form>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ProfileRow/templateReadonly.ts\nconst templateReadonly = `\n    <div class=\"profile__row profile-row\">\n        <div class=\"profile-row__title\">{{ title }}</div>\n        <div class=\"profile-row__value\">{{ value }}</div>\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ProfileRow/templateWritable.ts\nconst templateWritable = `\n    <div class=\"profile__row profile-row\">\n        <div class=\"profile-row__title\">{{ title }}</div>\n        <input type=\"{{ type }}\" class=\"profile-row__value\" value=\"{{ value }}\" name=\"{{ name }}\" />\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ProfileRow/index.ts\nvar ProfileRow_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\nclass ProfileRow extends Component {\r\n    render() {\r\n        const _a = this.props, { writable } = _a, others = ProfileRow_rest(_a, [\"writable\"]);\r\n        if (writable) {\r\n            return templator.compile(templateWritable, Object.assign({}, others));\r\n        }\r\n        return templator.compile(templateReadonly, Object.assign({}, others));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/utils/validation/isEmail.ts\nconst isEmail = (str) => /^\\S+@\\S+$/.test(str);\r\n\n// CONCATENATED MODULE: ./src/utils/validation/isShortPassword.ts\nconst isShortPassword = (password) => password.length < 8;\r\n\n// CONCATENATED MODULE: ./src/utils/validation/isPhone.ts\nconst isPhone = (str) => /^((8|\\+7)[- ]?)?((\\d{3})?[- ]?)?[\\d- ]{7,10}$/.test(str);\r\n\n// CONCATENATED MODULE: ./src/utils/cleanObject.ts\nconst cleanObject = (obj) => {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            const value = obj[key];\r\n            if (value !== undefined && value !== null) {\r\n                res[key] = obj[key];\r\n            }\r\n        }\r\n    }\r\n    return res;\r\n};\r\n\n// CONCATENATED MODULE: ./src/lib/Form/index.ts\n\r\nclass Form {\r\n    constructor({ onSubmit, wrapper, validator = {}, exclude, }) {\r\n        var _a;\r\n        this.errors = {};\r\n        this.touched = [];\r\n        this._INPUT_ERROR_CLASSNAME = 'form-input-error';\r\n        this._ERROR_CLASSNAME = 'form-error';\r\n        this.form = wrapper.tagName === 'FORM' ? wrapper : wrapper.querySelector('form');\r\n        this.formData = new FormData(this.form || undefined);\r\n        this.formData.forEach((_, name) => {\r\n            var _a;\r\n            const input = (_a = this.form) === null || _a === void 0 ? void 0 : _a.querySelector(`[name=\"${name}\"`);\r\n            input === null || input === void 0 ? void 0 : input.addEventListener('input', ({ target }) => {\r\n                const { value } = target;\r\n                this.setFieldValue(name, value);\r\n                this.validate(validator);\r\n                this.showErrors();\r\n            });\r\n            input === null || input === void 0 ? void 0 : input.addEventListener('blur', () => {\r\n                this.setFieldTouched(name);\r\n                this.validate(validator);\r\n                this.showErrors();\r\n            });\r\n        });\r\n        (_a = this.form) === null || _a === void 0 ? void 0 : _a.addEventListener('submit', (e) => {\r\n            e.preventDefault();\r\n            const isValid = Object.keys(this.errors).length === 0;\r\n            if (isValid) {\r\n                this.submit(onSubmit, exclude);\r\n            }\r\n            else {\r\n                this.showErrors(true);\r\n            }\r\n        });\r\n        this.validate(validator);\r\n        this.touched = [];\r\n    }\r\n    setFieldValue(name, value) {\r\n        this.formData.set(name, value);\r\n    }\r\n    setFieldTouched(name) {\r\n        this.touched.push(name);\r\n    }\r\n    showErrors(necessarily = false) {\r\n        this.formData.forEach((_, name) => {\r\n            var _a;\r\n            const input = (_a = this.form) === null || _a === void 0 ? void 0 : _a.querySelector(`[name=\"${name}\"`);\r\n            const parent = input === null || input === void 0 ? void 0 : input.parentElement;\r\n            const errorElement = (parent === null || parent === void 0 ? void 0 : parent.querySelector(`.${this._ERROR_CLASSNAME}`)) || document.createElement('div');\r\n            errorElement.textContent = '';\r\n            input === null || input === void 0 ? void 0 : input.classList.remove(`${this._INPUT_ERROR_CLASSNAME}`);\r\n            const isTouched = this.touched.includes(name) || necessarily;\r\n            const error = this.errors[name];\r\n            if (isTouched && error) {\r\n                input === null || input === void 0 ? void 0 : input.classList.add(`${this._INPUT_ERROR_CLASSNAME}`);\r\n                errorElement.textContent = error;\r\n                if (errorElement.parentElement === null) {\r\n                    errorElement.classList.add(this._ERROR_CLASSNAME);\r\n                    parent === null || parent === void 0 ? void 0 : parent.appendChild(errorElement);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    validate(validator) {\r\n        let data = {};\r\n        this.formData.forEach((value, name) => {\r\n            data = Object.assign(Object.assign({}, data), { [name]: value });\r\n        });\r\n        this.errors = cleanObject(Object\r\n            .entries(validator)\r\n            .reduce((prev, [name, validate]) => (Object.assign(Object.assign({}, prev), { [name]: validate(data) })), {}));\r\n    }\r\n    submit(onSubmit, exclude) {\r\n        if (exclude !== undefined) {\r\n            if (typeof exclude === 'string') {\r\n                this.formData.delete(exclude);\r\n            }\r\n            else if (Array.isArray(exclude)) {\r\n                exclude.forEach((item) => {\r\n                    this.formData.delete(item);\r\n                });\r\n            }\r\n        }\r\n        let data = {};\r\n        this.formData.forEach((value, key) => {\r\n            data[key] = value;\r\n        });\r\n        onSubmit(data);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/utils/queryStringify.ts\nconst queryStringify = (data) => {\r\n    if (data === undefined) {\r\n        return '';\r\n    }\r\n    const transform = (value, prop) => {\r\n        if (typeof value === 'object') {\r\n            if (Array.isArray(value)) {\r\n                return value.map((item, i) => transform(item, `${prop}[${i}]`)).join('&');\r\n            }\r\n            return Object\r\n                .entries(value)\r\n                .map(([p, v]) => transform(v, `${prop}[${p}]`)).join('&');\r\n        }\r\n        else {\r\n            return prop + '=' + value;\r\n        }\r\n    };\r\n    return '?' + Object\r\n        .entries(data)\r\n        .map(([prop, value]) => transform(value, prop))\r\n        .join('&');\r\n};\r\n\n// CONCATENATED MODULE: ./src/lib/HTTPTransport/types.ts\nvar HTTPMethods;\r\n(function (HTTPMethods) {\r\n    HTTPMethods[\"GET\"] = \"GET\";\r\n    HTTPMethods[\"PUT\"] = \"PUT\";\r\n    HTTPMethods[\"POST\"] = \"POST\";\r\n    HTTPMethods[\"DELETE\"] = \"DELETE\";\r\n})(HTTPMethods || (HTTPMethods = {}));\r\n\n// CONCATENATED MODULE: ./src/lib/HTTPTransport/index.ts\n\r\n\r\nclass HTTPTransport {\r\n    constructor() {\r\n        this._domain = '';\r\n        this.setDomain = (domain) => {\r\n            this._domain = domain;\r\n        };\r\n        this.get = (url, options = {}) => {\r\n            const { body } = options;\r\n            const newUrl = url + queryStringify(body);\r\n            return this.request(newUrl, Object.assign(Object.assign({}, options), { method: HTTPMethods.GET }), options.timeout);\r\n        };\r\n        this.put = (url, options = {}) => {\r\n            return this.request(url, Object.assign(Object.assign({}, options), { method: HTTPMethods.PUT }), options.timeout);\r\n        };\r\n        this.post = (url, options = {}) => {\r\n            return this.request(url, Object.assign(Object.assign({}, options), { method: HTTPMethods.POST }), options.timeout);\r\n        };\r\n        this.delete = (url, options = {}) => {\r\n            return this.request(url, Object.assign(Object.assign({}, options), { method: HTTPMethods.DELETE }), options.timeout);\r\n        };\r\n        this.request = (url, options, timeout = 5000) => {\r\n            const { method, body, headers = {} } = options;\r\n            return new Promise((resolve, reject) => {\r\n                const xhr = new XMLHttpRequest();\r\n                xhr.open(method, this._domain + url);\r\n                xhr.onload = function () {\r\n                    resolve(xhr.response);\r\n                };\r\n                xhr.onabort = reject;\r\n                xhr.onerror = reject;\r\n                xhr.ontimeout = reject;\r\n                xhr.timeout = timeout;\r\n                Object.entries(headers).forEach(([key, value]) => {\r\n                    xhr.setRequestHeader(key, value);\r\n                });\r\n                if (method === HTTPMethods.GET || !body) {\r\n                    xhr.send();\r\n                }\r\n                else {\r\n                    xhr.send(JSON.stringify(body));\r\n                }\r\n            });\r\n        };\r\n    }\r\n}\r\nconst httpTransport = new HTTPTransport();\r\n\n// CONCATENATED MODULE: ./src/lib/DTOModel/index.ts\n// на рабочих проектах у меня много различных запросов,\r\n// поэтому мы используем примерно такие dto'шки\r\n// мне они очень нравятся, поэтому решил затащить их в этот проект\r\n// хотя в принципе тут, наверное, они особо и не нужны\r\n// потому что здесь обычно к \"ручкам\" только по одному протоколу запросы идут\r\n// интересно твое мнение в целом о таких классах,\r\n// мб еще какие-то способы есть интересные?\r\n\r\nclass DTOModel {\r\n    constructor(_name) {\r\n        this._name = _name;\r\n        this.find = (body) => {\r\n            return httpTransport.get(this._name, { body });\r\n        };\r\n        this.update = (body) => {\r\n            return httpTransport.put(this._name, { body });\r\n        };\r\n        this.delete = (body) => {\r\n            return httpTransport.delete(this._name, { body });\r\n        };\r\n        this.create = (body) => {\r\n            return httpTransport.post(this._name, { body });\r\n        };\r\n        this.get = (id) => {\r\n            return new DTOModel(`${this._name}/${id}`);\r\n        };\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/api/profileDTO.ts\n\r\nconst profileDTO = new DTOModel('/user/profile');\r\n\n// CONCATENATED MODULE: ./src/api/profileAvatarDTO.ts\n\r\nconst profileAvatarDTO = new DTOModel('/user/profile/avatar');\r\n\n// CONCATENATED MODULE: ./src/api/profilePasswordDTO.ts\n\r\nconst profilePasswordDTO = new DTOModel('/user/password');\r\n\n// CONCATENATED MODULE: ./src/components/ProfileForm/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass ProfileForm extends Component {\r\n    constructor() {\r\n        super({});\r\n        this.onSubmit = ({ first_name, second_name, display_name, login, email, phone, avatar, oldPassword, newPassword }) => {\r\n            const profile = {\r\n                first_name,\r\n                second_name,\r\n                display_name,\r\n                login,\r\n                email,\r\n                phone\r\n            };\r\n            profileDTO.create(profile);\r\n            if (avatar && Object.keys(avatar).length !== 0) {\r\n                profileAvatarDTO.create({ avatar });\r\n            }\r\n            profilePasswordDTO.create({\r\n                oldPassword,\r\n                newPassword,\r\n            });\r\n        };\r\n        this.validator = {\r\n            email: ({ email }) => {\r\n                if (!isEmail(email)) {\r\n                    return 'Укажите валидный email';\r\n                }\r\n            },\r\n            newPassword: ({ newPassword }) => {\r\n                if (isShortPassword(newPassword)) {\r\n                    return 'Максимальная длина пароля - 8 символов';\r\n                }\r\n            },\r\n            phone: ({ phone }) => {\r\n                if (!isPhone(phone)) {\r\n                    return 'Укажите телефон в формате +7 XXX XXX XXXX';\r\n                }\r\n            },\r\n            repeatNewPassword: ({ newPassword, repeatNewPassword }) => {\r\n                if (newPassword !== repeatNewPassword) {\r\n                    return 'Пароли не совпадают';\r\n                }\r\n            },\r\n        };\r\n        this.content = [];\r\n        if (this.element instanceof HTMLElement) {\r\n            new Form({\r\n                onSubmit: this.onSubmit,\r\n                validator: this.validator,\r\n                wrapper: this.element,\r\n            });\r\n        }\r\n    }\r\n    prerender() {\r\n        const firstName = new ProfileRow({\r\n            name: 'first_name',\r\n            title: 'Имя',\r\n            type: 'text',\r\n            value: 'Вася',\r\n            writable: true,\r\n        });\r\n        const secondName = new ProfileRow({\r\n            name: 'second_name',\r\n            title: 'Фамилия',\r\n            type: 'text',\r\n            value: 'Васин',\r\n            writable: true,\r\n        });\r\n        const displayName = new ProfileRow({\r\n            name: 'display_name',\r\n            title: 'Отображаемое имя',\r\n            type: 'text',\r\n            value: 'Васян',\r\n            writable: true,\r\n        });\r\n        const login = new ProfileRow({\r\n            name: 'login',\r\n            title: 'Логин',\r\n            type: 'text',\r\n            value: 'username',\r\n            writable: true,\r\n        });\r\n        const email = new ProfileRow({\r\n            name: 'email',\r\n            title: 'Почта',\r\n            type: 'email',\r\n            value: 'pochta@yandex.ru',\r\n            writable: true,\r\n        });\r\n        const phone = new ProfileRow({\r\n            name: 'phone',\r\n            title: 'Телефон',\r\n            type: 'tel',\r\n            value: '+7 903 123 4567',\r\n            writable: true,\r\n        });\r\n        const oldPassword = new ProfileRow({\r\n            name: 'oldPassword',\r\n            title: 'Текущий пароль',\r\n            type: 'password',\r\n            value: 'password',\r\n            writable: true,\r\n        });\r\n        const newPassword = new ProfileRow({\r\n            name: 'newPassword',\r\n            title: 'Новый пароль',\r\n            type: 'password',\r\n            value: 'password',\r\n            writable: true,\r\n        });\r\n        const repeatNewPassword = new ProfileRow({\r\n            name: 'repeatNewPassword',\r\n            title: 'Новый пароль (еще раз)',\r\n            type: 'password',\r\n            value: 'зфыыцщкв',\r\n            writable: true,\r\n        });\r\n        const avatar = new ProfileRow({\r\n            name: 'avatar',\r\n            title: 'Загрузить аватар',\r\n            type: 'file',\r\n            value: '',\r\n            writable: true,\r\n        });\r\n        this.content = [\r\n            firstName,\r\n            secondName,\r\n            displayName,\r\n            login,\r\n            email,\r\n            phone,\r\n            oldPassword,\r\n            newPassword,\r\n            repeatNewPassword,\r\n            avatar,\r\n        ];\r\n    }\r\n    render() {\r\n        return templator.compile(ProfileForm_template_template, {\r\n            content: this.content,\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/pages/edit-profile.ts\n\r\n\r\nconst editProfile = new Profile({\r\n    avatarSrc: '/assets/avatar.jpg',\r\n    content: new ProfileForm(),\r\n    displayName: 'Васян',\r\n    long: true,\r\n    pageTitle: 'Редактирование профиля'\r\n});\r\n\n// CONCATENATED MODULE: ./src/components/LoginForm/template.ts\nconst LoginForm_template_template = `\n    <main class=\"wrapper-center\">\n        <form class=\"login-form {{ className }}\">\n            <h1 class=\"login-form__title\">{{ pageTitle }}</h1>\n            {{ content }}\n            <button class=\"login-form__submit\" type=\"submit\">{{ buttonLabel }}</button>\n            <a href=\"{{ linkHref }}\" class=\"login-form__link\">{{ linkLabel }}</a>\n        </form>\n    </main>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/LoginForm/index.ts\n\r\n\r\n\r\n\r\nclass LoginForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        if (this.element instanceof HTMLElement) {\r\n            const { excludeOnSubmit: exclude, onSubmit, validator, } = this.props;\r\n            new Form({\r\n                exclude,\r\n                onSubmit,\r\n                validator,\r\n                wrapper: this.element,\r\n            });\r\n        }\r\n    }\r\n    render() {\r\n        const { buttonLabel, content, linkHref, linkLabel, long, pageTitle, } = this.props;\r\n        return templator.compile(LoginForm_template_template, {\r\n            buttonLabel,\r\n            className: long ? 'login-form_long' : '',\r\n            content,\r\n            linkHref,\r\n            linkLabel,\r\n            long,\r\n            pageTitle,\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/LoginFormRow/template.ts\nconst LoginFormRow_template_template = `\n    <label class=\"login-form__row\">\n        <input type=\"{{ type }}\" class=\"login-form__input\" value=\"{{ value }}\" name=\"{{ name }}\" />\n        <span class=\"login-form__label\">{{ label }}</span>\n        <span class=\"login-form__error\"></span>\n    </label>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/LoginFormRow/index.ts\n\r\n\r\n\r\nclass LoginFormRow extends Component {\r\n    render() {\r\n        return templator.compile(LoginFormRow_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/api/signInDTO.ts\n\r\nconst signInDTO = new DTOModel('/auth/signin');\r\n\n// CONCATENATED MODULE: ./src/pages/login.ts\n\r\n\r\n\r\n\r\nconst loginElement = new LoginFormRow({\r\n    label: 'Логин',\r\n    name: 'login',\r\n    type: 'text',\r\n    value: 'username',\r\n});\r\nconst passwordElement = new LoginFormRow({\r\n    label: 'Пароль',\r\n    name: 'password',\r\n    type: 'password',\r\n    value: 'password',\r\n});\r\nconst login = new LoginForm({\r\n    buttonLabel: 'Авторизоваться',\r\n    content: [\r\n        loginElement,\r\n        passwordElement,\r\n    ],\r\n    linkHref: '/registration',\r\n    linkLabel: 'Нет аккаунта?',\r\n    onSubmit: (values) => {\r\n        signInDTO.create(values);\r\n    },\r\n    pageTitle: 'Вход',\r\n    validator: {\r\n        login: ({ login }) => {\r\n            if (login === '') {\r\n                return 'Обязательное поле';\r\n            }\r\n        },\r\n        password: ({ password }) => {\r\n            if (isShortPassword(password)) {\r\n                return 'Минимальная длина пароля - 8 символов';\r\n            }\r\n        }\r\n    }\r\n});\r\n\n// CONCATENATED MODULE: ./src/components/ProfileSection/template.ts\nconst ProfileSection_template_template = `\n    <div class=\"profile-section\">\n        {{ content }}\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ProfileSection/index.ts\n\r\n\r\n\r\nclass ProfileSection extends Component {\r\n    render() {\r\n        return templator.compile(ProfileSection_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ProfileViewFooter/template.ts\nconst ProfileViewFooter_template_template = `\n    <div class=\"profile-section\">\n        <div class=\"profile__row profile-row\">\n            <a href=\"/edit-profile\" class=\"profile-row__link\">Изменить данные</a>\n        </div>\n        <div class=\"profile__row profile-row\">\n            <button class=\"profile-row__logout\" type=\"button\" onClick=\"{{ onClick }}\">Выйти</button>\n        </div>\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ProfileViewFooter/index.ts\n\r\n\r\n\r\n\r\nclass ProfileViewFooter extends Component {\r\n    render() {\r\n        return templator.compile(ProfileViewFooter_template_template, {\r\n            onClick: () => {\r\n                httpTransport.post('/auth/logout');\r\n            },\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/pages/profile.ts\n\r\n\r\n\r\n\r\nconst profile = new Profile({\r\n    avatarSrc: '/assets/avatar.jpg',\r\n    content: [\r\n        new ProfileSection({\r\n            content: [\r\n                new ProfileRow({\r\n                    title: 'Имя',\r\n                    value: 'Вася',\r\n                }),\r\n                new ProfileRow({\r\n                    title: 'Фамилия',\r\n                    value: 'Васин',\r\n                }),\r\n                new ProfileRow({\r\n                    title: 'Отображаемое имя',\r\n                    value: 'Васян',\r\n                }),\r\n                new ProfileRow({\r\n                    title: 'Логин',\r\n                    value: 'username',\r\n                }),\r\n                new ProfileRow({\r\n                    title: 'Почта',\r\n                    value: 'pochta@yandex.ru',\r\n                }),\r\n                new ProfileRow({\r\n                    title: 'Телефон',\r\n                    value: '+7 903 123 4567',\r\n                }),\r\n            ],\r\n        }),\r\n        new ProfileViewFooter(),\r\n    ],\r\n    displayName: 'Васян',\r\n    pageTitle: 'Профиль'\r\n});\r\n\n// CONCATENATED MODULE: ./src/api/signUpDTO.ts\n\r\nconst signUpDTO = new DTOModel('/auth/signup');\r\n\n// CONCATENATED MODULE: ./src/pages/registration.ts\n\r\n\r\n\r\n\r\n\r\n\r\nconst firstName = new LoginFormRow({\r\n    label: 'Имя',\r\n    name: 'first_name',\r\n    type: 'text',\r\n    value: 'Вася',\r\n});\r\nconst secondName = new LoginFormRow({\r\n    label: 'Фамилия',\r\n    name: 'second_name',\r\n    type: 'text',\r\n    value: 'Васин',\r\n});\r\nconst registration_login = new LoginFormRow({\r\n    label: 'Логин',\r\n    name: 'login',\r\n    type: 'text',\r\n    value: 'username',\r\n});\r\nconst email = new LoginFormRow({\r\n    label: 'Почта',\r\n    name: 'email',\r\n    type: 'email',\r\n    value: 'pochta@yandex.ru',\r\n});\r\nconst phone = new LoginFormRow({\r\n    label: 'Телефон',\r\n    name: 'phone',\r\n    type: 'tel',\r\n    value: '+7 903 123 4567',\r\n});\r\nconst registration_password = new LoginFormRow({\r\n    label: 'Пароль',\r\n    name: 'password',\r\n    type: 'password',\r\n    value: 'password',\r\n});\r\nconst repeatPassword = new LoginFormRow({\r\n    label: 'Пароль (еще раз)',\r\n    name: 'repeat_password',\r\n    type: 'password',\r\n    value: 'зфыыцокв',\r\n});\r\nconst registration = new LoginForm({\r\n    buttonLabel: 'Зарегистрироваться',\r\n    content: [\r\n        firstName,\r\n        secondName,\r\n        registration_login,\r\n        email,\r\n        phone,\r\n        registration_password,\r\n        repeatPassword,\r\n    ],\r\n    excludeOnSubmit: 'repeat_password',\r\n    linkHref: '/login',\r\n    linkLabel: 'Войти',\r\n    long: true,\r\n    onSubmit: (values) => {\r\n        signUpDTO.create(values);\r\n    },\r\n    pageTitle: 'Регистрация',\r\n    validator: {\r\n        email: ({ email }) => {\r\n            if (!isEmail(email)) {\r\n                return 'Укажите валидный email';\r\n            }\r\n        },\r\n        password: ({ password }) => {\r\n            if (isShortPassword(password)) {\r\n                return 'Максимальная длина пароля - 8 символов';\r\n            }\r\n        },\r\n        phone: ({ phone }) => {\r\n            if (!isPhone(phone)) {\r\n                return 'Укажите телефон в формате +7 XXX XXX XXXX';\r\n            }\r\n        },\r\n        repeat_password: ({ password, repeat_password: repeatPassword }) => {\r\n            if (password !== repeatPassword) {\r\n                return 'Пароли не совпадают';\r\n            }\r\n        },\r\n    }\r\n});\r\n\n// CONCATENATED MODULE: ./src/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst router = new Router('#root');\r\nrouter\r\n    .use('/', chats, 'Выберите чат')\r\n    .use('/500', error500, 'Ошибка 500')\r\n    .use('/chat', chat, 'Чат')\r\n    .use('/edit-profile', editProfile, 'Редактирование профиля')\r\n    .use('/login', login, 'Вход')\r\n    .use('/profile', profile, 'Профиль')\r\n    .use('/registration', registration, 'Регистрация')\r\n    .useFallback('/404', error404, 'Ошибка 404')\r\n    .start();\r\nhttpTransport.setDomain('https://ya-praktikum.tech/api/v2');\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///557\n")})();