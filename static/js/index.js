(()=>{"use strict";eval("\n// CONCATENATED MODULE: ./src/utils/render.ts\nconst render = (selector, component) => {\r\n    const root = document.querySelector(selector);\r\n    const element = component.getContent();\r\n    if (root !== null && element !== null) {\r\n        root === null || root === void 0 ? void 0 : root.appendChild(element);\r\n    }\r\n    return root;\r\n};\r\n\n// CONCATENATED MODULE: ./src/lib/Router/Route.ts\n\r\nclass Route {\r\n    constructor(_pathname, _block, _title, _selector) {\r\n        this._pathname = _pathname;\r\n        this._block = _block;\r\n        this._title = _title;\r\n        this._selector = _selector;\r\n    }\r\n    leave() {\r\n        if (this._block !== null && this._block.element instanceof HTMLElement) {\r\n            this._block.element.remove();\r\n        }\r\n    }\r\n    isEqual(a, b) {\r\n        return a === b;\r\n    }\r\n    match(pathname) {\r\n        return this.isEqual(pathname, this._pathname);\r\n    }\r\n    render() {\r\n        document.title = this._title;\r\n        render(this._selector, this._block);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/lib/Router/index.ts\n\r\nclass Router {\r\n    constructor(_selector) {\r\n        this._selector = _selector;\r\n        this.routes = [];\r\n        this.history = window.history;\r\n        this._currentRoute = null;\r\n        if (Router.__instance) {\r\n            return Router.__instance;\r\n        }\r\n        Router.__instance = this;\r\n    }\r\n    use(pathname, block, title) {\r\n        const route = new Route(pathname, block, title, this._selector);\r\n        this.routes.push(route);\r\n        return this;\r\n    }\r\n    start() {\r\n        window.onpopstate = ((event) => {\r\n            this._onRoute(event.currentTarget.location.pathname);\r\n        });\r\n        this._onRoute(window.location.pathname);\r\n    }\r\n    _onRoute(pathname) {\r\n        const route = this.getRoute(pathname);\r\n        if (this._currentRoute) {\r\n            this._currentRoute.leave();\r\n        }\r\n        this._currentRoute = route || null;\r\n        if (this._currentRoute !== null) {\r\n            this._currentRoute.render();\r\n        }\r\n    }\r\n    go(pathname) {\r\n        this.history.pushState({}, '', pathname);\r\n        this._onRoute(pathname);\r\n    }\r\n    back() {\r\n        this.history.back();\r\n    }\r\n    forward() {\r\n        this.history.forward();\r\n    }\r\n    getRoute(pathname) {\r\n        return this.routes.find(route => route.match(pathname));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/lib/EventBus/index.ts\nclass EventBus {\r\n    constructor() {\r\n        this.listeners = {};\r\n    }\r\n    on(event, callback) {\r\n        if (!this.listeners[event]) {\r\n            this.listeners[event] = [];\r\n        }\r\n        this.listeners[event].push(callback);\r\n    }\r\n    off(event, callback) {\r\n        if (!this.listeners[event]) {\r\n            throw new Error(`Нет события: ${event}`);\r\n        }\r\n        this.listeners[event] = this.listeners[event].filter(listener => listener !== callback);\r\n    }\r\n    emit(event, ...args) {\r\n        if (!this.listeners[event]) {\r\n            throw new Error(`Нет события: ${event}`);\r\n        }\r\n        this.listeners[event].forEach(function (listener) {\r\n            listener(...args);\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/lib/Component/index.ts\n\r\nclass Component {\r\n    constructor(props = {}) {\r\n        this._element = null;\r\n        this._mounted = false;\r\n        this.setProps = (nextProps) => {\r\n            if (!nextProps) {\r\n                return;\r\n            }\r\n            Object.assign(this.props, nextProps);\r\n        };\r\n        const eventBus = new EventBus();\r\n        this.props = this._makePropsProxy(props);\r\n        this.eventBus = () => eventBus;\r\n        this._registerEvents(eventBus);\r\n        eventBus.emit(Component.EVENTS.INIT);\r\n    }\r\n    _registerEvents(eventBus) {\r\n        eventBus.on(Component.EVENTS.INIT, this.init.bind(this));\r\n        eventBus.on(Component.EVENTS.FLOW_CDM, this._componentDidMount.bind(this));\r\n        eventBus.on(Component.EVENTS.FLOW_RENDER, this._render.bind(this));\r\n        eventBus.on(Component.EVENTS.FLOW_SCDU, this._shouldComponentDidUpdate.bind(this));\r\n        eventBus.on(Component.EVENTS.FLOW_CDU, this._componentDidUpdate.bind(this));\r\n    }\r\n    init() {\r\n        this._prerender();\r\n        this._render();\r\n    }\r\n    _componentDidMount() {\r\n        this.componentDidMount();\r\n    }\r\n    componentDidMount() { }\r\n    _shouldComponentDidUpdate(oldProps, newProps) {\r\n        const response = this.shouldComponentUpdate(oldProps, newProps);\r\n        if (response) {\r\n            this.eventBus().emit(Component.EVENTS.FLOW_RENDER);\r\n        }\r\n    }\r\n    shouldComponentUpdate(oldProps, newProps) {\r\n        return oldProps !== newProps;\r\n    }\r\n    _componentDidUpdate() {\r\n        this.componentDidUpdate();\r\n    }\r\n    componentDidUpdate() {\r\n    }\r\n    _render() {\r\n        const result = this.render();\r\n        if (!this._mounted || this._element === null || result === null) {\r\n            this._element = result;\r\n        }\r\n        else {\r\n            if (this._element instanceof HTMLElement) {\r\n                this._element.replaceWith(result);\r\n                this._element = result;\r\n            }\r\n        }\r\n        if (!this._mounted) {\r\n            this.eventBus().emit(Component.EVENTS.FLOW_CDM);\r\n            this._mounted = true;\r\n        }\r\n        else {\r\n            this.eventBus().emit(Component.EVENTS.FLOW_CDU);\r\n        }\r\n    }\r\n    render() {\r\n        return null;\r\n    }\r\n    get element() {\r\n        return this._element;\r\n    }\r\n    getContent() {\r\n        return this.element;\r\n    }\r\n    _makePropsProxy(props) {\r\n        return new Proxy(props, {\r\n            set: (target, prop, value) => {\r\n                const oldProps = Object.assign({}, this.props);\r\n                target[prop] = value;\r\n                this.eventBus().emit(Component.EVENTS.FLOW_SCDU, oldProps, target);\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n    show(propertyValue = 'block') {\r\n        if (this._element instanceof HTMLElement && this._element.style.display === 'none') {\r\n            this._element.style.display = propertyValue;\r\n            this.eventBus().emit(Component.EVENTS.FLOW_CDU);\r\n        }\r\n    }\r\n    hide() {\r\n        if (this._element instanceof HTMLElement && this._element.style.display !== 'none') {\r\n            this._element.style.display = 'none';\r\n            this.eventBus().emit(Component.EVENTS.FLOW_CDU);\r\n        }\r\n    }\r\n    visibilityToggle(propertyValue = 'block') {\r\n        if (this._element instanceof HTMLElement) {\r\n            if (this._element.style.display === 'none') {\r\n                this.show(propertyValue);\r\n            }\r\n            else {\r\n                this.hide();\r\n            }\r\n        }\r\n    }\r\n    forceUpdate() {\r\n        this.eventBus().emit(Component.EVENTS.FLOW_RENDER);\r\n    }\r\n    _prerender() {\r\n        this.prerender();\r\n    }\r\n    prerender() {\r\n    }\r\n}\r\nComponent.EVENTS = {\r\n    INIT: \"init\",\r\n    FLOW_CDM: \"flow:component-did-mount\",\r\n    FLOW_RENDER: \"flow:render\",\r\n    FLOW_SCDU: \"flow:should-component-did-update\",\r\n    FLOW_CDU: \"flow:component-did-update\",\r\n};\r\n\n// CONCATENATED MODULE: ./src/lib/Templator/index.ts\n\r\nclass Templator {\r\n    constructor() {\r\n        this._allowed = null;\r\n        this.EVENTS = {\r\n            onChange: 'input',\r\n            onClick: 'click',\r\n            onSubmit: 'submit',\r\n        };\r\n        this.SVG_TAGS = ['svg', 'circle', 'path', 'stroke', 'rect', 'line'];\r\n    }\r\n    _setAttributes(node, attrs, ctx) {\r\n        const regexp = /(?<prop>[a-zA-Z0-9-]+)(=\"(?<value>.*?)\")?/;\r\n        attrs.forEach(attr => {\r\n            var _a;\r\n            const { prop, value = '' } = (_a = attr.match(regexp)) === null || _a === void 0 ? void 0 : _a.groups;\r\n            let val = value;\r\n            const match = value === null || value === void 0 ? void 0 : value.match(/{{ (\\w+) }}/);\r\n            if (match !== null && match !== undefined && match[1] !== undefined) {\r\n                if (typeof ctx[match[1]] === 'function') {\r\n                    val = ctx[match[1]];\r\n                }\r\n                else {\r\n                    const re = new RegExp(`{{ ${match[1]} }}`);\r\n                    val = val === null || val === void 0 ? void 0 : val.replace(re, ctx[match[1]] || '');\r\n                }\r\n            }\r\n            if (typeof val === 'function' && prop in this.EVENTS) {\r\n                node.addEventListener(this.EVENTS[prop], val);\r\n            }\r\n            else if (prop === 'class' && val !== undefined && node instanceof HTMLElement) {\r\n                node.className = String(val);\r\n            }\r\n            else if (value === undefined) {\r\n                node.setAttribute(prop, \"true\");\r\n            }\r\n            else {\r\n                node.setAttribute(prop, String(val));\r\n            }\r\n        });\r\n    }\r\n    _createNode(element, ctx) {\r\n        if (typeof element === 'string') {\r\n            let newItem = element;\r\n            const vars = (element\r\n                .match(/{{ (\\w+) }}/g) || [])\r\n                .reduce((prev, current) => prev.includes(current) ? prev : [...prev, current.replace(/({)|(})|( )/g, '')], []);\r\n            const fragment = document.createDocumentFragment();\r\n            for (const v of vars) {\r\n                const regexp = new RegExp(`{{ ${v} }}`, 'g');\r\n                if (this._allowed !== null) {\r\n                    if (ctx[v] instanceof this._allowed) {\r\n                        const item = ctx[v].getContent();\r\n                        if (item !== null) {\r\n                            fragment.appendChild(item);\r\n                        }\r\n                    }\r\n                    if (Array.isArray(ctx[v])) {\r\n                        ctx[v].forEach(el => {\r\n                            const item = el.getContent();\r\n                            if (item !== null) {\r\n                                fragment.appendChild(item);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                newItem = newItem.replace(regexp, ctx[v] || '');\r\n            }\r\n            if (Array.from(fragment.children).length > 0) {\r\n                return fragment;\r\n            }\r\n            return document.createTextNode(newItem);\r\n        }\r\n        const { children, fullTag, tag } = element;\r\n        if (tag === '<>') {\r\n            const fragment = document.createDocumentFragment();\r\n            children.forEach(ch => {\r\n                fragment.appendChild(this._createNode(ch, ctx));\r\n            });\r\n            return fragment;\r\n        }\r\n        const wrapper = !this.SVG_TAGS.includes(tag) ? document.createElement(tag) : document.createElementNS('http://www.w3.org/2000/svg', tag);\r\n        const attrs = fullTag.match(/([a-zA-Z0-9-]+)=\"(.*?)\"/g);\r\n        if (attrs !== null) {\r\n            this._setAttributes(wrapper, attrs, ctx);\r\n        }\r\n        children.forEach((child) => {\r\n            wrapper.appendChild(this._createNode(child, ctx));\r\n        });\r\n        return wrapper;\r\n    }\r\n    _createTree(elements) {\r\n        const isTag = (str) => /<([a-zA-Z]+.*?)|(\\/[a-zA-Z]+)>/ig.test(str);\r\n        const parseFullTag = (str) => str.replace(/(<)|(( .*?)?\\/?>)/g, '');\r\n        const isSelfClosedTag = (str) => /<[a-zA-Z]+.*?\\/>/ig.test(str);\r\n        const firstElement = elements.shift();\r\n        if (isTag(firstElement)) {\r\n            const tag = parseFullTag(firstElement);\r\n            const children = [];\r\n            const end = `</${tag}>`;\r\n            if (!isSelfClosedTag(firstElement)) {\r\n                while (elements.length !== 0 && elements[0] !== end) {\r\n                    children.push(this._createTree(elements));\r\n                }\r\n                elements.shift();\r\n            }\r\n            return { tag, fullTag: firstElement, children };\r\n        }\r\n        else if (firstElement === '<>') {\r\n            const children = [];\r\n            while (elements[0] !== '</>') {\r\n                children.push(this._createTree(elements));\r\n            }\r\n            return { tag: firstElement, fullTag: firstElement, children };\r\n        }\r\n        else {\r\n            return firstElement;\r\n        }\r\n    }\r\n    _parseTemplate(str) {\r\n        const row = str.replace(/([\\r\\n]+)/g, '').replace(/ {2,}/g, '');\r\n        const elements = row.match(/(<.*?>)|([^<]+)/ig);\r\n        return elements.filter(item => item !== '');\r\n    }\r\n    compile(str, ctx = {}) {\r\n        // получим массив тегов и текстовых нод\r\n        const elements = this._parseTemplate(str);\r\n        // преобразуем этот массив в дерево\r\n        const tree = this._createTree(elements);\r\n        // выводим элементы дерева\r\n        return this._createNode(tree, ctx);\r\n    }\r\n}\r\nclass ComponentTemplator extends Templator {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._allowed = Component;\r\n    }\r\n}\r\nconst templator = new ComponentTemplator();\r\n\n// CONCATENATED MODULE: ./src/components/Error/template.ts\nconst template = `\n        <main class=\"wrapper-center\">\n        <h1 class=\"visually-hidden\">Ошибка</h1>\n        <div class=\"error\">\n            <div class=\"error__title\">{{ code }}</div>\n            <div class=\"error__description\">Мы уже фиксим</div>\n            <a href=\"/\" class=\"error__link\">Назад к чатам</a>\n        </div>\n    </main>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/Error/index.ts\n\r\n\r\n\r\nclass Err extends Component {\r\n    render() {\r\n        return templator.compile(template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/pages/404.ts\n\r\nconst error404 = new Err({\r\n    code: 404,\r\n});\r\n\n// CONCATENATED MODULE: ./src/pages/500.ts\n\r\nconst error500 = new Err({\r\n    code: 500,\r\n});\r\n\n// CONCATENATED MODULE: ./src/components/Chat/template.ts\nconst template_template = `\n    <main class=\"chat\">\n        {{ chatHeader }}\n        {{ messages }}\n        {{ messageForm }}\n        {{ deleteModal }}\n    </main>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/Chat/index.ts\n\r\n\r\n\r\nclass Chat extends Component {\r\n    render() {\r\n        return templator.compile(template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ChatActionsButton/template.ts\nconst ChatActionsButton_template_template = `\n    <button class=\"{{ className }}\" type=\"button\" title=\"{{ title }}\" onClick=\"{{ onClick }}\">\n        {{ icon }}\n    </button>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ChatActionsButton/index.ts\n\r\n\r\n\r\nclass ChatActionsButton extends Component {\r\n    render() {\r\n        return templator.compile(ChatActionsButton_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ChatActions/template.ts\nconst ChatActions_template_template = `\n    <div class=\"chat-actions\">\n        {{ buttons }}\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ChatActions/index.ts\n\r\n\r\n\r\nclass ChatActions extends Component {\r\n    render() {\r\n        return templator.compile(ChatActions_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ChatActionsItem/template.ts\nconst ChatActionsItem_template_template = `\n    <button class=\"chat-actions__item\" type=\"button\" onClick=\"{{ onClick }}\">\n        {{ icon }}\n        <span class=\"chat-actions__item-label\">{{ label }}</span>\n    </button>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ChatActionsItem/index.ts\n\r\n\r\n\r\nclass ChatActionsItem extends Component {\r\n    render() {\r\n        return templator.compile(ChatActionsItem_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ChatActionsModal/template.ts\nconst ChatActionsModal_template_template = `\n    <div class=\"chat-modal {{ className }}\">\n        {{ content }}\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ChatActionsModal/index.ts\n\r\n\r\n\r\nclass ChatActionsModal extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closeModal = () => {\r\n            this.hide();\r\n        };\r\n    }\r\n    getXClassName(x) {\r\n        return x === 'left' ? 'chat-modal_left' : 'chat-modal_right';\r\n    }\r\n    getYClassName(y) {\r\n        return y === 'top' ? 'chat-modal_top' : 'chat-modal_bottom';\r\n    }\r\n    render() {\r\n        const { content, x, y } = this.props;\r\n        return templator.compile(ChatActionsModal_template_template, {\r\n            content,\r\n            className: `${this.getXClassName(x)} ${this.getYClassName(y)}`\r\n        });\r\n    }\r\n    componentDidMount() {\r\n        this.hide();\r\n    }\r\n    componentDidUpdate() {\r\n        const modal = this.getContent();\r\n        if (modal instanceof HTMLElement) {\r\n            setTimeout(() => {\r\n                if (modal.style.display === 'none') {\r\n                    document.removeEventListener('click', this.closeModal);\r\n                }\r\n                else {\r\n                    document.addEventListener('click', this.closeModal);\r\n                }\r\n            }, 0);\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ChatInformation/template.ts\nconst ChatInformation_template_template = `\n    <div class=\"chat-row\">\n        <img class=\"chat-header__avatar\" src=\"{{ avatarSrc }}\" alt=\"{{ avatarAlt }}\" width=\"34\" height=\"34\" />\n        <div class=\"chat-header__information\">\n            <div class=\"chat-header__title\">{{ chatName }}</div>\n            <div class=\"chat-header__status\">{{ status }}</div>\n        </div>\n        {{ chatActionsButton }}\n        {{ chatActionsModal }}\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ChatInformation/index.ts\n\r\n\r\n\r\nclass ChatInformation extends Component {\r\n    render() {\r\n        return templator.compile(ChatInformation_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ChatRenameForm/template.ts\nconst ChatRenameForm_template_template = `\n    <form class=\"chat-header-form\" onSubmit=\"{{ onSubmit }}\">\n        <input type=\"text\" class=\"chat-header-form__input\" value=\"{{ title }}\" onChange=\"{{ onChange }}\" />\n        <button type=\"submit\" class=\"chat-header-form__button\">Сохранить</button>\n    </form>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ChatRenameForm/index.ts\n\r\n\r\n\r\nclass ChatRenameForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.message = '';\r\n        this.message = this.props.title;\r\n    }\r\n    render() {\r\n        const { onSubmit, title } = this.props;\r\n        return templator.compile(ChatRenameForm_template_template, {\r\n            title,\r\n            onChange: ({ target }) => {\r\n                const { value } = target;\r\n                this.message = value;\r\n            },\r\n            onSubmit: (e) => {\r\n                e.preventDefault();\r\n                if (this.message !== '') {\r\n                    console.log(`chat_name: ${this.message}`);\r\n                    onSubmit();\r\n                }\r\n            },\r\n        });\r\n    }\r\n    componentDidMount() {\r\n        this.hide();\r\n    }\r\n    componentDidUpdate() {\r\n        var _a;\r\n        const element = this.getContent();\r\n        if (element instanceof HTMLElement && element.style.display !== 'none') {\r\n            (_a = element.querySelector('input')) === null || _a === void 0 ? void 0 : _a.select();\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ChatHeader/template.ts\nconst ChatHeader_template_template = `\n    <header class=\"chat-header\">\n        {{ chatInformation }}\n        {{ chatRenameForm }}\n    </header>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ChatHeader/index.ts\n\r\n\r\n\r\nclass ChatHeader extends Component {\r\n    render() {\r\n        return templator.compile(ChatHeader_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ChatItem/template.ts\nconst ChatItem_template_template = `\n    <li class=\"chat-item-wrapper\">\n        <div class=\"chat-item\">\n            <img class=\"chat-item__avatar\" src=\"{{ avatarSrc }}\" alt=\"{{ avatarAlt }}\" width=\"47\" height=\"47\" />\n            <h3 class=\"chat-item__title\">\n                <a href=\"{{ chatUrl }}\" class=\"chat-item__link\">{{ chatName }}</a>\n            </h3>\n            <div class=\"chat-item__message\">{{ chatMessage }}</div>\n            <div class=\"chat-item__time-wrapper\">\n                <div class=\"chat-item__time\">{{ date }}</div>\n            </div>\n            {{ newMessage }}\n        </div>\n    </li>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ChatItem/index.ts\n\r\n\r\n\r\nclass ChatItem extends Component {\r\n    render() {\r\n        return templator.compile(ChatItem_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/NewMessage/template.ts\nconst NewMessage_template_template = `\n    <div class=\"chat-item__new-message\">\n        {{ count }}\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/NewMessage/index.ts\n\r\n\r\n\r\nclass NewMessage extends Component {\r\n    render() {\r\n        return templator.compile(NewMessage_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ChatItemOutgoingMessage/template.ts\nconst ChatItemOutgoingMessage_template_template = `\n    <>\n        <span class=\"chat-item__you-label\">Вы:</span> {{ message }}\n    </>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ChatItemOutgoingMessage/index.ts\n\r\n\r\n\r\nclass CharItemOutgoingMessage extends Component {\r\n    render() {\r\n        return templator.compile(ChatItemOutgoingMessage_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/Chats/template.ts\nconst Chats_template_template = `\n    <div class=\"chats-wrapper\">\n        <h1 class=\"visually-hidden\">{{ pageTitle }}</h1>\n        <aside class=\"chats-wrapper__aside\">\n            <div class=\"link-profile-wrapper\">\n                <a href=\"/profile\" class=\"link-profile\">Профиль</a>\n            </div>\n            <div class=\"chats-search\">\n                <input type=\"search\" class=\"chats-search__input js-input-search\" placeholder=\"Поиск\" name=\"search\"  autocomplete=\"off\" onChange=\"{{ onChange }}\" />\n            </div>\n            <section class=\"chats-list\">\n                <h2 class=\"visually-hidden\">Список чатов</h2>\n                <ul class=\"chats-list__content\">\n                    {{ chatItems }}\n                </ul>\n            </section>\n        </aside>\n        {{ content }}\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/Chats/index.ts\n\r\n\r\n\r\nclass Chats extends Component {\r\n    render() {\r\n        return templator.compile(Chats_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/assets/ActionsIcon/template.ts\nconst ActionsIcon_template_template = `\n    <svg width=\"3\" height=\"16\" viewBox=\"0 0 3 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"1.5\" cy=\"2\" r=\"1.5\" fill=\"currentColor\" />\n        <circle cx=\"1.5\" cy=\"8\" r=\"1.5\" fill=\"currentColor\" />\n        <circle cx=\"1.5\" cy=\"14\" r=\"1.5\" fill=\"currentColor\" />\n    </svg>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/ActionsIcon/index.ts\n\r\n\r\n\r\nclass ActionsIcon extends Component {\r\n    render() {\r\n        return templator.compile(ActionsIcon_template_template);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/assets/RenameIcon/template.ts\nconst RenameIcon_template_template = `\n    <svg width=\"22\" height=\"19\" viewBox=\"0 0 22 19\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M0 19h22v-1.5H0z\" fill=\"currentColor\" />\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M16.26 0L19 2.74l-2.055 2.055-2.74-2.74L16.26 0zm-2.74 2.74l2.74 2.74L6.74 15H4v-2.74l9.52-9.52z\" fill=\"currentColor\" />\n    </svg>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/RenameIcon/index.ts\n\r\n\r\n\r\nclass RenameIcon extends Component {\r\n    render() {\r\n        return templator.compile(RenameIcon_template_template);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/assets/DeleteIcon/template.ts\nconst DeleteIcon_template_template = `\n    <svg width=\"22\" height=\"22\" viewBox=\"0 0 22 22\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"11\" cy=\"11\" r=\"10.25\" stroke-width=\"1.5\" stroke=\"currentColor\" />\n        <path stroke-width=\"1.5\" d=\"M7.111 7.111l7.778 7.778m-7.778 0l7.778-7.778\" stroke=\"currentColor\" />\n    </svg>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/DeleteIcon/index.ts\n\r\n\r\n\r\nclass DeleteIcon extends Component {\r\n    render() {\r\n        return templator.compile(DeleteIcon_template_template);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/Messages/template.ts\nconst Messages_template_template = `\n    <div class=\"chat__content\">\n        <h2 class=\"visually-hidden\">Список сообщений</h2>\n        <ul class=\"chat__messages\">\n            {{ messages }}\n        </ul>\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/MessageDate/template.ts\nconst MessageDate_template_template = `\n    <li class=\"messages-date\">\n        {{ date }}\n    </li>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/MessageDate/index.ts\n\r\n\r\n\r\nclass MessageDate extends Component {\r\n    render() {\r\n        return templator.compile(MessageDate_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/Message/template.ts\nconst Message_template_template = `\n    <li class=\"message {{ className }}\">\n        {{ content }}\n        <span class=\"message__time\">\n            {{ timeIcon }}\n            <time>{{ time }}</time>\n        </span>\n    </li>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/SentIcon/template.ts\nconst SentIcon_template_template = `\n    <svg width=\"8\" height=\"4\" viewBox=\"0 0 11 5\" xmlns=\"http://www.w3.org/2000/svg\">\n        <line y1=\"-0.5\" x2=\"3.765\" y2=\"-0.5\" transform=\"matrix(0.705933 0.708278 -0.705933 0.708278 0.700195 2.33301)\" stroke=\"currentColor\" />\n        <line y1=\"-0.5\" x2=\"5.6475\" y2=\"-0.5\" transform=\"matrix(0.705933 -0.708278 0.705933 0.708278 3.3584 5)\" stroke=\"currentColor\" />\n    </svg>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/SentIcon/index.ts\n\r\n\r\n\r\nclass SentIcon extends Component {\r\n    render() {\r\n        return templator.compile(SentIcon_template_template);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/assets/ReadIcon/template.ts\nconst ReadIcon_template_template = `\n    <svg width=\"8\" height=\"4\" viewBox=\"0 0 11 5\" xmlns=\"http://www.w3.org/2000/svg\">\n        <line y1=\"-0.5\" x2=\"3.765\" y2=\"-0.5\" transform=\"matrix(0.705933 0.708278 -0.705933 0.708278 0.700195 2.33301)\" stroke=\"currentColor\" />\n        <line y1=\"-0.5\" x2=\"5.6475\" y2=\"-0.5\" transform=\"matrix(0.705933 -0.708278 0.705933 0.708278 3.3584 5)\" stroke=\"currentColor\" />\n        <line y1=\"-0.5\" x2=\"5.6475\" y2=\"-0.5\" transform=\"matrix(0.705933 -0.708278 0.705933 0.708278 6.01611 5)\" stroke=\"currentColor\" />\n    </svg>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/ReadIcon/index.ts\n\r\n\r\n\r\nclass ReadIcon extends Component {\r\n    render() {\r\n        return templator.compile(ReadIcon_template_template);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/Message/index.ts\n\r\n\r\n\r\n\r\n\r\nclass Message extends Component {\r\n    getAttachClassName(attach) {\r\n        return attach ? 'message_attach' : '';\r\n    }\r\n    getStatusClassName(type, status) {\r\n        return type === 'outgoing' ? (status === 'read' ? 'message_read' : (status === 'sent' ? 'message_sent' : '')) : '';\r\n    }\r\n    getTypeClassName(type) {\r\n        return type === 'incoming' ? 'message_incoming' : (type === 'outgoing' ? 'message_outgoing' : '');\r\n    }\r\n    getTimeIcon(type, status) {\r\n        return type === 'outgoing' ? (status === 'read' ? this.readIcon : (status === 'sent' ? this.sentIcon : '')) : '';\r\n    }\r\n    prerender() {\r\n        this.sentIcon = new SentIcon();\r\n        this.readIcon = new ReadIcon();\r\n    }\r\n    render() {\r\n        const { attach, content, status, time, type, } = this.props;\r\n        return templator.compile(Message_template_template, {\r\n            className: `${this.getAttachClassName(attach)} ${this.getStatusClassName(type, status)} ${this.getTypeClassName(type)}`,\r\n            content,\r\n            time,\r\n            timeIcon: this.getTimeIcon(type, status),\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/MessageContent/template.ts\nconst MessageContent_template_template = `\n    <div class=\"message__content\">{{ text }}<span class=\"{{ timeHolderClassName }}\"></span></div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/MessageContent/index.ts\n\r\n\r\n\r\nclass MessageContent extends Component {\r\n    render() {\r\n        const { text, last } = this.props;\r\n        return templator.compile(MessageContent_template_template, {\r\n            text,\r\n            timeHolderClassName: last ? 'message__time-holder' : '',\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/MessageAttach/template.ts\nconst MessageAttach_template_template = `\n    <picture>\n        <source srcset=\"{{ srcset }}\" />\n        <img src=\"{{ src }}\" alt=\"{{ alt }}\" />\n    </picture>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/MessageAttach/index.ts\n\r\n\r\n\r\nclass MessageAttach extends Component {\r\n    render() {\r\n        return templator.compile(MessageAttach_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/Messages/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Messages extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.messages = [];\r\n    }\r\n    prerender() {\r\n        this.messages = [\r\n            new MessageDate({ date: '19 июня' }),\r\n            new Message({\r\n                content: [\r\n                    new MessageContent({\r\n                        text: 'Привет! Смотри, тут всплыл интересный кусок лунной космической истории — НАСА в какой-то момент попросила Хассельблад адаптировать модель SWC для полетов на Луну. Сейчас мы все знаем что астронавты летали с моделью 500 EL — и к слову говоря, все тушки этих камер все еще находятся на поверхности Луны, так как астронавты с собой забрали только кассеты с пленкой.',\r\n                    }),\r\n                    new MessageContent({\r\n                        last: true,\r\n                        text: 'Хассельблад в итоге адаптировал SWC для космоса, но что-то пошло не так и на ракету они так никогда и не попали. Всего их было произведено 25 штук, одну из них недавно продали на аукционе за 45000 евро.',\r\n                    }),\r\n                ],\r\n                time: '11:56',\r\n                type: 'incoming',\r\n            }),\r\n            new Message({\r\n                attach: true,\r\n                content: [\r\n                    new MessageAttach({\r\n                        alt: 'photo.jpg',\r\n                        src: '/assets/photo.jpg',\r\n                        srcset: '/assets/photo.webp',\r\n                    })\r\n                ],\r\n                time: '11:56',\r\n                type: 'incoming',\r\n            }),\r\n            new Message({\r\n                content: [\r\n                    new MessageContent({\r\n                        last: true,\r\n                        text: 'Круто!',\r\n                    }),\r\n                ],\r\n                status: 'read',\r\n                time: '12:00',\r\n                type: 'outgoing',\r\n            }),\r\n        ];\r\n    }\r\n    render() {\r\n        return templator.compile(Messages_template_template, { messages: this.messages });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/MessageForm/template.ts\nconst MessageForm_template_template = `\n    <form class=\"message-form\" onSubmit=\"{{ onSubmit }}\">\n        <div class=\"chat-row\">\n            {{ buttonAttach }}\n            {{ attachModal }}\n            <input type=\"text\" class=\"message-form__input\" placeholder=\"Сообщение\" name=\"message\" autocomplete=\"off\" onChange=\"{{ onChange }}\" />\n            <button type=\"submit\" class=\"message-form__submit\" title=\"Отправить сообщение\">\n                <svg width=\"13\" height=\"12\" viewBox=\"0 0 13 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect y=\"5.2002\" width=\"11\" height=\"1.6\" fill=\"currentColor\" />\n                    <path d=\"M7 1L11 6L7 11\" stroke-width=\"1.6\" stroke=\"currentColor\" />\n                </svg>\n            </button>            \n        </div>\n    </form>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/AttachIcon/template.ts\nconst AttachIcon_template_template = `\n    <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M7.187 13.5l7.576-7.576.943.943-7.577 7.576-.942-.943zM9.7 16.014l7.577-7.576.943.943-7.576 7.576-.943-.943zm5.343 5.343l7.577-7.577.942.943-7.576 7.576-.943-.942zm2.514 2.513l7.576-7.576.943.943-7.576 7.576-.943-.942z\" fill=\"currentColor\" />\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M17.557 23.87c-2.615 2.616-6.845 2.625-9.449.022-2.603-2.604-2.594-6.834.021-9.45l-.942-.942c-3.139 3.138-3.15 8.215-.026 11.339 3.125 3.124 8.201 3.113 11.34-.025l-.944-.943zm5.063-10.09l.942.943c2.441-2.44 2.45-6.389.02-8.819-2.43-2.43-6.379-2.421-8.82.02l.944.943c1.917-1.918 5.02-1.925 6.929-.016 1.91 1.91 1.902 5.012-.016 6.93z\" fill=\"currentColor\" />\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.7 16.015c-1.743 1.743-1.749 4.563-.013 6.3 1.735 1.735 4.556 1.729 6.3-.015l-.944-.943a3.118 3.118 0 0 1-4.41.01 3.118 3.118 0 0 1 .01-4.41l-.942-.942z\" fill=\"currentColor\" />\n    </svg>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/AttachIcon/index.ts\n\r\n\r\n\r\nclass AttachIcon extends Component {\r\n    render() {\r\n        return templator.compile(AttachIcon_template_template);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/assets/PhotoIcon/template.ts\nconst PhotoIcon_template_template = `\n    <svg width=\"22\" height=\"22\" viewBox=\"0 0 22 22\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M4 1.5h14A2.5 2.5 0 0 1 20.5 4v10l-5.98-1.595A11.998 11.998 0 0 0 11.427 12h-.856c-1.043 0-2.083.136-3.091.405L1.5 14V4A2.5 2.5 0 0 1 4 1.5zM0 4a4 4 0 0 1 4-4h14a4 4 0 0 1 4 4v14a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4V4zm8 2a2 2 0 1 1-4 0 2 2 0 0 1 4 0z\" fill=\"currentColor\" />\n    </svg>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/PhotoIcon/index.ts\n\r\n\r\n\r\nclass PhotoIcon extends Component {\r\n    render() {\r\n        return templator.compile(PhotoIcon_template_template);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/assets/FileIcon/template.ts\nconst FileIcon_template_template = `\n    <svg viewBox=\"0 0 22 22\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M4 1.5h14A2.5 2.5 0 0 1 20.5 4v8H16a4 4 0 0 0-4 4v4.5H4A2.5 2.5 0 0 1 1.5 18V4A2.5 2.5 0 0 1 4 1.5zM12 22H4a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4h14a4 4 0 0 1 4 4v14a4 4 0 0 1-4 4h-6z\" fill=\"currentColor\" />\n    </svg>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/FileIcon/index.ts\n\r\n\r\n\r\nclass FileIcon extends Component {\r\n    render() {\r\n        return templator.compile(FileIcon_template_template);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/assets/LocationIcon/template.ts\nconst LocationIcon_template_template = `\n    <svg width=\"22\" height=\"22\" viewBox=\"0 0 22 22\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M20.5 11a9.5 9.5 0 1 1-19 0 9.5 9.5 0 0 1 19 0zm1.5 0c0 6.075-4.925 11-11 11S0 17.075 0 11 4.925 0 11 0s11 4.925 11 11zm-11 3a3 3 0 1 0 0-6 3 3 0 0 0 0 6z\" fill=\"currentColor\" />\n    </svg>\n`;\r\n\n// CONCATENATED MODULE: ./src/assets/LocationIcon/index.ts\n\r\n\r\n\r\nclass LocationIcon extends Component {\r\n    render() {\r\n        return templator.compile(LocationIcon_template_template);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/MessageForm/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass MessageForm extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.message = '';\r\n    }\r\n    prerender() {\r\n        this.attachFormMessageModal = new ChatActionsModal({\r\n            content: new ChatActions({\r\n                buttons: [\r\n                    new ChatActionsItem({\r\n                        icon: new PhotoIcon(),\r\n                        label: 'Фото или Видео',\r\n                        onClick: () => console.log('Фото или Видео'),\r\n                    }),\r\n                    new ChatActionsItem({\r\n                        icon: new FileIcon(),\r\n                        label: 'Файл',\r\n                        onClick: () => console.log('Файл'),\r\n                    }),\r\n                    new ChatActionsItem({\r\n                        icon: new LocationIcon(),\r\n                        label: 'Локация',\r\n                        onClick: () => console.log('Локация'),\r\n                    }),\r\n                ],\r\n            }),\r\n            x: 'left',\r\n            y: 'top',\r\n        });\r\n        const attachFormMessageModalToggle = () => {\r\n            this.attachFormMessageModal.visibilityToggle();\r\n        };\r\n        this.buttonFormMessageAttach = new ChatActionsButton({\r\n            className: 'message-form__attach',\r\n            icon: new AttachIcon(),\r\n            onClick: attachFormMessageModalToggle,\r\n            title: 'Добавить вложение',\r\n        });\r\n    }\r\n    render() {\r\n        return templator.compile(MessageForm_template_template, {\r\n            attachModal: this.attachFormMessageModal,\r\n            buttonAttach: this.buttonFormMessageAttach,\r\n            onChange: ({ target }) => {\r\n                const { value } = target;\r\n                this.message = value;\r\n            },\r\n            onSubmit: (e) => {\r\n                e.preventDefault();\r\n                if (this.message !== '') {\r\n                    console.log(`message: ${this.message}`);\r\n                    this.forceUpdate();\r\n                }\r\n            },\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ChatDeleteModal/template.ts\nconst ChatDeleteModal_template_template = `\n    <div class=\"modal-delete js-modal-delete\">\n        <div class=\"modal-delete__content\">\n            <div class=\"modal-delete__title\">Вы хотите удалить чат?</div>\n            <button class=\"modal-delete__button modal-delete__button_confirm\" type=\"button\" onClick=\"{{ onConfirm }}\">Удалить</button>\n            <button class=\"modal-delete__button modal-delete__button-cancel\" type=\"button\" onClick=\"{{ onCancel }}\">Отменить</button>\n        </div>\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ChatDeleteModal/index.ts\n\r\n\r\n\r\nclass ChatDeleteModal extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closeModal = () => {\r\n            this.hide();\r\n        };\r\n    }\r\n    render() {\r\n        return templator.compile(ChatDeleteModal_template_template, {\r\n            onCancel: () => {\r\n                console.log('cancel');\r\n            },\r\n            onConfirm: () => {\r\n                console.log('confirm');\r\n            },\r\n        });\r\n    }\r\n    componentDidMount() {\r\n        this.hide();\r\n    }\r\n    componentDidUpdate() {\r\n        const modal = this.getContent();\r\n        if (modal instanceof HTMLElement) {\r\n            setTimeout(() => {\r\n                if (modal.style.display === 'none') {\r\n                    document.removeEventListener('click', this.closeModal);\r\n                }\r\n                else {\r\n                    document.addEventListener('click', this.closeModal);\r\n                }\r\n            }, 0);\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/data/chatItemsData.ts\nconst chatItemsData = [{\r\n        avatarAlt: 'Аватар беседы с Андреем',\r\n        avatarSrc: '/assets/avatar.jpg',\r\n        incomingMessage: 'Изображение',\r\n        chatName: 'Андрей',\r\n        chatUrl: '/chat',\r\n        date: '10:49',\r\n        newMessage: 2,\r\n    }, {\r\n        avatarAlt: 'Аватар беседы Киноклуб',\r\n        avatarSrc: '/assets/avatar.jpg',\r\n        outgoingMessage: 'стикер',\r\n        chatName: 'Киноклуб',\r\n        chatUrl: '/chat',\r\n        date: '12:00',\r\n    }, {\r\n        avatarAlt: 'Аватар беседы с Илья',\r\n        avatarSrc: '/assets/avatar.jpg',\r\n        incomingMessage: 'Друзья, у меня для вас особенный выпуск новостей! Тут еще текст, который не влезает',\r\n        chatName: 'Илья',\r\n        chatUrl: '/chat',\r\n        date: '15:12',\r\n        newMessage: 4,\r\n    }, {\r\n        avatarAlt: 'Аватар беседы с Вадимом',\r\n        avatarSrc: '/assets/avatar.jpg',\r\n        outgoingMessage: 'Круто!',\r\n        chatName: 'Вадим',\r\n        chatUrl: '/chat',\r\n        date: 'Пт',\r\n    }, {\r\n        avatarAlt: 'Аватар беседы тет-а-теты',\r\n        avatarSrc: '/assets/avatar.jpg',\r\n        incomingMessage: 'И Human Interface Guidelines и Material Design рекомендуют и еще текст, который не влезает',\r\n        chatName: 'тет-а-теты',\r\n        chatUrl: '/chat',\r\n        date: 'Ср',\r\n    }, {\r\n        avatarAlt: 'Аватар беседы 1, 2, 3',\r\n        avatarSrc: '/assets/avatar.jpg',\r\n        incomingMessage: 'Миллионы россиян ежедневно проводят десятки часов свое и тут тоже есть текст, который не влезает',\r\n        chatName: '1, 2, 3',\r\n        chatUrl: '/chat',\r\n        date: 'Пн',\r\n    }, {\r\n        avatarAlt: 'Аватар беседы Design Destroyer',\r\n        avatarSrc: '/assets/avatar.jpg',\r\n        incomingMessage: 'В 2008 году художник Jon Rafman начал собирать - да-да, и этот текст тоже не влезает',\r\n        chatName: 'Design Destroyer',\r\n        chatUrl: '/chat',\r\n        date: 'Пн',\r\n    }, {\r\n        avatarAlt: 'Аватар беседы Day.',\r\n        avatarSrc: '/assets/avatar.jpg',\r\n        incomingMessage: 'Так увлёкся работой по курсу, что совсем забыл его анонсировать - фух, это последний текст, который не влезает',\r\n        chatName: 'Day.',\r\n        chatUrl: '/chat',\r\n        date: '31 Мая 2020',\r\n    }];\r\n\n// CONCATENATED MODULE: ./src/pages/chat.ts\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst renameFormToggle = () => {\r\n    chatRenameForm.visibilityToggle('grid');\r\n    chatInformation.visibilityToggle('grid');\r\n};\r\nconst deleteModalToggle = () => {\r\n    chatModalDelete.visibilityToggle('flex');\r\n};\r\nconst renameIcon = new RenameIcon();\r\nconst deleteIcon = new DeleteIcon();\r\nconst chatActions = new ChatActions({\r\n    buttons: [\r\n        new ChatActionsItem({\r\n            icon: renameIcon,\r\n            label: 'Переименовать',\r\n            onClick: renameFormToggle,\r\n        }),\r\n        new ChatActionsItem({\r\n            icon: deleteIcon,\r\n            label: 'Удалить',\r\n            onClick: deleteModalToggle,\r\n        }),\r\n    ],\r\n});\r\nconst chatActionsModal = new ChatActionsModal({\r\n    content: chatActions,\r\n    x: 'right',\r\n    y: 'bottom'\r\n});\r\nconst chatActionsModalToggle = () => {\r\n    chatActionsModal.visibilityToggle();\r\n};\r\nconst actionsIcon = new ActionsIcon();\r\nconst chatActionsButton = new ChatActionsButton({\r\n    className: 'chat-header__actions',\r\n    icon: actionsIcon,\r\n    onClick: chatActionsModalToggle,\r\n    title: 'Действия с чатом',\r\n});\r\nconst chatRenameForm = new ChatRenameForm({\r\n    onSubmit: renameFormToggle,\r\n    title: 'Вадим',\r\n});\r\nconst chatInformation = new ChatInformation({\r\n    avatarAlt: 'Аватар беседы с Вадимом',\r\n    avatarSrc: '/assets/avatar.jpg',\r\n    chatActionsButton,\r\n    chatActionsModal,\r\n    chatName: 'Вадим',\r\n    status: 'Был 5 минут назад',\r\n});\r\nconst chatHeader = new ChatHeader({\r\n    chatRenameForm,\r\n    chatInformation,\r\n});\r\nconst messages = new Messages();\r\nconst messageForm = new MessageForm();\r\nconst chatModalDelete = new ChatDeleteModal();\r\nconst chatBlock = new Chat({\r\n    chatHeader,\r\n    deleteModal: chatModalDelete,\r\n    messages,\r\n    messageForm,\r\n});\r\nconst chatItems = chatItemsData.map((_a) => {\r\n    var { newMessage, incomingMessage, outgoingMessage } = _a, mainProps = __rest(_a, [\"newMessage\", \"incomingMessage\", \"outgoingMessage\"]);\r\n    const props = Object.assign({}, mainProps);\r\n    if (newMessage !== undefined) {\r\n        props.newMessage = new NewMessage({ count: newMessage });\r\n    }\r\n    if (incomingMessage !== undefined) {\r\n        props.chatMessage = incomingMessage;\r\n    }\r\n    else if (outgoingMessage !== undefined) {\r\n        props.chatMessage = new CharItemOutgoingMessage({ message: outgoingMessage });\r\n    }\r\n    return new ChatItem(Object.assign({}, props));\r\n});\r\nconst chat = new Chats({\r\n    chatItems,\r\n    content: chatBlock,\r\n    onChange: ({ target }) => {\r\n        const { value } = target;\r\n        console.log(`search: ${value}`);\r\n    },\r\n    pageTitle: 'Выбор чата',\r\n});\r\n\n// CONCATENATED MODULE: ./src/components/SelectChat/template.ts\nconst SelectChat_template_template = `\n    <main class=\"wrapper-center\">\n        Выберите чат, чтобы отправить сообщение\n    </main>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/SelectChat/index.ts\n\r\n\r\n\r\nclass SelectChat extends Component {\r\n    render() {\r\n        return templator.compile(SelectChat_template_template);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/pages/chats.ts\nvar chats_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst selectChat = new SelectChat();\r\nconst chats_chatItems = chatItemsData.map((_a) => {\r\n    var { newMessage, incomingMessage, outgoingMessage } = _a, mainProps = chats_rest(_a, [\"newMessage\", \"incomingMessage\", \"outgoingMessage\"]);\r\n    const props = Object.assign({}, mainProps);\r\n    if (newMessage !== undefined) {\r\n        props.newMessage = new NewMessage({ count: newMessage });\r\n    }\r\n    if (incomingMessage !== undefined) {\r\n        props.chatMessage = incomingMessage;\r\n    }\r\n    else if (outgoingMessage !== undefined) {\r\n        props.chatMessage = new CharItemOutgoingMessage({ message: outgoingMessage });\r\n    }\r\n    return new ChatItem(Object.assign({}, props));\r\n});\r\nconst chats = new Chats({\r\n    chatItems: chats_chatItems,\r\n    content: selectChat,\r\n    onChange: ({ target }) => {\r\n        const { value } = target;\r\n        console.log(`search: ${value}`);\r\n    },\r\n    pageTitle: 'Выбор чата',\r\n});\r\n\n// CONCATENATED MODULE: ./src/components/Profile/template.ts\nconst Profile_template_template = `\n    <div class=\"profile-page\">\n        <div class=\"profile__back-link-wrapper\">\n            <a href=\"/\" class=\"profile-back-link\" title=\"Вернуться к выбору чата\">\n                <svg width=\"13\" height=\"12\" viewBox=\"0 0 13 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect x=\"13\" y=\"6.80005\" width=\"11\" height=\"1.6\" transform=\"rotate(-180 13 6.80005)\" fill=\"white\" />\n                    <path d=\"M6 11L2 6L6 1\" stroke=\"white\" stroke-width=\"1.6\" />\n                </svg>\n            </a>\n        </div>\n        <main class=\"profile {{ className }}\">\n            <h1 class=\"visually-hidden\">\n                {{ pageTitle }}\n            </h1>\n            <img src=\"{{ avatarSrc }}\" alt=\"Аватар пользователя {{ displayName }}\" width=\"131\" height=\"131\" />\n            <div class=\"profile__title\">\n                {{ displayName }}\n            </div>\n            {{ content }}\n        </main>\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/Profile/index.ts\nvar Profile_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\nclass Profile extends Component {\r\n    render() {\r\n        const _a = this.props, { long } = _a, others = Profile_rest(_a, [\"long\"]);\r\n        return templator.compile(Profile_template_template, Object.assign(Object.assign({}, others), { className: long ? 'profile_long' : '' }));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ProfileForm/template.ts\nconst ProfileForm_template_template = `\n    <form class=\"profile-section\">\n        {{ content }}\n        <button type=\"submit\" class=\"profile__submit\">Сохранить</button>\n    </form>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ProfileRow/templateReadonly.ts\nconst templateReadonly = `\n    <div class=\"profile__row profile-row\">\n        <div class=\"profile-row__title\">{{ title }}</div>\n        <div class=\"profile-row__value\">{{ value }}</div>\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ProfileRow/templateWritable.ts\nconst templateWritable = `\n    <div class=\"profile__row profile-row\">\n        <div class=\"profile-row__title\">{{ title }}</div>\n        <input type=\"{{ type }}\" class=\"profile-row__value\" value=\"{{ value }}\" name=\"{{ name }}\" />\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ProfileRow/index.ts\nvar ProfileRow_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\nclass ProfileRow extends Component {\r\n    render() {\r\n        const _a = this.props, { writable } = _a, others = ProfileRow_rest(_a, [\"writable\"]);\r\n        if (writable) {\r\n            return templator.compile(templateWritable, Object.assign({}, others));\r\n        }\r\n        return templator.compile(templateReadonly, Object.assign({}, others));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/utils/validation/isEmail.ts\nconst isEmail = (str) => /^\\S+@\\S+$/.test(str);\r\n\n// CONCATENATED MODULE: ./src/utils/validation/isShortPassword.ts\nconst isShortPassword = (password) => password.length < 8;\r\n\n// CONCATENATED MODULE: ./src/utils/validation/isPhone.ts\nconst isPhone = (str) => /^((8|\\+7)[- ]?)?((\\d{3})?[- ]?)?[\\d- ]{7,10}$/.test(str);\r\n\n// CONCATENATED MODULE: ./src/utils/cleanObject.ts\nconst cleanObject = (obj) => {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            const value = obj[key];\r\n            if (value !== undefined && value !== null) {\r\n                res[key] = obj[key];\r\n            }\r\n        }\r\n    }\r\n    return res;\r\n};\r\n\n// CONCATENATED MODULE: ./src/lib/Form/index.ts\n\r\nclass Form {\r\n    constructor({ onSubmit, wrapper, validator = {}, exclude, }) {\r\n        var _a;\r\n        this.errors = {};\r\n        this.touched = [];\r\n        this._INPUT_ERROR_CLASSNAME = 'form-input-error';\r\n        this._ERROR_CLASSNAME = 'form-error';\r\n        this.form = wrapper.tagName === 'FORM' ? wrapper : wrapper.querySelector('form');\r\n        this.formData = new FormData(this.form || undefined);\r\n        this.formData.forEach((_, name) => {\r\n            var _a;\r\n            const input = (_a = this.form) === null || _a === void 0 ? void 0 : _a.querySelector(`[name=\"${name}\"`);\r\n            input === null || input === void 0 ? void 0 : input.addEventListener('input', ({ target }) => {\r\n                const { value } = target;\r\n                this.setFieldValue(name, value);\r\n                this.validate(validator);\r\n                this.showErrors();\r\n            });\r\n            input === null || input === void 0 ? void 0 : input.addEventListener('blur', () => {\r\n                this.setFieldTouched(name);\r\n                this.validate(validator);\r\n                this.showErrors();\r\n            });\r\n        });\r\n        (_a = this.form) === null || _a === void 0 ? void 0 : _a.addEventListener('submit', (e) => {\r\n            e.preventDefault();\r\n            const isValid = Object.keys(this.errors).length === 0;\r\n            if (isValid) {\r\n                this.submit(onSubmit, exclude);\r\n            }\r\n            else {\r\n                this.showErrors(true);\r\n            }\r\n        });\r\n        this.validate(validator);\r\n        this.touched = [];\r\n    }\r\n    setFieldValue(name, value) {\r\n        this.formData.set(name, value);\r\n    }\r\n    setFieldTouched(name) {\r\n        this.touched.push(name);\r\n    }\r\n    showErrors(necessarily = false) {\r\n        this.formData.forEach((_, name) => {\r\n            var _a;\r\n            const input = (_a = this.form) === null || _a === void 0 ? void 0 : _a.querySelector(`[name=\"${name}\"`);\r\n            const parent = input === null || input === void 0 ? void 0 : input.parentElement;\r\n            const errorElement = (parent === null || parent === void 0 ? void 0 : parent.querySelector(`.${this._ERROR_CLASSNAME}`)) || document.createElement('div');\r\n            errorElement.textContent = '';\r\n            input === null || input === void 0 ? void 0 : input.classList.remove(`${this._INPUT_ERROR_CLASSNAME}`);\r\n            const isTouched = this.touched.includes(name) || necessarily;\r\n            const error = this.errors[name];\r\n            if (isTouched && error) {\r\n                input === null || input === void 0 ? void 0 : input.classList.add(`${this._INPUT_ERROR_CLASSNAME}`);\r\n                errorElement.textContent = error;\r\n                if (errorElement.parentElement === null) {\r\n                    errorElement.classList.add(this._ERROR_CLASSNAME);\r\n                    parent === null || parent === void 0 ? void 0 : parent.appendChild(errorElement);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    validate(validator) {\r\n        let data = {};\r\n        this.formData.forEach((value, name) => {\r\n            data = Object.assign(Object.assign({}, data), { [name]: value });\r\n        });\r\n        this.errors = cleanObject(Object\r\n            .entries(validator)\r\n            .reduce((prev, [name, validate]) => (Object.assign(Object.assign({}, prev), { [name]: validate(data) })), {}));\r\n    }\r\n    submit(onSubmit, exclude) {\r\n        if (exclude !== undefined) {\r\n            if (typeof exclude === 'string') {\r\n                this.formData.delete(exclude);\r\n            }\r\n            else if (Array.isArray(exclude)) {\r\n                exclude.forEach((item) => {\r\n                    this.formData.delete(item);\r\n                });\r\n            }\r\n        }\r\n        let data = {};\r\n        this.formData.forEach((value, key) => {\r\n            data[key] = value;\r\n        });\r\n        onSubmit(data);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/utils/queryStringify.ts\nconst queryStringify = (data) => {\r\n    if (data === undefined) {\r\n        return '';\r\n    }\r\n    const transform = (value, prop) => {\r\n        if (typeof value === 'object') {\r\n            if (Array.isArray(value)) {\r\n                return value.map((item, i) => transform(item, `${prop}[${i}]`)).join('&');\r\n            }\r\n            return Object\r\n                .entries(value)\r\n                .map(([p, v]) => transform(v, `${prop}[${p}]`)).join('&');\r\n        }\r\n        else {\r\n            return prop + '=' + value;\r\n        }\r\n    };\r\n    return '?' + Object\r\n        .entries(data)\r\n        .map(([prop, value]) => transform(value, prop))\r\n        .join('&');\r\n};\r\n\n// CONCATENATED MODULE: ./src/lib/HTTPTransport/types.ts\nvar HTTPMethods;\r\n(function (HTTPMethods) {\r\n    HTTPMethods[\"GET\"] = \"GET\";\r\n    HTTPMethods[\"PUT\"] = \"PUT\";\r\n    HTTPMethods[\"POST\"] = \"POST\";\r\n    HTTPMethods[\"DELETE\"] = \"DELETE\";\r\n})(HTTPMethods || (HTTPMethods = {}));\r\n\n// CONCATENATED MODULE: ./src/lib/HTTPTransport/index.ts\n\r\n\r\nclass HTTPTransport {\r\n    constructor() {\r\n        this._domain = '';\r\n        this.setDomain = (domain) => {\r\n            this._domain = domain;\r\n        };\r\n        this.get = (url, options = {}) => {\r\n            const { body } = options;\r\n            const newUrl = url + queryStringify(body);\r\n            return this.request(newUrl, Object.assign(Object.assign({}, options), { method: HTTPMethods.GET }), options.timeout);\r\n        };\r\n        this.put = (url, options = {}) => {\r\n            return this.request(url, Object.assign(Object.assign({}, options), { method: HTTPMethods.PUT }), options.timeout);\r\n        };\r\n        this.post = (url, options = {}) => {\r\n            return this.request(url, Object.assign(Object.assign({}, options), { method: HTTPMethods.POST }), options.timeout);\r\n        };\r\n        this.delete = (url, options = {}) => {\r\n            return this.request(url, Object.assign(Object.assign({}, options), { method: HTTPMethods.DELETE }), options.timeout);\r\n        };\r\n        this.request = (url, options, timeout = 5000) => {\r\n            const { method, body, headers = {} } = options;\r\n            return new Promise((resolve, reject) => {\r\n                const xhr = new XMLHttpRequest();\r\n                xhr.open(method, this._domain + url);\r\n                xhr.onload = function () {\r\n                    resolve(xhr.response);\r\n                };\r\n                xhr.onabort = reject;\r\n                xhr.onerror = reject;\r\n                xhr.ontimeout = reject;\r\n                xhr.timeout = timeout;\r\n                Object.entries(headers).forEach(([key, value]) => {\r\n                    xhr.setRequestHeader(key, value);\r\n                });\r\n                if (method === HTTPMethods.GET || !body) {\r\n                    xhr.send();\r\n                }\r\n                else {\r\n                    xhr.send(JSON.stringify(body));\r\n                }\r\n            });\r\n        };\r\n    }\r\n}\r\nconst httpTransport = new HTTPTransport();\r\n\n// CONCATENATED MODULE: ./src/lib/DTOModel/index.ts\n// на рабочих проектах у меня много различных запросов,\r\n// поэтому мы используем примерно такие dto'шки\r\n// мне они очень нравятся, поэтому решил затащить их в этот проект\r\n// хотя в принципе тут, наверное, они особо и не нужны\r\n// потому что здесь обычно к \"ручкам\" только по одному протоколу запросы идут\r\n// интересно твое мнение в целом о таких классах,\r\n// мб еще какие-то способы есть интересные?\r\n\r\nclass DTOModel {\r\n    constructor(_name) {\r\n        this._name = _name;\r\n        this.find = (body) => {\r\n            return httpTransport.get(this._name, { body });\r\n        };\r\n        this.update = (body) => {\r\n            return httpTransport.put(this._name, { body });\r\n        };\r\n        this.delete = (body) => {\r\n            return httpTransport.delete(this._name, { body });\r\n        };\r\n        this.create = (body) => {\r\n            return httpTransport.post(this._name, { body });\r\n        };\r\n        this.get = (id) => {\r\n            return new DTOModel(`${this._name}/${id}`);\r\n        };\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/api/profileDTO.ts\n\r\nconst profileDTO = new DTOModel('/user/profile');\r\n\n// CONCATENATED MODULE: ./src/api/profileAvatarDTO.ts\n\r\nconst profileAvatarDTO = new DTOModel('/user/profile/avatar');\r\n\n// CONCATENATED MODULE: ./src/api/profilePasswordDTO.ts\n\r\nconst profilePasswordDTO = new DTOModel('/user/password');\r\n\n// CONCATENATED MODULE: ./src/components/ProfileForm/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass ProfileForm extends Component {\r\n    constructor() {\r\n        super({});\r\n        this.onSubmit = ({ first_name, second_name, display_name, login, email, phone, avatar, oldPassword, newPassword }) => {\r\n            const profile = {\r\n                first_name,\r\n                second_name,\r\n                display_name,\r\n                login,\r\n                email,\r\n                phone\r\n            };\r\n            profileDTO.create(profile);\r\n            if (avatar && Object.keys(avatar).length !== 0) {\r\n                profileAvatarDTO.create({ avatar });\r\n            }\r\n            profilePasswordDTO.create({\r\n                oldPassword,\r\n                newPassword,\r\n            });\r\n        };\r\n        this.validator = {\r\n            email: ({ email }) => {\r\n                if (!isEmail(email)) {\r\n                    return 'Укажите валидный email';\r\n                }\r\n            },\r\n            newPassword: ({ newPassword }) => {\r\n                if (isShortPassword(newPassword)) {\r\n                    return 'Максимальная длина пароля - 8 символов';\r\n                }\r\n            },\r\n            phone: ({ phone }) => {\r\n                if (!isPhone(phone)) {\r\n                    return 'Укажите телефон в формате +7 XXX XXX XXXX';\r\n                }\r\n            },\r\n            repeatNewPassword: ({ newPassword, repeatNewPassword }) => {\r\n                if (newPassword !== repeatNewPassword) {\r\n                    return 'Пароли не совпадают';\r\n                }\r\n            },\r\n        };\r\n        this.content = [];\r\n        if (this.element instanceof HTMLElement) {\r\n            new Form({\r\n                onSubmit: this.onSubmit,\r\n                validator: this.validator,\r\n                wrapper: this.element,\r\n            });\r\n        }\r\n    }\r\n    prerender() {\r\n        const firstName = new ProfileRow({\r\n            name: 'first_name',\r\n            title: 'Имя',\r\n            type: 'text',\r\n            value: 'Вася',\r\n            writable: true,\r\n        });\r\n        const secondName = new ProfileRow({\r\n            name: 'second_name',\r\n            title: 'Фамилия',\r\n            type: 'text',\r\n            value: 'Васин',\r\n            writable: true,\r\n        });\r\n        const displayName = new ProfileRow({\r\n            name: 'display_name',\r\n            title: 'Отображаемое имя',\r\n            type: 'text',\r\n            value: 'Васян',\r\n            writable: true,\r\n        });\r\n        const login = new ProfileRow({\r\n            name: 'login',\r\n            title: 'Логин',\r\n            type: 'text',\r\n            value: 'username',\r\n            writable: true,\r\n        });\r\n        const email = new ProfileRow({\r\n            name: 'email',\r\n            title: 'Почта',\r\n            type: 'email',\r\n            value: 'pochta@yandex.ru',\r\n            writable: true,\r\n        });\r\n        const phone = new ProfileRow({\r\n            name: 'phone',\r\n            title: 'Телефон',\r\n            type: 'tel',\r\n            value: '+7 903 123 4567',\r\n            writable: true,\r\n        });\r\n        const oldPassword = new ProfileRow({\r\n            name: 'oldPassword',\r\n            title: 'Текущий пароль',\r\n            type: 'password',\r\n            value: 'password',\r\n            writable: true,\r\n        });\r\n        const newPassword = new ProfileRow({\r\n            name: 'newPassword',\r\n            title: 'Новый пароль',\r\n            type: 'password',\r\n            value: 'password',\r\n            writable: true,\r\n        });\r\n        const repeatNewPassword = new ProfileRow({\r\n            name: 'repeatNewPassword',\r\n            title: 'Новый пароль (еще раз)',\r\n            type: 'password',\r\n            value: 'зфыыцщкв',\r\n            writable: true,\r\n        });\r\n        const avatar = new ProfileRow({\r\n            name: 'avatar',\r\n            title: 'Загрузить аватар',\r\n            type: 'file',\r\n            value: '',\r\n            writable: true,\r\n        });\r\n        this.content = [\r\n            firstName,\r\n            secondName,\r\n            displayName,\r\n            login,\r\n            email,\r\n            phone,\r\n            oldPassword,\r\n            newPassword,\r\n            repeatNewPassword,\r\n            avatar,\r\n        ];\r\n    }\r\n    render() {\r\n        return templator.compile(ProfileForm_template_template, {\r\n            content: this.content,\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/pages/edit-profile.ts\n\r\n\r\nconst editProfile = new Profile({\r\n    avatarSrc: '/assets/avatar.jpg',\r\n    content: new ProfileForm(),\r\n    displayName: 'Васян',\r\n    long: true,\r\n    pageTitle: 'Редактирование профиля'\r\n});\r\n\n// CONCATENATED MODULE: ./src/components/LoginForm/template.ts\nconst LoginForm_template_template = `\n    <main class=\"wrapper-center\">\n        <form class=\"login-form {{ className }}\">\n            <h1 class=\"login-form__title\">{{ pageTitle }}</h1>\n            {{ content }}\n            <button class=\"login-form__submit\" type=\"submit\">{{ buttonLabel }}</button>\n            <a href=\"{{ linkHref }}\" class=\"login-form__link\">{{ linkLabel }}</a>\n        </form>\n    </main>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/LoginForm/index.ts\n\r\n\r\n\r\n\r\nclass LoginForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        if (this.element instanceof HTMLElement) {\r\n            const { excludeOnSubmit: exclude, onSubmit, validator, } = this.props;\r\n            new Form({\r\n                exclude,\r\n                onSubmit,\r\n                validator,\r\n                wrapper: this.element,\r\n            });\r\n        }\r\n    }\r\n    render() {\r\n        const { buttonLabel, content, linkHref, linkLabel, long, pageTitle, } = this.props;\r\n        return templator.compile(LoginForm_template_template, {\r\n            buttonLabel,\r\n            className: long ? 'login-form_long' : '',\r\n            content,\r\n            linkHref,\r\n            linkLabel,\r\n            long,\r\n            pageTitle,\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/LoginFormRow/template.ts\nconst LoginFormRow_template_template = `\n    <label class=\"login-form__row\">\n        <input type=\"{{ type }}\" class=\"login-form__input\" value=\"{{ value }}\" name=\"{{ name }}\" />\n        <span class=\"login-form__label\">{{ label }}</span>\n        <span class=\"login-form__error\"></span>\n    </label>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/LoginFormRow/index.ts\n\r\n\r\n\r\nclass LoginFormRow extends Component {\r\n    render() {\r\n        return templator.compile(LoginFormRow_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/api/signInDTO.ts\n\r\nconst signInDTO = new DTOModel('/auth/signin');\r\n\n// CONCATENATED MODULE: ./src/pages/login.ts\n\r\n\r\n\r\n\r\nconst loginElement = new LoginFormRow({\r\n    label: 'Логин',\r\n    name: 'login',\r\n    type: 'text',\r\n    value: 'username',\r\n});\r\nconst passwordElement = new LoginFormRow({\r\n    label: 'Пароль',\r\n    name: 'password',\r\n    type: 'password',\r\n    value: 'password',\r\n});\r\nconst login = new LoginForm({\r\n    buttonLabel: 'Авторизоваться',\r\n    content: [\r\n        loginElement,\r\n        passwordElement,\r\n    ],\r\n    linkHref: 'registration',\r\n    linkLabel: 'Нет аккаунта?',\r\n    onSubmit: (values) => {\r\n        signInDTO.create(values);\r\n    },\r\n    pageTitle: 'Вход',\r\n    validator: {\r\n        login: ({ login }) => {\r\n            if (login === '') {\r\n                return 'Обязательное поле';\r\n            }\r\n        },\r\n        password: ({ password }) => {\r\n            if (isShortPassword(password)) {\r\n                return 'Минимальная длина пароля - 8 символов';\r\n            }\r\n        }\r\n    }\r\n});\r\n\n// CONCATENATED MODULE: ./src/components/ProfileSection/template.ts\nconst ProfileSection_template_template = `\n    <div class=\"profile-section\">\n        {{ content }}\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ProfileSection/index.ts\n\r\n\r\n\r\nclass ProfileSection extends Component {\r\n    render() {\r\n        return templator.compile(ProfileSection_template_template, Object.assign({}, this.props));\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/components/ProfileViewFooter/template.ts\nconst ProfileViewFooter_template_template = `\n    <div class=\"profile-section\">\n        <div class=\"profile__row profile-row\">\n            <a href=\"/edit-profile\" class=\"profile-row__link\">Изменить данные</a>\n        </div>\n        <div class=\"profile__row profile-row\">\n            <button class=\"profile-row__logout\" type=\"button\" onClick=\"{{ onClick }}\">Выйти</button>\n        </div>\n    </div>\n`;\r\n\n// CONCATENATED MODULE: ./src/components/ProfileViewFooter/index.ts\n\r\n\r\n\r\n\r\nclass ProfileViewFooter extends Component {\r\n    render() {\r\n        return templator.compile(ProfileViewFooter_template_template, {\r\n            onClick: () => {\r\n                httpTransport.post('/auth/logout');\r\n            },\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/pages/profile.ts\n\r\n\r\n\r\n\r\nconst profile = new Profile({\r\n    avatarSrc: '/assets/avatar.jpg',\r\n    content: [\r\n        new ProfileSection({\r\n            content: [\r\n                new ProfileRow({\r\n                    title: 'Имя',\r\n                    value: 'Вася',\r\n                }),\r\n                new ProfileRow({\r\n                    title: 'Фамилия',\r\n                    value: 'Васин',\r\n                }),\r\n                new ProfileRow({\r\n                    title: 'Отображаемое имя',\r\n                    value: 'Васян',\r\n                }),\r\n                new ProfileRow({\r\n                    title: 'Логин',\r\n                    value: 'username',\r\n                }),\r\n                new ProfileRow({\r\n                    title: 'Почта',\r\n                    value: 'pochta@yandex.ru',\r\n                }),\r\n                new ProfileRow({\r\n                    title: 'Телефон',\r\n                    value: '+7 903 123 4567',\r\n                }),\r\n            ],\r\n        }),\r\n        new ProfileViewFooter(),\r\n    ],\r\n    displayName: 'Васян',\r\n    pageTitle: 'Профиль'\r\n});\r\n\n// CONCATENATED MODULE: ./src/api/signUpDTO.ts\n\r\nconst signUpDTO = new DTOModel('/auth/signup');\r\n\n// CONCATENATED MODULE: ./src/pages/registration.ts\n\r\n\r\n\r\n\r\n\r\n\r\nconst firstName = new LoginFormRow({\r\n    label: 'Имя',\r\n    name: 'first_name',\r\n    type: 'text',\r\n    value: 'Вася',\r\n});\r\nconst secondName = new LoginFormRow({\r\n    label: 'Фамилия',\r\n    name: 'second_name',\r\n    type: 'text',\r\n    value: 'Васин',\r\n});\r\nconst registration_login = new LoginFormRow({\r\n    label: 'Логин',\r\n    name: 'login',\r\n    type: 'text',\r\n    value: 'username',\r\n});\r\nconst email = new LoginFormRow({\r\n    label: 'Почта',\r\n    name: 'email',\r\n    type: 'email',\r\n    value: 'pochta@yandex.ru',\r\n});\r\nconst phone = new LoginFormRow({\r\n    label: 'Телефон',\r\n    name: 'phone',\r\n    type: 'tel',\r\n    value: '+7 903 123 4567',\r\n});\r\nconst registration_password = new LoginFormRow({\r\n    label: 'Пароль',\r\n    name: 'password',\r\n    type: 'password',\r\n    value: 'password',\r\n});\r\nconst repeatPassword = new LoginFormRow({\r\n    label: 'Пароль (еще раз)',\r\n    name: 'repeat_password',\r\n    type: 'password',\r\n    value: 'зфыыцокв',\r\n});\r\nconst registration = new LoginForm({\r\n    buttonLabel: 'Зарегистрироваться',\r\n    content: [\r\n        firstName,\r\n        secondName,\r\n        registration_login,\r\n        email,\r\n        phone,\r\n        registration_password,\r\n        repeatPassword,\r\n    ],\r\n    excludeOnSubmit: 'repeat_password',\r\n    linkHref: '/login',\r\n    linkLabel: 'Войти',\r\n    long: true,\r\n    onSubmit: (values) => {\r\n        signUpDTO.create(values);\r\n    },\r\n    pageTitle: 'Регистрация',\r\n    validator: {\r\n        email: ({ email }) => {\r\n            if (!isEmail(email)) {\r\n                return 'Укажите валидный email';\r\n            }\r\n        },\r\n        password: ({ password }) => {\r\n            if (isShortPassword(password)) {\r\n                return 'Максимальная длина пароля - 8 символов';\r\n            }\r\n        },\r\n        phone: ({ phone }) => {\r\n            if (!isPhone(phone)) {\r\n                return 'Укажите телефон в формате +7 XXX XXX XXXX';\r\n            }\r\n        },\r\n        repeat_password: ({ password, repeat_password: repeatPassword }) => {\r\n            if (password !== repeatPassword) {\r\n                return 'Пароли не совпадают';\r\n            }\r\n        },\r\n    }\r\n});\r\n\n// CONCATENATED MODULE: ./src/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst router = new Router('#root');\r\nrouter\r\n    .use('/', chats, 'Выберите чат')\r\n    .use('/404/', error404, 'Ошибка 404')\r\n    .use('/500/', error500, 'Ошибка 500')\r\n    .use('/chat/', chat, 'Чат')\r\n    .use('/edit-profile/', editProfile, 'Редактирование профиля')\r\n    .use('/login/', login, 'Вход')\r\n    .use('/profile/', profile, 'Профиль')\r\n    .use('/registration/', registration, 'Регистрация')\r\n    .start();\r\nhttpTransport.setDomain('https://ya-praktikum.tech/api/v2');\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy91dGlscy9yZW5kZXIudHM/ZDFhMCIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9saWIvUm91dGVyL1JvdXRlLnRzPzk0NDQiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvbGliL1JvdXRlci9pbmRleC50cz85NjgyIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2xpYi9FdmVudEJ1cy9pbmRleC50cz80NzNhIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2xpYi9Db21wb25lbnQvaW5kZXgudHM/ZGRlYiIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9saWIvVGVtcGxhdG9yL2luZGV4LnRzPzc2ZjEiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9FcnJvci90ZW1wbGF0ZS50cz8wOGJiIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2NvbXBvbmVudHMvRXJyb3IvaW5kZXgudHM/ODQ5MyIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9wYWdlcy80MDQudHM/ZmQyZSIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9wYWdlcy81MDAudHM/ZjI4NiIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9jb21wb25lbnRzL0NoYXQvdGVtcGxhdGUudHM/Y2Q3NCIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9jb21wb25lbnRzL0NoYXQvaW5kZXgudHM/YWVmNCIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9jb21wb25lbnRzL0NoYXRBY3Rpb25zQnV0dG9uL3RlbXBsYXRlLnRzPzZmNWYiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9DaGF0QWN0aW9uc0J1dHRvbi9pbmRleC50cz9iOTM1Iiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2NvbXBvbmVudHMvQ2hhdEFjdGlvbnMvdGVtcGxhdGUudHM/MjM5ZSIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9jb21wb25lbnRzL0NoYXRBY3Rpb25zL2luZGV4LnRzPzNlMjgiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9DaGF0QWN0aW9uc0l0ZW0vdGVtcGxhdGUudHM/NDdlZSIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9jb21wb25lbnRzL0NoYXRBY3Rpb25zSXRlbS9pbmRleC50cz9mNTU5Iiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2NvbXBvbmVudHMvQ2hhdEFjdGlvbnNNb2RhbC90ZW1wbGF0ZS50cz8wNGM1Iiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2NvbXBvbmVudHMvQ2hhdEFjdGlvbnNNb2RhbC9pbmRleC50cz83YmUyIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2NvbXBvbmVudHMvQ2hhdEluZm9ybWF0aW9uL3RlbXBsYXRlLnRzPzYzNjkiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9DaGF0SW5mb3JtYXRpb24vaW5kZXgudHM/NWNmMyIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9jb21wb25lbnRzL0NoYXRSZW5hbWVGb3JtL3RlbXBsYXRlLnRzP2ZhMjQiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9DaGF0UmVuYW1lRm9ybS9pbmRleC50cz84OGI5Iiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2NvbXBvbmVudHMvQ2hhdEhlYWRlci90ZW1wbGF0ZS50cz81N2RmIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2NvbXBvbmVudHMvQ2hhdEhlYWRlci9pbmRleC50cz85YjI3Iiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2NvbXBvbmVudHMvQ2hhdEl0ZW0vdGVtcGxhdGUudHM/ZWE0NyIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9jb21wb25lbnRzL0NoYXRJdGVtL2luZGV4LnRzP2UyZmEiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9OZXdNZXNzYWdlL3RlbXBsYXRlLnRzP2VmMDciLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9OZXdNZXNzYWdlL2luZGV4LnRzPzg5ZTIiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9DaGF0SXRlbU91dGdvaW5nTWVzc2FnZS90ZW1wbGF0ZS50cz81ZDEzIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2NvbXBvbmVudHMvQ2hhdEl0ZW1PdXRnb2luZ01lc3NhZ2UvaW5kZXgudHM/OWE3ZiIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9jb21wb25lbnRzL0NoYXRzL3RlbXBsYXRlLnRzPzRiMTAiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9DaGF0cy9pbmRleC50cz8yYjgxIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2Fzc2V0cy9BY3Rpb25zSWNvbi90ZW1wbGF0ZS50cz9jYTQzIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2Fzc2V0cy9BY3Rpb25zSWNvbi9pbmRleC50cz9iYzViIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2Fzc2V0cy9SZW5hbWVJY29uL3RlbXBsYXRlLnRzPzAwODEiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvYXNzZXRzL1JlbmFtZUljb24vaW5kZXgudHM/MjU1MiIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9hc3NldHMvRGVsZXRlSWNvbi90ZW1wbGF0ZS50cz9jZjNmIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2Fzc2V0cy9EZWxldGVJY29uL2luZGV4LnRzPzQ1MmIiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9NZXNzYWdlcy90ZW1wbGF0ZS50cz9hMzY5Iiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2NvbXBvbmVudHMvTWVzc2FnZURhdGUvdGVtcGxhdGUudHM/NzkzMSIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9jb21wb25lbnRzL01lc3NhZ2VEYXRlL2luZGV4LnRzPzNiNTgiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9NZXNzYWdlL3RlbXBsYXRlLnRzPzFhYWYiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvYXNzZXRzL1NlbnRJY29uL3RlbXBsYXRlLnRzPzhiMTAiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvYXNzZXRzL1NlbnRJY29uL2luZGV4LnRzPzc0YjciLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvYXNzZXRzL1JlYWRJY29uL3RlbXBsYXRlLnRzP2I2NTUiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvYXNzZXRzL1JlYWRJY29uL2luZGV4LnRzP2JmMDYiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9NZXNzYWdlL2luZGV4LnRzPzU2NWEiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9NZXNzYWdlQ29udGVudC90ZW1wbGF0ZS50cz9jMzY3Iiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2NvbXBvbmVudHMvTWVzc2FnZUNvbnRlbnQvaW5kZXgudHM/ZDdkYSIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9jb21wb25lbnRzL01lc3NhZ2VBdHRhY2gvdGVtcGxhdGUudHM/ZjhiYyIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9jb21wb25lbnRzL01lc3NhZ2VBdHRhY2gvaW5kZXgudHM/ODYyMyIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9jb21wb25lbnRzL01lc3NhZ2VzL2luZGV4LnRzPzc4OGYiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9NZXNzYWdlRm9ybS90ZW1wbGF0ZS50cz84YzI1Iiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2Fzc2V0cy9BdHRhY2hJY29uL3RlbXBsYXRlLnRzPzEyNzYiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvYXNzZXRzL0F0dGFjaEljb24vaW5kZXgudHM/NjBlZCIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9hc3NldHMvUGhvdG9JY29uL3RlbXBsYXRlLnRzP2IzMzEiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvYXNzZXRzL1Bob3RvSWNvbi9pbmRleC50cz8xZDkwIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2Fzc2V0cy9GaWxlSWNvbi90ZW1wbGF0ZS50cz8zNzZjIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2Fzc2V0cy9GaWxlSWNvbi9pbmRleC50cz9jMjhhIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2Fzc2V0cy9Mb2NhdGlvbkljb24vdGVtcGxhdGUudHM/NWIyYyIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9hc3NldHMvTG9jYXRpb25JY29uL2luZGV4LnRzPzRiMGMiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9NZXNzYWdlRm9ybS9pbmRleC50cz8yMTQzIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2NvbXBvbmVudHMvQ2hhdERlbGV0ZU1vZGFsL3RlbXBsYXRlLnRzPzc0YTMiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9DaGF0RGVsZXRlTW9kYWwvaW5kZXgudHM/YzVmNCIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9kYXRhL2NoYXRJdGVtc0RhdGEudHM/NmY1MyIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9wYWdlcy9jaGF0LnRzPzU0N2IiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9TZWxlY3RDaGF0L3RlbXBsYXRlLnRzP2RlOWYiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9TZWxlY3RDaGF0L2luZGV4LnRzPzc3MWEiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvcGFnZXMvY2hhdHMudHM/ZTNiZCIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9jb21wb25lbnRzL1Byb2ZpbGUvdGVtcGxhdGUudHM/YTBiMyIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9jb21wb25lbnRzL1Byb2ZpbGUvaW5kZXgudHM/YjI4NyIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9jb21wb25lbnRzL1Byb2ZpbGVGb3JtL3RlbXBsYXRlLnRzP2Y2MjgiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9Qcm9maWxlUm93L3RlbXBsYXRlUmVhZG9ubHkudHM/YzQ1NyIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9jb21wb25lbnRzL1Byb2ZpbGVSb3cvdGVtcGxhdGVXcml0YWJsZS50cz84NTkyIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2NvbXBvbmVudHMvUHJvZmlsZVJvdy9pbmRleC50cz9iMGNhIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL3V0aWxzL3ZhbGlkYXRpb24vaXNFbWFpbC50cz81NDhlIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL3V0aWxzL3ZhbGlkYXRpb24vaXNTaG9ydFBhc3N3b3JkLnRzP2NiZDUiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvdXRpbHMvdmFsaWRhdGlvbi9pc1Bob25lLnRzP2NjNmMiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvdXRpbHMvY2xlYW5PYmplY3QudHM/YzliMiIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9saWIvRm9ybS9pbmRleC50cz82M2Y0Iiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL3V0aWxzL3F1ZXJ5U3RyaW5naWZ5LnRzPzE0YTEiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvbGliL0hUVFBUcmFuc3BvcnQvdHlwZXMudHM/MjcwYSIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9saWIvSFRUUFRyYW5zcG9ydC9pbmRleC50cz9iNjkyIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2xpYi9EVE9Nb2RlbC9pbmRleC50cz9lMTAyIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2FwaS9wcm9maWxlRFRPLnRzPzY2MjYiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvYXBpL3Byb2ZpbGVBdmF0YXJEVE8udHM/OWZkNyIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9hcGkvcHJvZmlsZVBhc3N3b3JkRFRPLnRzPzY5NWIiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9Qcm9maWxlRm9ybS9pbmRleC50cz80ZTQ1Iiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL3BhZ2VzL2VkaXQtcHJvZmlsZS50cz9iNDdiIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2NvbXBvbmVudHMvTG9naW5Gb3JtL3RlbXBsYXRlLnRzPzA2NjkiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9Mb2dpbkZvcm0vaW5kZXgudHM/M2EyYyIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9jb21wb25lbnRzL0xvZ2luRm9ybVJvdy90ZW1wbGF0ZS50cz83M2M1Iiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2NvbXBvbmVudHMvTG9naW5Gb3JtUm93L2luZGV4LnRzPzMwZmMiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvYXBpL3NpZ25JbkRUTy50cz9kZjE5Iiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL3BhZ2VzL2xvZ2luLnRzPzRiYTAiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9Qcm9maWxlU2VjdGlvbi90ZW1wbGF0ZS50cz82OTllIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL2NvbXBvbmVudHMvUHJvZmlsZVNlY3Rpb24vaW5kZXgudHM/OWNhMSIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9jb21wb25lbnRzL1Byb2ZpbGVWaWV3Rm9vdGVyL3RlbXBsYXRlLnRzP2NjODQiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvY29tcG9uZW50cy9Qcm9maWxlVmlld0Zvb3Rlci9pbmRleC50cz82MTViIiwid2VicGFjazovL3lhbmRleC1wcmFrdGlrdW0tcHJvamVjdC0xLy4vc3JjL3BhZ2VzL3Byb2ZpbGUudHM/MTkzNCIsIndlYnBhY2s6Ly95YW5kZXgtcHJha3Rpa3VtLXByb2plY3QtMS8uL3NyYy9hcGkvc2lnblVwRFRPLnRzP2Q1MTYiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvcGFnZXMvcmVnaXN0cmF0aW9uLnRzPzdiYmMiLCJ3ZWJwYWNrOi8veWFuZGV4LXByYWt0aWt1bS1wcm9qZWN0LTEvLi9zcmMvaW5kZXgudHM/ZmZiNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVPLE1BQU0sTUFBTSxHQUFHLENBQUMsUUFBZ0IsRUFBRSxTQUF5QixFQUFFLEVBQUU7SUFDbEUsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM5QyxNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsVUFBVSxFQUFFLENBQUM7SUFFdkMsSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLE9BQU8sS0FBSyxJQUFJLEVBQUU7UUFDbkMsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLFdBQVcsQ0FBQyxPQUFPLEVBQUU7S0FDOUI7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDOzs7QUNYMkM7QUFHckMsTUFBTSxLQUFLO0lBQ2QsWUFDWSxTQUFpQixFQUNqQixNQUFpQixFQUNqQixNQUFjLEVBQ2QsU0FBaUI7UUFIakIsY0FBUyxHQUFULFNBQVMsQ0FBUTtRQUNqQixXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQ2pCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxjQUFTLEdBQVQsU0FBUyxDQUFRO0lBRTdCLENBQUM7SUFFRCxLQUFLO1FBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sWUFBWSxXQUFXLEVBQUU7WUFDcEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDaEM7SUFDTCxDQUFDO0lBRUQsT0FBTyxDQUFDLENBQVMsRUFBRSxDQUFTO1FBQ3hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRUQsS0FBSyxDQUFDLFFBQWdCO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxNQUFNO1FBQ0YsUUFBUSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFtQixDQUFDLENBQUM7SUFDckQsQ0FBQztDQUNKOzs7QUM5QitCO0FBR3pCLE1BQU0sTUFBTTtJQVNmLFlBQ1ksU0FBaUI7UUFBakIsY0FBUyxHQUFULFNBQVMsQ0FBUTtRQVB0QixXQUFNLEdBQVksRUFBRSxDQUFDO1FBRXJCLFlBQU8sR0FBWSxNQUFNLENBQUMsT0FBTyxDQUFDO1FBRWpDLGtCQUFhLEdBQWlCLElBQUksQ0FBQztRQUt2QyxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7WUFDbkIsT0FBTyxNQUFNLENBQUMsVUFBVSxDQUFDO1NBQzVCO1FBRUQsTUFBTSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7SUFDN0IsQ0FBQztJQUVELEdBQUcsQ0FBQyxRQUFnQixFQUFFLEtBQWdCLEVBQUUsS0FBYTtRQUNqRCxNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFaEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFeEIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELEtBQUs7UUFDRCxNQUFNLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRTtZQUNoQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3pELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxRQUFRLENBQUMsUUFBZ0I7UUFDckIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUV0QyxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDcEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUM5QjtRQUVELElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxJQUFJLElBQUksQ0FBQztRQUVuQyxJQUFJLElBQUksQ0FBQyxhQUFhLEtBQUssSUFBSSxFQUFFO1lBQzdCLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDL0I7SUFDTCxDQUFDO0lBRUQsRUFBRSxDQUFDLFFBQWdCO1FBQ2YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUV6QyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRCxJQUFJO1FBQ0EsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsT0FBTztRQUNILElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVELFFBQVEsQ0FBQyxRQUFnQjtRQUNyQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzVELENBQUM7Q0FDSjs7O0FDckVNLE1BQU0sUUFBUTtJQUdqQjtRQUNJLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFTSxFQUFFLENBQUMsS0FBYSxFQUFFLFFBQWtCO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQzlCO1FBRUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVNLEdBQUcsQ0FBQyxLQUFhLEVBQUUsUUFBa0I7UUFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDeEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUM1QztRQUVELElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQ2hELFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FDcEMsQ0FBQztJQUNOLENBQUM7SUFFTSxJQUFJLENBQUMsS0FBYSxFQUFFLEdBQUcsSUFBVztRQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN4QixNQUFNLElBQUksS0FBSyxDQUFDLGdCQUFnQixLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQzVDO1FBRUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBUyxRQUFRO1lBQzNDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3RCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKOzs7QUNsQ3NDO0FBRWhDLE1BQU0sU0FBUztJQUNsQixZQUFZLFFBQVcsRUFBTztRQW1CdEIsYUFBUSxHQUE4RCxJQUFJLENBQUM7UUFFM0UsYUFBUSxHQUFZLEtBQUssQ0FBQztRQThDM0IsYUFBUSxHQUFHLENBQUMsU0FBcUIsRUFBRSxFQUFFO1lBQ3hDLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ1osT0FBTzthQUNWO1lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQztRQXhFRSxNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBRWhDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV6QyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQztRQUUvQixJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQy9CLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBa0JPLGVBQWUsQ0FBQyxRQUFrQjtRQUN0QyxRQUFRLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDekQsUUFBUSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDM0UsUUFBUSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ25FLFFBQVEsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ25GLFFBQVEsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFTyxJQUFJO1FBQ1IsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBRWxCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRU8sa0JBQWtCO1FBQ3RCLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFTSxpQkFBaUIsS0FBSSxDQUFDO0lBRTdCLHlCQUF5QixDQUFDLFFBQVcsRUFBRSxRQUFXO1FBQzlDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFaEUsSUFBSSxRQUFRLEVBQUU7WUFDVixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDdEQ7SUFDTCxDQUFDO0lBRUQscUJBQXFCLENBQUMsUUFBVyxFQUFFLFFBQVc7UUFDMUMsT0FBTyxRQUFRLEtBQUssUUFBUSxDQUFDO0lBQ2pDLENBQUM7SUFFTyxtQkFBbUI7UUFDdkIsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVNLGtCQUFrQjtJQUV6QixDQUFDO0lBVU8sT0FBTztRQUNYLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUU3QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLElBQUksSUFBSSxNQUFNLEtBQUssSUFBSSxFQUFFO1lBQzdELElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO1NBQzFCO2FBQU07WUFDSCxJQUFJLElBQUksQ0FBQyxRQUFRLFlBQVksV0FBVyxFQUFFO2dCQUN0QyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7YUFDMUI7U0FDSjtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2hCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNoRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztTQUN4QjthQUFNO1lBQ0gsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ25EO0lBQ0wsQ0FBQztJQUVNLE1BQU07UUFDVCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsSUFBVyxPQUFPO1FBQ2QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFFTSxVQUFVO1FBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3hCLENBQUM7SUFFTyxlQUFlLENBQUMsS0FBUTtRQUM1QixPQUFPLElBQUksS0FBSyxDQUFJLEtBQUssRUFBRTtZQUN2QixHQUFHLEVBQUUsQ0FBQyxNQUFTLEVBQUUsSUFBWSxFQUFFLEtBQTJDLEVBQUUsRUFBRTtnQkFFMUUsTUFBTSxRQUFRLHFCQUFRLElBQUksQ0FBQyxLQUFLLENBQUUsQ0FBQztnQkFFbEMsTUFBNkUsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBRTdGLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUVuRSxPQUFPLElBQUksQ0FBQztZQUNoQixDQUFDO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLElBQUksQ0FBQyxnQkFBd0IsT0FBTztRQUN2QyxJQUFJLElBQUksQ0FBQyxRQUFRLFlBQVksV0FBVyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sS0FBSyxNQUFNLEVBQUU7WUFDaEYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLGFBQWEsQ0FBQztZQUM1QyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDbkQ7SUFDTCxDQUFDO0lBRU0sSUFBSTtRQUNQLElBQUksSUFBSSxDQUFDLFFBQVEsWUFBWSxXQUFXLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxLQUFLLE1BQU0sRUFBRTtZQUNoRixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1lBQ3JDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNuRDtJQUNMLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxnQkFBd0IsT0FBTztRQUNuRCxJQUFJLElBQUksQ0FBQyxRQUFRLFlBQVksV0FBVyxFQUFFO1lBQ3RDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxLQUFLLE1BQU0sRUFBRTtnQkFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUM1QjtpQkFBTTtnQkFDSCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDZjtTQUNKO0lBQ0wsQ0FBQztJQUVNLFdBQVc7UUFDZCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVPLFVBQVU7UUFDZCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVNLFNBQVM7SUFFaEIsQ0FBQzs7QUFqSk0sZ0JBQU0sR0FBRztJQUNaLElBQUksRUFBRSxNQUFNO0lBQ1osUUFBUSxFQUFFLDBCQUEwQjtJQUNwQyxXQUFXLEVBQUUsYUFBYTtJQUMxQixTQUFTLEVBQUUsa0NBQWtDO0lBQzdDLFFBQVEsRUFBRSwyQkFBMkI7Q0FDeEMsQ0FBQzs7O0FDcEJtQztBQVF6QyxNQUFNLFNBQVM7SUFBZjtRQUNjLGFBQVEsR0FBdUMsSUFBSSxDQUFDO1FBRXZELFdBQU0sR0FBOEI7WUFDdkMsUUFBUSxFQUFFLE9BQU87WUFDakIsT0FBTyxFQUFFLE9BQU87WUFDaEIsUUFBUSxFQUFFLFFBQVE7U0FDckI7UUFFTSxhQUFRLEdBQUcsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBc0oxRSxDQUFDO0lBcEpXLGNBQWMsQ0FBSSxJQUE4QixFQUFFLEtBQXVCLEVBQUUsR0FBeUI7UUFDeEcsTUFBTSxNQUFNLEdBQUcsMkNBQTJDLENBQUM7UUFDM0QsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTs7WUFDakIsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEdBQUcsRUFBRSxFQUFFLEdBQUcsVUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsMENBQUUsTUFBMEMsQ0FBQztZQUU1RixJQUFJLEdBQUcsR0FBeUQsS0FBSyxDQUFDO1lBQ3RFLE1BQU0sS0FBSyxHQUFHLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDMUMsSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVMsRUFBRTtnQkFDakUsSUFBSSxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxVQUFVLEVBQUU7b0JBQ3JDLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUF5RCxDQUFDO2lCQUMvRTtxQkFBTTtvQkFDSCxNQUFNLEVBQUUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO29CQUMxQyxHQUFHLEdBQUcsR0FBRyxhQUFILEdBQUcsdUJBQUgsR0FBRyxDQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBVyxJQUFJLEVBQUUsQ0FBQyxDQUFDO2lCQUN6RDthQUNKO1lBRUQsSUFBSSxPQUFPLEdBQUcsS0FBSyxVQUFVLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ2xELElBQUksQ0FBQyxnQkFBZ0IsQ0FDakIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFDakIsR0FBNEYsQ0FDL0YsQ0FBQzthQUNMO2lCQUFNLElBQUksSUFBSSxLQUFLLE9BQU8sSUFBSSxHQUFHLEtBQUssU0FBUyxJQUFJLElBQUksWUFBWSxXQUFXLEVBQUU7Z0JBQzdFLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2hDO2lCQUFNLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtnQkFDNUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDbkM7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDeEM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTyxXQUFXLENBQTZCLE9BQTBCLEVBQUUsR0FBeUI7UUFDakcsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDN0IsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDO1lBQ3RCLE1BQU0sSUFBSSxHQUFHLENBQUMsT0FBTztpQkFDaEIsS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztpQkFDNUIsTUFBTSxDQUFXLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFFN0gsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLHNCQUFzQixFQUFFLENBQUM7WUFFbkQsS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUU7Z0JBQ2xCLE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBRTdDLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLEVBQUU7b0JBQ3hCLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLElBQUksQ0FBQyxRQUFRLEVBQUU7d0JBQ2pDLE1BQU0sSUFBSSxHQUFJLEdBQUcsQ0FBQyxDQUFDLENBQXNCLENBQUMsVUFBVSxFQUFFLENBQUM7d0JBQ3ZELElBQUksSUFBSSxLQUFLLElBQUksRUFBRTs0QkFDZixRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO3lCQUM5QjtxQkFDSjtvQkFDRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7d0JBQ3RCLEdBQUcsQ0FBQyxDQUFDLENBQXdCLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFOzRCQUN4QyxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUM7NEJBQzdCLElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtnQ0FDZixRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDOzZCQUM5Qjt3QkFDTCxDQUFDLENBQUMsQ0FBQztxQkFDTjtpQkFDSjtnQkFFRCxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBVyxJQUFJLEVBQUUsQ0FBQyxDQUFDO2FBQzdEO1lBRUQsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUMxQyxPQUFPLFFBQVEsQ0FBQzthQUNuQjtZQUVELE9BQU8sUUFBUSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMzQztRQUVELE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUUzQyxJQUFJLEdBQUcsS0FBSyxJQUFJLEVBQUU7WUFDZCxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztZQUVuRCxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUNsQixRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDcEQsQ0FBQyxDQUFDLENBQUM7WUFFSCxPQUFPLFFBQVEsQ0FBQztTQUNuQjtRQUVELE1BQU0sT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsNEJBQTRCLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFekksTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBRXhELElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtZQUNoQixJQUFJLENBQUMsY0FBYyxDQUFJLE9BQU8sRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDL0M7UUFFRCxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDdkIsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3RELENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVPLFdBQVcsQ0FBQyxRQUFrQjtRQUNsQyxNQUFNLEtBQUssR0FBRyxDQUFDLEdBQVcsRUFBRSxFQUFFLENBQUMsa0NBQWtDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVFLE1BQU0sWUFBWSxHQUFHLENBQUMsR0FBVyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzVFLE1BQU0sZUFBZSxHQUFHLENBQUMsR0FBVyxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFeEUsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLEtBQUssRUFBWSxDQUFDO1FBRWhELElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ3JCLE1BQU0sR0FBRyxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN2QyxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFDcEIsTUFBTSxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQztZQUV4QixJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxFQUFFO2dCQUNoQyxPQUFPLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7b0JBQ2pELFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2lCQUM3QztnQkFFRCxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDcEI7WUFFRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLENBQUM7U0FDbkQ7YUFBTSxJQUFJLFlBQVksS0FBSyxJQUFJLEVBQUU7WUFDOUIsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO1lBRXBCLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssRUFBRTtnQkFDMUIsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7YUFDN0M7WUFFRCxPQUFPLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxDQUFDO1NBQ2pFO2FBQU07WUFDSCxPQUFPLFlBQVksQ0FBQztTQUN2QjtJQUNMLENBQUM7SUFFTyxjQUFjLENBQUMsR0FBVztRQUM5QixNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQWEsQ0FBQztRQUU1RCxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVNLE9BQU8sQ0FBQyxHQUFXLEVBQUUsTUFBNEIsRUFBRTtRQUN0RCx1Q0FBdUM7UUFDdkMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUxQyxtQ0FBbUM7UUFDbkMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUV4QywwQkFBMEI7UUFDMUIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN2QyxDQUFDO0NBQ0o7QUFFRCxNQUFNLGtCQUFtQixTQUFRLFNBQVM7SUFBMUM7O1FBQ2MsYUFBUSxHQUFHLFNBQW1ELENBQUM7SUFDN0UsQ0FBQztDQUFBO0FBRU0sTUFBTSxTQUFTLEdBQUcsSUFBSSxrQkFBa0IsRUFBRSxDQUFDOzs7QUM3SzNDLE1BQU0sUUFBUSxHQUFHOzs7Ozs7Ozs7Q0FTdkIsQ0FBQzs7O0FDVDhDO0FBQ0E7QUFDVjtBQUcvQixNQUFNLEdBQUksU0FBUSxTQUFpQjtJQUN0QyxNQUFNO1FBQ0YsT0FBTyxpQkFBaUIsQ0FBQyxRQUFRLG9CQUFPLElBQUksQ0FBQyxLQUFLLEVBQUcsQ0FBQztJQUMxRCxDQUFDO0NBQ0o7OztBQ1R5QztBQUVuQyxNQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsQ0FBQztJQUM1QixJQUFJLEVBQUUsR0FBRztDQUNaLENBQUMsQ0FBQzs7O0FDSnVDO0FBRW5DLE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDO0lBQzVCLElBQUksRUFBRSxHQUFHO0NBQ1osQ0FBQyxDQUFDOzs7QUNKSSxNQUFNLGlCQUFRLEdBQUc7Ozs7Ozs7Q0FPdkIsQ0FBQzs7O0FDUDhDO0FBQ0E7QUFDVjtBQUcvQixNQUFNLElBQUssU0FBUSxTQUFnQjtJQUN0QyxNQUFNO1FBQ0YsT0FBTyxpQkFBaUIsQ0FBQyxpQkFBUSxvQkFBTyxJQUFJLENBQUMsS0FBSyxFQUFHLENBQUM7SUFDMUQsQ0FBQztDQUNKOzs7QUNUTSxNQUFNLG1DQUFRLEdBQUc7Ozs7Q0FJdkIsQ0FBQzs7O0FDSjhDO0FBQ0E7QUFDVjtBQUcvQixNQUFNLGlCQUFrQixTQUFRLFNBQTZCO0lBQ2hFLE1BQU07UUFDRixPQUFPLGlCQUFpQixDQUFDLG1DQUFRLG9CQUFPLElBQUksQ0FBQyxLQUFLLEVBQUcsQ0FBQztJQUMxRCxDQUFDO0NBQ0o7OztBQ1RNLE1BQU0sNkJBQVEsR0FBRzs7OztDQUl2QixDQUFDOzs7QUNKOEM7QUFDQTtBQUNWO0FBSS9CLE1BQU0sV0FBWSxTQUFRLFNBQXVCO0lBQ3BELE1BQU07UUFDRixPQUFPLGlCQUFpQixDQUFDLDZCQUFRLG9CQUFPLElBQUksQ0FBQyxLQUFLLEVBQUcsQ0FBQztJQUMxRCxDQUFDO0NBQ0o7OztBQ1ZNLE1BQU0saUNBQVEsR0FBRzs7Ozs7Q0FLdkIsQ0FBQzs7O0FDTDhDO0FBQ0E7QUFDVjtBQUcvQixNQUFNLGVBQWdCLFNBQVEsU0FBMkI7SUFDNUQsTUFBTTtRQUNGLE9BQU8saUJBQWlCLENBQUMsaUNBQVEsb0JBQU8sSUFBSSxDQUFDLEtBQUssRUFBRyxDQUFDO0lBQzFELENBQUM7Q0FDSjs7O0FDVE0sTUFBTSxrQ0FBUSxHQUFHOzs7O0NBSXZCLENBQUM7OztBQ0o4QztBQUNBO0FBQ1Y7QUFHL0IsTUFBTSxnQkFBaUIsU0FBUSxTQUE0QjtJQUFsRTs7UUFrQkksZUFBVSxHQUFHLEdBQUcsRUFBRTtZQUNkLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNoQixDQUFDO0lBbUJMLENBQUM7SUF0Q1UsYUFBYSxDQUFDLENBQW1CO1FBQ3BDLE9BQU8sQ0FBQyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDO0lBQ2pFLENBQUM7SUFFTSxhQUFhLENBQUMsQ0FBbUI7UUFDcEMsT0FBTyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUM7SUFDaEUsQ0FBQztJQUVELE1BQU07UUFDRixNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRXJDLE9BQU8saUJBQWlCLENBQUMsa0NBQVEsRUFBRTtZQUMvQixPQUFPO1lBQ1AsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFO1NBQ2pFLENBQUMsQ0FBQztJQUNQLENBQUM7SUFNRCxpQkFBaUI7UUFDYixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVELGtCQUFrQjtRQUNkLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUVoQyxJQUFJLEtBQUssWUFBWSxXQUFXLEVBQUU7WUFDOUIsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDWixJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxLQUFLLE1BQU0sRUFBRTtvQkFDaEMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7aUJBQzFEO3FCQUFNO29CQUNILFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2lCQUN2RDtZQUNMLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNUO0lBQ0wsQ0FBQztDQUNKOzs7QUM1Q00sTUFBTSxpQ0FBUSxHQUFHOzs7Ozs7Ozs7O0NBVXZCLENBQUM7OztBQ1Y4QztBQUNBO0FBQ1Y7QUFJL0IsTUFBTSxlQUFnQixTQUFRLFNBQTJCO0lBQzVELE1BQU07UUFDRixPQUFPLGlCQUFpQixDQUFDLGlDQUFRLG9CQUFPLElBQUksQ0FBQyxLQUFLLEVBQUcsQ0FBQztJQUMxRCxDQUFDO0NBQ0o7OztBQ1ZNLE1BQU0sZ0NBQVEsR0FBRzs7Ozs7Q0FLdkIsQ0FBQzs7O0FDTDhDO0FBQ0E7QUFDVjtBQUcvQixNQUFNLGNBQWUsU0FBUSxTQUEwQjtJQUMxRCxZQUFZLEtBQXNCO1FBQzlCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUtWLFlBQU8sR0FBVyxFQUFFLENBQUM7UUFIeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUNwQyxDQUFDO0lBSUQsTUFBTTtRQUNGLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUV2QyxPQUFPLGlCQUFpQixDQUFDLGdDQUFRLEVBQUU7WUFDL0IsS0FBSztZQUNMLFFBQVEsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFTLEVBQUUsRUFBRTtnQkFDNUIsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLE1BQTBCLENBQUM7Z0JBRTdDLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBQ3pCLENBQUM7WUFDRCxRQUFRLEVBQUUsQ0FBQyxDQUFRLEVBQUUsRUFBRTtnQkFDbkIsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO2dCQUNuQixJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssRUFBRSxFQUFFO29CQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7b0JBQzFDLFFBQVEsRUFBRSxDQUFDO2lCQUNkO1lBQ0wsQ0FBQztTQUNKLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxpQkFBaUI7UUFDYixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVELGtCQUFrQjs7UUFDZCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFO1FBQ2pDLElBQUksT0FBTyxZQUFZLFdBQVcsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sS0FBSyxNQUFNLEVBQUU7WUFDcEUsYUFBTyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsMENBQUUsTUFBTSxHQUFHO1NBQzVDO0lBQ0wsQ0FBQztDQUNKOzs7QUM1Q00sTUFBTSw0QkFBUSxHQUFHOzs7OztDQUt2QixDQUFDOzs7QUNMOEM7QUFDQTtBQUNWO0FBRy9CLE1BQU0sVUFBVyxTQUFRLFNBQXNCO0lBQ2xELE1BQU07UUFDRixPQUFPLGlCQUFpQixDQUFDLDRCQUFRLG9CQUFPLElBQUksQ0FBQyxLQUFLLEVBQUcsQ0FBQztJQUMxRCxDQUFDO0NBQ0o7OztBQ1RNLE1BQU0sMEJBQVEsR0FBRzs7Ozs7Ozs7Ozs7Ozs7Q0FjdkIsQ0FBQzs7O0FDZDhDO0FBQ0E7QUFDVjtBQUkvQixNQUFNLFFBQVMsU0FBUSxTQUFvQjtJQUM5QyxNQUFNO1FBQ0YsT0FBTyxpQkFBaUIsQ0FBQywwQkFBUSxvQkFBTyxJQUFJLENBQUMsS0FBSyxFQUFHLENBQUM7SUFDMUQsQ0FBQztDQUNKOzs7QUNWTSxNQUFNLDRCQUFRLEdBQUc7Ozs7Q0FJdkIsQ0FBQzs7O0FDSjhDO0FBQ0E7QUFDVjtBQUcvQixNQUFNLFVBQVcsU0FBUSxTQUFzQjtJQUNsRCxNQUFNO1FBQ0YsT0FBTyxpQkFBaUIsQ0FBQyw0QkFBUSxvQkFBTyxJQUFJLENBQUMsS0FBSyxFQUFHLENBQUM7SUFDMUQsQ0FBQztDQUNKOzs7QUNUTSxNQUFNLHlDQUFRLEdBQUc7Ozs7Q0FJdkIsQ0FBQzs7O0FDSjhDO0FBQ0E7QUFDVjtBQUcvQixNQUFNLHVCQUF3QixTQUFRLFNBQW1DO0lBQzVFLE1BQU07UUFDRixPQUFPLGlCQUFpQixDQUFDLHlDQUFRLG9CQUFPLElBQUksQ0FBQyxLQUFLLEVBQUcsQ0FBQztJQUMxRCxDQUFDO0NBQ0o7OztBQ1RNLE1BQU0sdUJBQVEsR0FBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQW1CdkIsQ0FBQzs7O0FDbkI4QztBQUNBO0FBQ1Y7QUFHL0IsTUFBTSxLQUFNLFNBQVEsU0FBaUI7SUFDeEMsTUFBTTtRQUNGLE9BQU8saUJBQWlCLENBQUMsdUJBQVEsb0JBQU8sSUFBSSxDQUFDLEtBQUssRUFBRyxDQUFDO0lBQzFELENBQUM7Q0FDSjs7O0FDVE0sTUFBTSw2QkFBUSxHQUFHOzs7Ozs7Q0FNdkIsQ0FBQzs7O0FDTjhDO0FBQ0E7QUFDVjtBQUUvQixNQUFNLFdBQVksU0FBUSxTQUFhO0lBQzFDLE1BQU07UUFDRixPQUFPLGlCQUFpQixDQUFDLDZCQUFRLENBQUMsQ0FBQztJQUN2QyxDQUFDO0NBQ0o7OztBQ1JNLE1BQU0sNEJBQVEsR0FBRzs7Ozs7Q0FLdkIsQ0FBQzs7O0FDTDhDO0FBQ0E7QUFDVjtBQUUvQixNQUFNLFVBQVcsU0FBUSxTQUFhO0lBQ3pDLE1BQU07UUFDRixPQUFPLGlCQUFpQixDQUFDLDRCQUFRLENBQUMsQ0FBQztJQUN2QyxDQUFDO0NBQ0o7OztBQ1JNLE1BQU0sNEJBQVEsR0FBRzs7Ozs7Q0FLdkIsQ0FBQzs7O0FDTDhDO0FBQ0E7QUFDVjtBQUUvQixNQUFNLFVBQVcsU0FBUSxTQUFhO0lBQ3pDLE1BQU07UUFDRixPQUFPLGlCQUFpQixDQUFDLDRCQUFRLENBQUMsQ0FBQztJQUN2QyxDQUFDO0NBQ0o7OztBQ1JNLE1BQU0sMEJBQVEsR0FBRzs7Ozs7OztDQU92QixDQUFDOzs7QUNQSyxNQUFNLDZCQUFRLEdBQUc7Ozs7Q0FJdkIsQ0FBQzs7O0FDSjhDO0FBQ0E7QUFDVjtBQUcvQixNQUFNLFdBQVksU0FBUSxTQUF1QjtJQUNwRCxNQUFNO1FBQ0YsT0FBTyxpQkFBaUIsQ0FBQyw2QkFBUSxvQkFBTyxJQUFJLENBQUMsS0FBSyxFQUFHLENBQUM7SUFDMUQsQ0FBQztDQUNKOzs7QUNUTSxNQUFNLHlCQUFRLEdBQUc7Ozs7Ozs7O0NBUXZCLENBQUM7OztBQ1JLLE1BQU0sMEJBQVEsR0FBRzs7Ozs7Q0FLdkIsQ0FBQzs7O0FDTDhDO0FBQ0E7QUFDVjtBQUUvQixNQUFNLFFBQVMsU0FBUSxTQUFhO0lBQ3ZDLE1BQU07UUFDRixPQUFPLGlCQUFpQixDQUFDLDBCQUFRLENBQUMsQ0FBQztJQUN2QyxDQUFDO0NBQ0o7OztBQ1JNLE1BQU0sMEJBQVEsR0FBRzs7Ozs7O0NBTXZCLENBQUM7OztBQ044QztBQUNBO0FBQ1Y7QUFFL0IsTUFBTSxRQUFTLFNBQVEsU0FBYTtJQUN2QyxNQUFNO1FBQ0YsT0FBTyxpQkFBaUIsQ0FBQywwQkFBUSxDQUFDLENBQUM7SUFDdkMsQ0FBQztDQUNKOzs7QUNSK0M7QUFDQTtBQUNWO0FBRVc7QUFDQTtBQUUxQyxNQUFNLE9BQVEsU0FBUSxTQUFtQjtJQUtyQyxrQkFBa0IsQ0FBQyxNQUFnQjtRQUN0QyxPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0lBRU0sa0JBQWtCLENBQUMsSUFBNkIsRUFBRSxNQUF3QjtRQUM3RSxPQUFPLElBQUksS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQ3pCLE1BQU0sS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FDakMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzFDLENBQ0osQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ1gsQ0FBQztJQUVNLGdCQUFnQixDQUFDLElBQTZCO1FBQ2pELE9BQU8sSUFBSSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQzlDLElBQUksS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ2hELENBQUM7SUFDTixDQUFDO0lBRU0sV0FBVyxDQUFDLElBQTZCLEVBQUUsTUFBd0I7UUFDdEUsT0FBTyxJQUFJLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUN6QixNQUFNLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUNoQyxNQUFNLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ3pDLENBQ0osQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ1gsQ0FBQztJQUVNLFNBQVM7UUFDWixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFFTSxNQUFNO1FBQ1QsTUFBTSxFQUNGLE1BQU0sRUFDTixPQUFPLEVBQ1AsTUFBTSxFQUNOLElBQUksRUFDSixJQUFJLEdBQ1AsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRWYsT0FBTyxpQkFBaUIsQ0FBQyx5QkFBUSxFQUFFO1lBQy9CLFNBQVMsRUFBRSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN2SCxPQUFPO1lBQ1AsSUFBSTtZQUNKLFFBQVEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUM7U0FDM0MsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKOzs7QUMzRE0sTUFBTSxnQ0FBUSxHQUFHOztDQUV2QixDQUFDOzs7QUNGOEM7QUFDQTtBQUNWO0FBRy9CLE1BQU0sY0FBZSxTQUFRLFNBQTBCO0lBQzFELE1BQU07UUFDRixNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDbEMsT0FBTyxpQkFBaUIsQ0FBQyxnQ0FBUSxFQUFFO1lBQy9CLElBQUk7WUFDSixtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxFQUFFO1NBQzFELENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjs7O0FDYk0sTUFBTSwrQkFBUSxHQUFHOzs7OztDQUt2QixDQUFDOzs7QUNMOEM7QUFDQTtBQUNWO0FBRy9CLE1BQU0sYUFBYyxTQUFRLFNBQXlCO0lBQ3hELE1BQU07UUFDRixPQUFPLGlCQUFpQixDQUFDLCtCQUFRLG9CQUFPLElBQUksQ0FBQyxLQUFLLEVBQUcsQ0FBQztJQUMxRCxDQUFDO0NBQ0o7OztBQ1QrQztBQUNBO0FBQ1Y7QUFDTztBQUNSO0FBQ2M7QUFDRjtBQUUxQyxNQUFNLFFBQVMsU0FBUSxTQUFhO0lBQTNDOztRQUNJLGFBQVEsR0FBZ0IsRUFBRSxDQUFDO0lBK0MvQixDQUFDO0lBN0NHLFNBQVM7UUFDTCxJQUFJLENBQUMsUUFBUSxHQUFHO1lBQ1osSUFBSSxXQUFXLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUM7WUFDcEMsSUFBSSxPQUFPLENBQUM7Z0JBQ1IsT0FBTyxFQUFFO29CQUNMLElBQUksY0FBYyxDQUFDO3dCQUNmLElBQUksRUFBRSw0V0FBNFc7cUJBQ3JYLENBQUM7b0JBQ0YsSUFBSSxjQUFjLENBQUM7d0JBQ2YsSUFBSSxFQUFFLElBQUk7d0JBQ1YsSUFBSSxFQUFFLDRNQUE0TTtxQkFDck4sQ0FBQztpQkFDTDtnQkFDRCxJQUFJLEVBQUUsT0FBTztnQkFDYixJQUFJLEVBQUUsVUFBVTthQUNuQixDQUFDO1lBQ0YsSUFBSSxPQUFPLENBQUM7Z0JBQ1IsTUFBTSxFQUFFLElBQUk7Z0JBQ1osT0FBTyxFQUFFO29CQUNMLElBQUksYUFBYSxDQUFDO3dCQUNkLEdBQUcsRUFBRSxXQUFXO3dCQUNoQixHQUFHLEVBQUUsbUJBQW1CO3dCQUN4QixNQUFNLEVBQUUsb0JBQW9CO3FCQUMvQixDQUFDO2lCQUNMO2dCQUNELElBQUksRUFBRSxPQUFPO2dCQUNiLElBQUksRUFBRSxVQUFVO2FBQ25CLENBQUM7WUFDRixJQUFJLE9BQU8sQ0FBQztnQkFDUixPQUFPLEVBQUU7b0JBQ0wsSUFBSSxjQUFjLENBQUM7d0JBQ2YsSUFBSSxFQUFFLElBQUk7d0JBQ1YsSUFBSSxFQUFFLFFBQVE7cUJBQ2pCLENBQUM7aUJBQ0w7Z0JBQ0QsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsSUFBSSxFQUFFLE9BQU87Z0JBQ2IsSUFBSSxFQUFFLFVBQVU7YUFDbkIsQ0FBQztTQUNMLENBQUM7SUFDTixDQUFDO0lBRUQsTUFBTTtRQUNGLE9BQU8saUJBQWlCLENBQUMsMEJBQVEsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNwRSxDQUFDO0NBQ0o7OztBQ3hETSxNQUFNLDZCQUFRLEdBQUc7Ozs7Ozs7Ozs7Ozs7O0NBY3ZCLENBQUM7OztBQ2RLLE1BQU0sNEJBQVEsR0FBRzs7Ozs7O0NBTXZCLENBQUM7OztBQ044QztBQUNBO0FBQ1Y7QUFFL0IsTUFBTSxVQUFXLFNBQVEsU0FBYTtJQUN6QyxNQUFNO1FBQ0YsT0FBTyxpQkFBaUIsQ0FBQyw0QkFBUSxDQUFDLENBQUM7SUFDdkMsQ0FBQztDQUNKOzs7QUNSTSxNQUFNLDJCQUFRLEdBQUc7Ozs7Q0FJdkIsQ0FBQzs7O0FDSjhDO0FBQ0E7QUFDVjtBQUUvQixNQUFNLFNBQVUsU0FBUSxTQUFhO0lBQ3hDLE1BQU07UUFDRixPQUFPLGlCQUFpQixDQUFDLDJCQUFRLENBQUMsQ0FBQztJQUN2QyxDQUFDO0NBQ0o7OztBQ1JNLE1BQU0sMEJBQVEsR0FBRzs7OztDQUl2QixDQUFDOzs7QUNKOEM7QUFDQTtBQUNWO0FBRS9CLE1BQU0sUUFBUyxTQUFRLFNBQWE7SUFDdkMsTUFBTTtRQUNGLE9BQU8saUJBQWlCLENBQUMsMEJBQVEsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Q0FDSjs7O0FDUk0sTUFBTSw4QkFBUSxHQUFHOzs7O0NBSXZCLENBQUM7OztBQ0o4QztBQUNBO0FBQ1Y7QUFFL0IsTUFBTSxZQUFhLFNBQVEsU0FBYTtJQUMzQyxNQUFNO1FBQ0YsT0FBTyxpQkFBaUIsQ0FBQyw4QkFBUSxDQUFDLENBQUM7SUFDdkMsQ0FBQztDQUNKOzs7QUNSK0M7QUFDQTtBQUNWO0FBQ21CO0FBQ0Y7QUFDRjtBQUNSO0FBQ1E7QUFDRjtBQUNGO0FBQ1E7QUFFbEQsTUFBTSxXQUFZLFNBQVEsU0FBYTtJQUE5Qzs7UUFLVyxZQUFPLEdBQVcsRUFBRSxDQUFDO0lBMERoQyxDQUFDO0lBeERVLFNBQVM7UUFDWixJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQztZQUMvQyxPQUFPLEVBQUUsSUFBSSxXQUFXLENBQUM7Z0JBQ3JCLE9BQU8sRUFBRTtvQkFDTCxJQUFJLGVBQWUsQ0FBQzt3QkFDaEIsSUFBSSxFQUFFLElBQUksU0FBUyxFQUFFO3dCQUNyQixLQUFLLEVBQUUsZ0JBQWdCO3dCQUN2QixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQztxQkFDL0MsQ0FBQztvQkFDRixJQUFJLGVBQWUsQ0FBQzt3QkFDaEIsSUFBSSxFQUFFLElBQUksUUFBUSxFQUFFO3dCQUNwQixLQUFLLEVBQUUsTUFBTTt3QkFDYixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7cUJBQ3JDLENBQUM7b0JBQ0YsSUFBSSxlQUFlLENBQUM7d0JBQ2hCLElBQUksRUFBRSxJQUFJLFlBQVksRUFBRTt3QkFDeEIsS0FBSyxFQUFFLFNBQVM7d0JBQ2hCLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQztxQkFDeEMsQ0FBQztpQkFDTDthQUNKLENBQUM7WUFDRixDQUFDLEVBQUUsTUFBTTtZQUNULENBQUMsRUFBRSxLQUFLO1NBQ1gsQ0FBQyxDQUFDO1FBR0gsTUFBTSw0QkFBNEIsR0FBRyxHQUFHLEVBQUU7WUFDdEMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDbkQsQ0FBQztRQUVELElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLGlCQUFpQixDQUFDO1lBQ2pELFNBQVMsRUFBRSxzQkFBc0I7WUFDakMsSUFBSSxFQUFFLElBQUksVUFBVSxFQUFFO1lBQ3RCLE9BQU8sRUFBRSw0QkFBNEI7WUFDckMsS0FBSyxFQUFFLG1CQUFtQjtTQUM3QixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsTUFBTTtRQUNGLE9BQU8saUJBQWlCLENBQUMsNkJBQVEsRUFBRTtZQUMvQixXQUFXLEVBQUUsSUFBSSxDQUFDLHNCQUFzQjtZQUN4QyxZQUFZLEVBQUUsSUFBSSxDQUFDLHVCQUF1QjtZQUMxQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBUyxFQUFFLEVBQUU7Z0JBQzVCLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxNQUEwQixDQUFDO2dCQUU3QyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUN6QixDQUFDO1lBQ0QsUUFBUSxFQUFFLENBQUMsQ0FBUSxFQUFFLEVBQUU7Z0JBQ25CLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDbkIsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLEVBQUUsRUFBRTtvQkFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO29CQUN4QyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7aUJBQ3RCO1lBQ0wsQ0FBQztTQUNKLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjs7O0FDM0VNLE1BQU0saUNBQVEsR0FBRzs7Ozs7Ozs7Q0FRdkIsQ0FBQzs7O0FDUjhDO0FBQ0E7QUFDVjtBQUUvQixNQUFNLGVBQWdCLFNBQVEsU0FBYTtJQUFsRDs7UUFZSSxlQUFVLEdBQUcsR0FBRyxFQUFFO1lBQ2QsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2hCLENBQUM7SUFtQkwsQ0FBQztJQWhDRyxNQUFNO1FBQ0YsT0FBTyxpQkFBaUIsQ0FBQyxpQ0FBUSxFQUFFO1lBQy9CLFFBQVEsRUFBRSxHQUFHLEVBQUU7Z0JBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMxQixDQUFDO1lBQ0QsU0FBUyxFQUFFLEdBQUcsRUFBRTtnQkFDWixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzNCLENBQUM7U0FDSixDQUFDO0lBQ04sQ0FBQztJQU1ELGlCQUFpQjtRQUNiLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRUQsa0JBQWtCO1FBQ2QsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBRWhDLElBQUksS0FBSyxZQUFZLFdBQVcsRUFBRTtZQUM5QixVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUNaLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEtBQUssTUFBTSxFQUFFO29CQUNoQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztpQkFDMUQ7cUJBQU07b0JBQ0gsUUFBUSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7aUJBQ3ZEO1lBQ0wsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ1Q7SUFDTCxDQUFDO0NBQ0o7OztBQ3JDTSxNQUFNLGFBQWEsR0FBRyxDQUFDO1FBQzFCLFNBQVMsRUFBRSx5QkFBeUI7UUFDcEMsU0FBUyxFQUFFLG9CQUFvQjtRQUMvQixlQUFlLEVBQUUsYUFBYTtRQUM5QixRQUFRLEVBQUUsUUFBUTtRQUNsQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLFVBQVUsRUFBRSxDQUFDO0tBQ2hCLEVBQUU7UUFDQyxTQUFTLEVBQUUsd0JBQXdCO1FBQ25DLFNBQVMsRUFBRSxvQkFBb0I7UUFDL0IsZUFBZSxFQUFFLFFBQVE7UUFDekIsUUFBUSxFQUFFLFVBQVU7UUFDcEIsT0FBTyxFQUFFLE9BQU87UUFDaEIsSUFBSSxFQUFFLE9BQU87S0FDaEIsRUFBRTtRQUNDLFNBQVMsRUFBRSxzQkFBc0I7UUFDakMsU0FBUyxFQUFFLG9CQUFvQjtRQUMvQixlQUFlLEVBQUUscUZBQXFGO1FBQ3RHLFFBQVEsRUFBRSxNQUFNO1FBQ2hCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxPQUFPO1FBQ2IsVUFBVSxFQUFFLENBQUM7S0FDaEIsRUFBRTtRQUNDLFNBQVMsRUFBRSx5QkFBeUI7UUFDcEMsU0FBUyxFQUFFLG9CQUFvQjtRQUMvQixlQUFlLEVBQUUsUUFBUTtRQUN6QixRQUFRLEVBQUUsT0FBTztRQUNqQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsSUFBSTtLQUNiLEVBQUU7UUFDQyxTQUFTLEVBQUUsMEJBQTBCO1FBQ3JDLFNBQVMsRUFBRSxvQkFBb0I7UUFDL0IsZUFBZSxFQUFFLDRGQUE0RjtRQUM3RyxRQUFRLEVBQUUsWUFBWTtRQUN0QixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsSUFBSTtLQUNiLEVBQUU7UUFDQyxTQUFTLEVBQUUsdUJBQXVCO1FBQ2xDLFNBQVMsRUFBRSxvQkFBb0I7UUFDL0IsZUFBZSxFQUFFLGtHQUFrRztRQUNuSCxRQUFRLEVBQUUsU0FBUztRQUNuQixPQUFPLEVBQUUsT0FBTztRQUNoQixJQUFJLEVBQUUsSUFBSTtLQUNiLEVBQUU7UUFDQyxTQUFTLEVBQUUsZ0NBQWdDO1FBQzNDLFNBQVMsRUFBRSxvQkFBb0I7UUFDL0IsZUFBZSxFQUFFLHNGQUFzRjtRQUN2RyxRQUFRLEVBQUUsa0JBQWtCO1FBQzVCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxJQUFJO0tBQ2IsRUFBRTtRQUNDLFNBQVMsRUFBRSxvQkFBb0I7UUFDL0IsU0FBUyxFQUFFLG9CQUFvQjtRQUMvQixlQUFlLEVBQUUsZ0hBQWdIO1FBQ2pJLFFBQVEsRUFBRSxNQUFNO1FBQ2hCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLElBQUksRUFBRSxhQUFhO0tBQ3RCLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7QUMxRHVDO0FBQzBCO0FBQ1o7QUFDUTtBQUNFO0FBQ0Y7QUFDRjtBQUNSO0FBQ0o7QUFDSTtBQUMwQjtBQUNwQztBQUNRO0FBQ0Y7QUFDQTtBQUNBO0FBQ007QUFDUTtBQUNWO0FBR3RELE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxFQUFFO0lBQzFCLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4QyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUVELE1BQU0saUJBQWlCLEdBQUcsR0FBRyxFQUFFO0lBQzNCLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBRUQsTUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztBQUNwQyxNQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO0FBRXBDLE1BQU0sV0FBVyxHQUFHLElBQUksV0FBVyxDQUFDO0lBQ2hDLE9BQU8sRUFBRTtRQUNMLElBQUksZUFBZSxDQUFDO1lBQ2hCLElBQUksRUFBRSxVQUFVO1lBQ2hCLEtBQUssRUFBRSxlQUFlO1lBQ3RCLE9BQU8sRUFBRSxnQkFBZ0I7U0FDNUIsQ0FBQztRQUNGLElBQUksZUFBZSxDQUFDO1lBQ2hCLElBQUksRUFBRSxVQUFVO1lBQ2hCLEtBQUssRUFBRSxTQUFTO1lBQ2hCLE9BQU8sRUFBRSxpQkFBaUI7U0FDN0IsQ0FBQztLQUNMO0NBQ0osQ0FBQyxDQUFDO0FBRUgsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLGdCQUFnQixDQUFDO0lBQzFDLE9BQU8sRUFBRSxXQUFXO0lBQ3BCLENBQUMsRUFBRSxPQUFPO0lBQ1YsQ0FBQyxFQUFFLFFBQVE7Q0FDZCxDQUFDLENBQUM7QUFFSCxNQUFNLHNCQUFzQixHQUFHLEdBQUcsRUFBRTtJQUNoQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0FBQ3hDLENBQUM7QUFFRCxNQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBRXRDLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQztJQUM1QyxTQUFTLEVBQUUsc0JBQXNCO0lBQ2pDLElBQUksRUFBRSxXQUFXO0lBQ2pCLE9BQU8sRUFBRSxzQkFBc0I7SUFDL0IsS0FBSyxFQUFFLGtCQUFrQjtDQUM1QixDQUFDLENBQUM7QUFFSCxNQUFNLGNBQWMsR0FBRyxJQUFJLGNBQWMsQ0FBQztJQUN0QyxRQUFRLEVBQUUsZ0JBQWdCO0lBQzFCLEtBQUssRUFBRSxPQUFPO0NBQ2pCLENBQUMsQ0FBQztBQUVILE1BQU0sZUFBZSxHQUFHLElBQUksZUFBZSxDQUFDO0lBQ3hDLFNBQVMsRUFBRSx5QkFBeUI7SUFDcEMsU0FBUyxFQUFFLG9CQUFvQjtJQUMvQixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLFFBQVEsRUFBRSxPQUFPO0lBQ2pCLE1BQU0sRUFBRSxtQkFBbUI7Q0FDOUIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLENBQUM7SUFDOUIsY0FBYztJQUNkLGVBQWU7Q0FDbEIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztBQUVoQyxNQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBRXRDLE1BQU0sZUFBZSxHQUFHLElBQUksZUFBZSxFQUFFLENBQUM7QUFFOUMsTUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUU7SUFDeEIsVUFBVTtJQUNWLFdBQVcsRUFBRSxlQUFlO0lBQzVCLFFBQVE7SUFDUixXQUFXO0NBQ2QsQ0FBQyxDQUFDO0FBRUgsTUFBTSxTQUFTLEdBQWUsaUJBQWlCLENBQUMsQ0FBQyxFQUE4RCxFQUFFLEVBQUU7UUFBbEUsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLGVBQWUsT0FBZ0IsRUFBWCxTQUFTLGNBQTVELG9EQUE4RCxDQUFGO0lBQ3pHLE1BQU0sS0FBSyxxQkFBNEIsU0FBUyxDQUFFLENBQUM7SUFFbkQsSUFBSSxVQUFVLEtBQUssU0FBUyxFQUFFO1FBQzFCLEtBQUssQ0FBQyxVQUFVLEdBQUcsSUFBSSxVQUFVLENBQUMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztLQUM1RDtJQUNELElBQUksZUFBZSxLQUFLLFNBQVMsRUFBRTtRQUMvQixLQUFLLENBQUMsV0FBVyxHQUFHLGVBQWUsQ0FBQztLQUN2QztTQUFNLElBQUksZUFBZSxLQUFLLFNBQVMsRUFBRTtRQUN0QyxLQUFLLENBQUMsV0FBVyxHQUFHLElBQUksdUJBQXVCLENBQUMsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQztLQUNqRjtJQUVELE9BQU8sSUFBSSxRQUFRLENBQUMsa0JBQUssS0FBSyxDQUFlLENBQUMsQ0FBQztBQUNuRCxDQUFDLENBQUMsQ0FBQztBQUVJLE1BQU0sSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDO0lBQzFCLFNBQVM7SUFDVCxPQUFPLEVBQUUsU0FBUztJQUNsQixRQUFRLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBUyxFQUFFLEVBQUU7UUFDNUIsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLE1BQTBCLENBQUM7UUFFN0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUNELFNBQVMsRUFBRSxZQUFZO0NBQzFCLENBQUMsQ0FBQzs7O0FDM0hJLE1BQU0sNEJBQVEsR0FBRzs7OztDQUl2QixDQUFDOzs7QUNKOEM7QUFDQTtBQUNWO0FBRS9CLE1BQU0sVUFBVyxTQUFRLFNBQWE7SUFDekMsTUFBTTtRQUNGLE9BQU8saUJBQWlCLENBQUMsNEJBQVEsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Q0FDSjs7Ozs7Ozs7Ozs7Ozs7QUNSMkM7QUFDTTtBQUNJO0FBQ0M7QUFDeUI7QUFDMUI7QUFHdEQsTUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztBQUVwQyxNQUFNLGVBQVMsR0FBZSxpQkFBaUIsQ0FBQyxDQUFDLEVBQThELEVBQUUsRUFBRTtRQUFsRSxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsZUFBZSxPQUFnQixFQUFYLFNBQVMsa0JBQTVELG9EQUE4RCxDQUFGO0lBQ3pHLE1BQU0sS0FBSyxxQkFBNEIsU0FBUyxDQUFFLENBQUM7SUFFbkQsSUFBSSxVQUFVLEtBQUssU0FBUyxFQUFFO1FBQzFCLEtBQUssQ0FBQyxVQUFVLEdBQUcsSUFBSSxVQUFVLENBQUMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztLQUM1RDtJQUNELElBQUksZUFBZSxLQUFLLFNBQVMsRUFBRTtRQUMvQixLQUFLLENBQUMsV0FBVyxHQUFHLGVBQWUsQ0FBQztLQUN2QztTQUFNLElBQUksZUFBZSxLQUFLLFNBQVMsRUFBRTtRQUN0QyxLQUFLLENBQUMsV0FBVyxHQUFHLElBQUksdUJBQXVCLENBQUMsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQztLQUNqRjtJQUVELE9BQU8sSUFBSSxRQUFRLENBQUMsa0JBQUssS0FBSyxDQUFlLENBQUMsQ0FBQztBQUNuRCxDQUFDLENBQUMsQ0FBQztBQUVJLE1BQU0sS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDO0lBQzNCLFNBQVM7SUFDVCxPQUFPLEVBQUUsVUFBVTtJQUNuQixRQUFRLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBUyxFQUFFLEVBQUU7UUFDNUIsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLE1BQTBCLENBQUM7UUFFN0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUNELFNBQVMsRUFBRSxZQUFZO0NBQzFCLENBQUMsQ0FBQzs7O0FDbENJLE1BQU0seUJBQVEsR0FBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBcUJ2QixDQUFDOzs7Ozs7Ozs7Ozs7OztBQ3JCOEM7QUFDQTtBQUNWO0FBRy9CLE1BQU0sT0FBUSxTQUFRLFNBQW1CO0lBQzVDLE1BQU07UUFDRixNQUFNLEtBQXNCLElBQUksQ0FBQyxLQUFLLEVBQWhDLEVBQUUsSUFBSSxPQUEwQixFQUFyQixNQUFNLG9CQUFqQixRQUFtQixDQUFhLENBQUM7UUFFdkMsT0FBTyxpQkFBaUIsQ0FBQyx5QkFBUSxrQ0FDMUIsTUFBTSxLQUNULFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUN2QyxDQUFDO0lBQ1AsQ0FBQztDQUNKOzs7QUNkTSxNQUFNLDZCQUFRLEdBQUc7Ozs7O0NBS3ZCLENBQUM7OztBQ0xLLE1BQU0sZ0JBQWdCLEdBQUc7Ozs7O0NBSy9CLENBQUM7OztBQ0xLLE1BQU0sZ0JBQWdCLEdBQUc7Ozs7O0NBSy9CLENBQUM7Ozs7Ozs7Ozs7Ozs7O0FDTDhDO0FBQ0E7QUFDTTtBQUNBO0FBRy9DLE1BQU0sVUFBVyxTQUFRLFNBQW9EO0lBQ2hGLE1BQU07UUFDRixNQUFNLEtBQTBCLElBQUksQ0FBQyxLQUFLLEVBQXBDLEVBQUUsUUFBUSxPQUEwQixFQUFyQixNQUFNLHVCQUFyQixZQUF1QixDQUFhLENBQUM7UUFFM0MsSUFBSSxRQUFRLEVBQUU7WUFDVixPQUFPLGlCQUFpQixDQUFDLGdCQUFnQixvQkFBTyxNQUFNLEVBQUcsQ0FBQztTQUM3RDtRQUNELE9BQU8saUJBQWlCLENBQUMsZ0JBQWdCLG9CQUFPLE1BQU0sRUFBRyxDQUFDO0lBQzlELENBQUM7Q0FDSjs7O0FDZk0sTUFBTSxPQUFPLEdBQUcsQ0FBQyxHQUFXLEVBQVcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7OztBQ0FoRSxNQUFNLGVBQWUsR0FBRyxDQUFDLFFBQWdCLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDOzs7QUNBbEUsTUFBTSxPQUFPLEdBQUcsQ0FBQyxHQUFXLEVBQVcsRUFBRSxDQUFDLCtDQUErQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzs7O0FDQXBHLE1BQU0sV0FBVyxHQUFHLENBQUMsR0FBaUQsRUFBRSxFQUFFO0lBQzdFLE1BQU0sR0FBRyxHQUE4QixFQUFFLENBQUM7SUFFMUMsS0FBSyxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQUU7UUFDbkIsSUFBSSxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3pCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUV2QixJQUFJLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtnQkFDdkMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQVcsQ0FBQzthQUNqQztTQUNKO0tBQ0o7SUFFRCxPQUFPLEdBQUcsQ0FBQztBQUNmLENBQUM7OztBQ2JxRDtBQUUvQyxNQUFNLElBQUk7SUFhYixZQUFZLEVBQ1IsUUFBUSxFQUNSLE9BQU8sRUFDUCxTQUFTLEdBQUcsRUFBRSxFQUNkLE9BQU8sR0FDRzs7UUFiUCxXQUFNLEdBQXVDLEVBQUUsQ0FBQztRQUVoRCxZQUFPLEdBQWEsRUFBRSxDQUFDO1FBRXRCLDJCQUFzQixHQUFHLGtCQUFrQixDQUFDO1FBRTVDLHFCQUFnQixHQUFHLFlBQVksQ0FBQztRQVFwQyxJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxPQUFPLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUEwQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXBHLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxTQUFTLENBQUMsQ0FBQztRQUVyRCxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRTs7WUFDOUIsTUFBTSxLQUFLLFNBQUcsSUFBSSxDQUFDLElBQUksMENBQUUsYUFBYSxDQUFDLFVBQVUsSUFBSSxHQUFHLENBQUMsQ0FBQztZQUUxRCxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQVMsRUFBRSxFQUFFO2dCQUNuRCxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsTUFBMEIsQ0FBQztnQkFFN0MsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBRWhDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBRXpCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUV0QixDQUFDLEVBQUU7WUFFSCxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtnQkFDakMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFFM0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFFekIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3RCLENBQUMsRUFBRTtRQUNQLENBQUMsQ0FBQyxDQUFDO1FBRUgsVUFBSSxDQUFDLElBQUksMENBQUUsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBRW5CLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7WUFFdEQsSUFBSSxPQUFPLEVBQUU7Z0JBQ1QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDbEM7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN6QjtRQUNMLENBQUMsRUFBRTtRQUVILElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFekIsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVNLGFBQWEsQ0FBQyxJQUFZLEVBQUUsS0FBYTtRQUM1QyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVNLGVBQWUsQ0FBQyxJQUFZO1FBQy9CLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFTSxVQUFVLENBQUMsY0FBdUIsS0FBSztRQUMxQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRTs7WUFDOUIsTUFBTSxLQUFLLFNBQUcsSUFBSSxDQUFDLElBQUksMENBQUUsYUFBYSxDQUFDLFVBQVUsSUFBSSxHQUFHLENBQUMsQ0FBQztZQUMxRCxNQUFNLE1BQU0sR0FBRyxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsYUFBYSxDQUFDO1lBQ3BDLE1BQU0sWUFBWSxHQUFHLE9BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxhQUFhLENBQUMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsTUFBSyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRXpHLFlBQVksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO1lBRTlCLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixFQUFFLEVBQUU7WUFFMUQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksV0FBVyxDQUFDO1lBRTdELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFaEMsSUFBSSxTQUFTLElBQUksS0FBSyxFQUFFO2dCQUNwQixLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxFQUFFO2dCQUN2RCxZQUFZLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztnQkFFakMsSUFBSSxZQUFZLENBQUMsYUFBYSxLQUFLLElBQUksRUFBRTtvQkFDckMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7b0JBQ2xELE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxXQUFXLENBQUMsWUFBWSxFQUFFO2lCQUNyQzthQUNKO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0sUUFBUSxDQUFDLFNBQW1FO1FBQy9FLElBQUksSUFBSSxHQUFNLEVBQU8sQ0FBQztRQUV0QixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUNsQyxJQUFJLG1DQUNHLElBQUksS0FDUCxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssR0FDaEI7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUNyQixNQUFNO2FBQ0QsT0FBTyxDQUE0QixTQUF5RCxDQUFDO2FBQzdGLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsRUFBRSxFQUFFLENBQUMsaUNBQU0sSUFBSSxLQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFHLEVBQUUsRUFBRSxDQUFDLENBQ3JGLENBQUM7SUFDTixDQUFDO0lBRU0sTUFBTSxDQUFDLFFBQTZCLEVBQUUsT0FBK0I7UUFDeEUsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO1lBQ3ZCLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO2dCQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUNqQztpQkFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQy9CLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtvQkFDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBYyxDQUFDLENBQUM7Z0JBQ3pDLENBQUMsQ0FBQyxDQUFDO2FBQ047U0FDSjtRQUVELElBQUksSUFBSSxHQUF1QyxFQUFFLENBQUM7UUFFbEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDakMsSUFBSSxDQUFDLEdBQWMsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztRQUVILFFBQVEsQ0FBQyxJQUFTLENBQUMsQ0FBQztJQUN4QixDQUFDO0NBQ0o7OztBQ3hJTSxNQUFNLGNBQWMsR0FBRyxDQUFDLElBQThCLEVBQVUsRUFBRTtJQUNyRSxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7UUFDcEIsT0FBTyxFQUFFLENBQUM7S0FDYjtJQUVELE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBVSxFQUFFLElBQVksRUFBTyxFQUFFO1FBQ2hELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzNCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDdEIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQzdFO1lBQ0QsT0FBTyxNQUFNO2lCQUNSLE9BQU8sQ0FBQyxLQUFlLENBQUM7aUJBQ3hCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEdBQUcsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDakU7YUFBTTtZQUNILE9BQU8sSUFBSSxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUM7U0FDN0I7SUFDTCxDQUFDO0lBR0QsT0FBTyxHQUFHLEdBQUcsTUFBTTtTQUNkLE9BQU8sQ0FBQyxJQUFJLENBQUM7U0FDYixHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztTQUM5QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbkIsQ0FBQzs7O0FDdkJELElBQVksV0FLWDtBQUxELFdBQVksV0FBVztJQUNuQiwwQkFBVztJQUNYLDBCQUFXO0lBQ1gsNEJBQWE7SUFDYixnQ0FBaUI7QUFDckIsQ0FBQyxFQUxXLFdBQVcsS0FBWCxXQUFXLFFBS3RCOzs7QUNMMkQ7QUFDNEI7QUFFakYsTUFBTSxhQUFhO0lBQTFCO1FBQ1ksWUFBTyxHQUFXLEVBQUUsQ0FBQztRQUU3QixjQUFTLEdBQUcsQ0FBQyxNQUFjLEVBQUUsRUFBRTtZQUMzQixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUMxQixDQUFDO1FBRUQsUUFBRyxHQUFHLENBQUMsR0FBVyxFQUFFLFVBQW9DLEVBQUUsRUFBRSxFQUFFO1lBQzFELE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUM7WUFDekIsTUFBTSxNQUFNLEdBQUcsR0FBRyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMxQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxrQ0FBTyxPQUFPLEtBQUUsTUFBTSxFQUFFLGVBQWUsS0FBSSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUYsQ0FBQyxDQUFDO1FBRUYsUUFBRyxHQUFHLENBQUMsR0FBVyxFQUFFLFVBQW9DLEVBQUUsRUFBRSxFQUFFO1lBQzFELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLGtDQUFPLE9BQU8sS0FBRSxNQUFNLEVBQUUsZUFBZSxLQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN2RixDQUFDLENBQUM7UUFFRixTQUFJLEdBQUcsQ0FBQyxHQUFXLEVBQUUsVUFBb0MsRUFBRSxFQUFFLEVBQUU7WUFDM0QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsa0NBQU8sT0FBTyxLQUFFLE1BQU0sRUFBRSxnQkFBZ0IsS0FBSSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEYsQ0FBQyxDQUFDO1FBRUYsV0FBTSxHQUFHLENBQUMsR0FBVyxFQUFFLFVBQW9DLEVBQUUsRUFBRSxFQUFFO1lBQzdELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLGtDQUFPLE9BQU8sS0FBRSxNQUFNLEVBQUUsa0JBQWtCLEtBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFGLENBQUMsQ0FBQztRQUVGLFlBQU8sR0FBRyxDQUFDLEdBQVcsRUFBRSxPQUErQixFQUFFLE9BQU8sR0FBRyxJQUFJLEVBQUUsRUFBRTtZQUN2RSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLEdBQUcsRUFBRSxFQUFFLEdBQUcsT0FBTyxDQUFDO1lBRS9DLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7Z0JBQ25DLE1BQU0sR0FBRyxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7Z0JBQ2pDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLENBQUM7Z0JBRXJDLEdBQUcsQ0FBQyxNQUFNLEdBQUc7b0JBQ1QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDMUIsQ0FBQyxDQUFDO2dCQUVGLEdBQUcsQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO2dCQUNyQixHQUFHLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztnQkFDckIsR0FBRyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUM7Z0JBQ3ZCLEdBQUcsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO2dCQUN0QixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7b0JBQzdDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQ3JDLENBQUMsQ0FBQyxDQUFDO2dCQUVILElBQUksTUFBTSxLQUFLLGVBQWUsSUFBSSxDQUFDLElBQUksRUFBRTtvQkFDckMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO2lCQUNkO3FCQUFNO29CQUNILEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2lCQUNsQztZQUNMLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQztJQUNOLENBQUM7Q0FBQTtBQUVNLE1BQU0sYUFBYSxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7OztBQ3hEakQsdURBQXVEO0FBQ3ZELCtDQUErQztBQUMvQyxrRUFBa0U7QUFDbEUsc0RBQXNEO0FBQ3RELDZFQUE2RTtBQUM3RSxpREFBaUQ7QUFDakQsMkNBQTJDO0FBRU07QUFFMUMsTUFBTSxRQUFRO0lBQ2pCLFlBQ1ksS0FBYTtRQUFiLFVBQUssR0FBTCxLQUFLLENBQVE7UUFJekIsU0FBSSxHQUFHLENBQUMsSUFBUSxFQUFFLEVBQUU7WUFDaEIsT0FBTyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNuRCxDQUFDO1FBRUQsV0FBTSxHQUFHLENBQUMsSUFBTyxFQUFFLEVBQUU7WUFDakIsT0FBTyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNuRCxDQUFDO1FBRUQsV0FBTSxHQUFHLENBQUMsSUFBUSxFQUFFLEVBQUU7WUFDbEIsT0FBTyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN0RCxDQUFDO1FBRUQsV0FBTSxHQUFHLENBQUMsSUFBUSxFQUFFLEVBQUU7WUFDbEIsT0FBTyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNwRCxDQUFDO1FBRUQsUUFBRyxHQUFHLENBQUMsRUFBVSxFQUFFLEVBQUU7WUFDakIsT0FBTyxJQUFJLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMvQyxDQUFDO0lBcEJELENBQUM7Q0FxQko7OztBQ25DMEM7QUFHcEMsTUFBTSxVQUFVLEdBQUcsSUFBSSxRQUFRLENBQWtCLGVBQWUsQ0FBQyxDQUFDOzs7QUNIOUI7QUFHcEMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLFFBQVEsQ0FBaUIsc0JBQXNCLENBQUMsQ0FBQzs7O0FDSDFDO0FBR3BDLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxRQUFRLENBQTRCLGdCQUFnQixDQUFDOzs7QUNIM0M7QUFDQTtBQUNWO0FBQ0s7QUFFYztBQUNnQjtBQUNoQjtBQUNuQjtBQUVZO0FBQ1k7QUFDSTtBQUUzRCxNQUFNLFdBQVksU0FBUSxTQUFhO0lBQzFDO1FBQ0ksS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBV2QsYUFBUSxHQUFHLENBQUMsRUFDUixVQUFVLEVBQ1YsV0FBVyxFQUNYLFlBQVksRUFDWixLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDTCxNQUFNLEVBQ04sV0FBVyxFQUNYLFdBQVcsRUFDQSxFQUFFLEVBQUU7WUFDZixNQUFNLE9BQU8sR0FBRztnQkFDWixVQUFVO2dCQUNWLFdBQVc7Z0JBQ1gsWUFBWTtnQkFDWixLQUFLO2dCQUNMLEtBQUs7Z0JBQ0wsS0FBSzthQUNSLENBQUM7WUFDRixpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUUzQixJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQzVDLHVCQUF1QixDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQzthQUN2QztZQUVELHlCQUF5QixDQUFDO2dCQUN0QixXQUFXO2dCQUNYLFdBQVc7YUFDZCxDQUFDLENBQUM7UUFDUCxDQUFDO1FBRUQsY0FBUyxHQUFtRjtZQUN4RixLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7Z0JBQ2pCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ2pCLE9BQU8sd0JBQXdCO2lCQUNsQztZQUNMLENBQUM7WUFDRCxXQUFXLEVBQUUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUU7Z0JBQzdCLElBQUksZUFBZSxDQUFDLFdBQVcsQ0FBQyxFQUFFO29CQUM5QixPQUFPLHdDQUF3QztpQkFDbEQ7WUFDTCxDQUFDO1lBQ0QsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO2dCQUNqQixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUNqQixPQUFPLDJDQUEyQyxDQUFDO2lCQUN0RDtZQUNMLENBQUM7WUFDRCxpQkFBaUIsRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFLGlCQUFpQixFQUFFLEVBQUUsRUFBRTtnQkFDdEQsSUFBSSxXQUFXLEtBQUssaUJBQWlCLEVBQUU7b0JBQ25DLE9BQU8scUJBQXFCLENBQUM7aUJBQ2hDO1lBQ0wsQ0FBQztTQUNKO1FBRUQsWUFBTyxHQUFnQixFQUFFLENBQUM7UUEvRHRCLElBQUksSUFBSSxDQUFDLE9BQU8sWUFBWSxXQUFXLEVBQUU7WUFDckMsSUFBSSxJQUFJLENBQWU7Z0JBQ25CLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtnQkFDdkIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO2dCQUN6QixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87YUFDeEIsQ0FBQyxDQUFDO1NBQ047SUFDTCxDQUFDO0lBMERELFNBQVM7UUFDTCxNQUFNLFNBQVMsR0FBRyxJQUFJLFVBQVUsQ0FBQztZQUM3QixJQUFJLEVBQUUsWUFBWTtZQUNsQixLQUFLLEVBQUUsS0FBSztZQUNaLElBQUksRUFBRSxNQUFNO1lBQ1osS0FBSyxFQUFFLE1BQU07WUFDYixRQUFRLEVBQUUsSUFBSTtTQUNqQixDQUFDLENBQUM7UUFFSCxNQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FBQztZQUM5QixJQUFJLEVBQUUsYUFBYTtZQUNuQixLQUFLLEVBQUUsU0FBUztZQUNoQixJQUFJLEVBQUUsTUFBTTtZQUNaLEtBQUssRUFBRSxPQUFPO1lBQ2QsUUFBUSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxXQUFXLEdBQUcsSUFBSSxVQUFVLENBQUM7WUFDL0IsSUFBSSxFQUFFLGNBQWM7WUFDcEIsS0FBSyxFQUFFLGtCQUFrQjtZQUN6QixJQUFJLEVBQUUsTUFBTTtZQUNaLEtBQUssRUFBRSxPQUFPO1lBQ2QsUUFBUSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxLQUFLLEdBQUcsSUFBSSxVQUFVLENBQUM7WUFDekIsSUFBSSxFQUFFLE9BQU87WUFDYixLQUFLLEVBQUUsT0FBTztZQUNkLElBQUksRUFBRSxNQUFNO1lBQ1osS0FBSyxFQUFFLFVBQVU7WUFDakIsUUFBUSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxLQUFLLEdBQUcsSUFBSSxVQUFVLENBQUM7WUFDekIsSUFBSSxFQUFFLE9BQU87WUFDYixLQUFLLEVBQUUsT0FBTztZQUNkLElBQUksRUFBRSxPQUFPO1lBQ2IsS0FBSyxFQUFFLGtCQUFrQjtZQUN6QixRQUFRLEVBQUUsSUFBSTtTQUNqQixDQUFDLENBQUM7UUFFSCxNQUFNLEtBQUssR0FBRyxJQUFJLFVBQVUsQ0FBQztZQUN6QixJQUFJLEVBQUUsT0FBTztZQUNiLEtBQUssRUFBRSxTQUFTO1lBQ2hCLElBQUksRUFBRSxLQUFLO1lBQ1gsS0FBSyxFQUFFLGlCQUFpQjtZQUN4QixRQUFRLEVBQUUsSUFBSTtTQUNqQixDQUFDLENBQUM7UUFFSCxNQUFNLFdBQVcsR0FBRyxJQUFJLFVBQVUsQ0FBQztZQUMvQixJQUFJLEVBQUUsYUFBYTtZQUNuQixLQUFLLEVBQUUsZ0JBQWdCO1lBQ3ZCLElBQUksRUFBRSxVQUFVO1lBQ2hCLEtBQUssRUFBRSxVQUFVO1lBQ2pCLFFBQVEsRUFBRSxJQUFJO1NBQ2pCLENBQUMsQ0FBQztRQUVILE1BQU0sV0FBVyxHQUFHLElBQUksVUFBVSxDQUFDO1lBQy9CLElBQUksRUFBRSxhQUFhO1lBQ25CLEtBQUssRUFBRSxjQUFjO1lBQ3JCLElBQUksRUFBRSxVQUFVO1lBQ2hCLEtBQUssRUFBRSxVQUFVO1lBQ2pCLFFBQVEsRUFBRSxJQUFJO1NBQ2pCLENBQUMsQ0FBQztRQUVILE1BQU0saUJBQWlCLEdBQUcsSUFBSSxVQUFVLENBQUM7WUFDckMsSUFBSSxFQUFFLG1CQUFtQjtZQUN6QixLQUFLLEVBQUUsd0JBQXdCO1lBQy9CLElBQUksRUFBRSxVQUFVO1lBQ2hCLEtBQUssRUFBRSxVQUFVO1lBQ2pCLFFBQVEsRUFBRSxJQUFJO1NBQ2pCLENBQUMsQ0FBQztRQUVILE1BQU0sTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDO1lBQzFCLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLGtCQUFrQjtZQUN6QixJQUFJLEVBQUUsTUFBTTtZQUNaLEtBQUssRUFBRSxFQUFFO1lBQ1QsUUFBUSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNYLFNBQVM7WUFDVCxVQUFVO1lBQ1YsV0FBVztZQUNYLEtBQUs7WUFDTCxLQUFLO1lBQ0wsS0FBSztZQUNMLFdBQVc7WUFDWCxXQUFXO1lBQ1gsaUJBQWlCO1lBQ2pCLE1BQU07U0FDVCxDQUFDO0lBQ04sQ0FBQztJQUVELE1BQU07UUFDRixPQUFPLGlCQUFpQixDQUFDLDZCQUFRLEVBQUU7WUFDL0IsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1NBQ3hCLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjs7O0FDdkwrQztBQUNRO0FBRWpELE1BQU0sV0FBVyxHQUFHLElBQUksT0FBTyxDQUFDO0lBQ25DLFNBQVMsRUFBRSxvQkFBb0I7SUFDL0IsT0FBTyxFQUFFLElBQUksV0FBVyxFQUFFO0lBQzFCLFdBQVcsRUFBRSxPQUFPO0lBQ3BCLElBQUksRUFBRSxJQUFJO0lBQ1YsU0FBUyxFQUFFLHdCQUF3QjtDQUN0QyxDQUFDLENBQUM7OztBQ1RJLE1BQU0sMkJBQVEsR0FBRzs7Ozs7Ozs7O0NBU3ZCLENBQUM7OztBQ1Q4QztBQUNBO0FBQ1Y7QUFDQTtBQUcvQixNQUFNLFNBQWEsU0FBUSxTQUF3QjtJQUN0RCxZQUFZLEtBQW9CO1FBQzVCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUViLElBQUksSUFBSSxDQUFDLE9BQU8sWUFBWSxXQUFXLEVBQUU7WUFDckMsTUFBTSxFQUNGLGVBQWUsRUFBRSxPQUFPLEVBQ3hCLFFBQVEsRUFDUixTQUFTLEdBQ1osR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBRWYsSUFBSSxJQUFJLENBQUk7Z0JBQ1IsT0FBTztnQkFDUCxRQUFRO2dCQUNSLFNBQVM7Z0JBQ1QsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO2FBQ3hCLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQztJQUVELE1BQU07UUFDRixNQUFNLEVBQ0YsV0FBVyxFQUNYLE9BQU8sRUFDUCxRQUFRLEVBQ1IsU0FBUyxFQUNULElBQUksRUFDSixTQUFTLEdBQ1osR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRWYsT0FBTyxpQkFBaUIsQ0FBQywyQkFBUSxFQUFFO1lBQy9CLFdBQVc7WUFDWCxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN4QyxPQUFPO1lBQ1AsUUFBUTtZQUNSLFNBQVM7WUFDVCxJQUFJO1lBQ0osU0FBUztTQUNaLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjs7O0FDOUNNLE1BQU0sOEJBQVEsR0FBRzs7Ozs7O0NBTXZCLENBQUM7OztBQ044QztBQUNBO0FBQ1Y7QUFHL0IsTUFBTSxZQUFhLFNBQVEsU0FBd0I7SUFDdEQsTUFBTTtRQUNGLE9BQU8saUJBQWlCLENBQUMsOEJBQVEsb0JBQU8sSUFBSSxDQUFDLEtBQUssRUFBRyxDQUFDO0lBQzFELENBQUM7Q0FDSjs7O0FDVDBDO0FBR3BDLE1BQU0sU0FBUyxHQUFHLElBQUksUUFBUSxDQUFhLGNBQWMsQ0FBQzs7O0FDSGI7QUFDTTtBQUVZO0FBQzNCO0FBRTNDLE1BQU0sWUFBWSxHQUFHLElBQUksWUFBWSxDQUFDO0lBQ2xDLEtBQUssRUFBRSxPQUFPO0lBQ2QsSUFBSSxFQUFFLE9BQU87SUFDYixJQUFJLEVBQUUsTUFBTTtJQUNaLEtBQUssRUFBRSxVQUFVO0NBQ3BCLENBQUMsQ0FBQztBQUVILE1BQU0sZUFBZSxHQUFHLElBQUksWUFBWSxDQUFDO0lBQ3JDLEtBQUssRUFBRSxRQUFRO0lBQ2YsSUFBSSxFQUFFLFVBQVU7SUFDaEIsSUFBSSxFQUFFLFVBQVU7SUFDaEIsS0FBSyxFQUFFLFVBQVU7Q0FDcEIsQ0FBQyxDQUFDO0FBRUksTUFBTSxLQUFLLEdBQUcsSUFBSSxTQUFTLENBQWE7SUFDM0MsV0FBVyxFQUFFLGdCQUFnQjtJQUM3QixPQUFPLEVBQUU7UUFDTCxZQUFZO1FBQ1osZUFBZTtLQUNsQjtJQUNELFFBQVEsRUFBRSxjQUFjO0lBQ3hCLFNBQVMsRUFBRSxlQUFlO0lBQzFCLFFBQVEsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ2pCLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFDRCxTQUFTLEVBQUUsTUFBTTtJQUNqQixTQUFTLEVBQUU7UUFDUCxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDakIsSUFBSSxLQUFLLEtBQUssRUFBRSxFQUFFO2dCQUNkLE9BQU8sbUJBQW1CLENBQUM7YUFDOUI7UUFDTCxDQUFDO1FBQ0QsUUFBUSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFO1lBQ3ZCLElBQUksZUFBZSxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUMzQixPQUFPLHVDQUF1QyxDQUFDO2FBQ2xEO1FBQ0wsQ0FBQztLQUNKO0NBQ0osQ0FBQyxDQUFDOzs7QUM1Q0ksTUFBTSxnQ0FBUSxHQUFHOzs7O0NBSXZCLENBQUM7OztBQ0o4QztBQUNBO0FBQ1Y7QUFHL0IsTUFBTSxjQUFlLFNBQVEsU0FBMEI7SUFDMUQsTUFBTTtRQUNGLE9BQU8saUJBQWlCLENBQUMsZ0NBQVEsb0JBQU8sSUFBSSxDQUFDLEtBQUssRUFBRyxDQUFDO0lBQzFELENBQUM7Q0FDSjs7O0FDVE0sTUFBTSxtQ0FBUSxHQUFHOzs7Ozs7Ozs7Q0FTdkIsQ0FBQzs7O0FDVDhDO0FBQ0E7QUFDVjtBQUNrQjtBQUVqRCxNQUFNLGlCQUFrQixTQUFRLFNBQWE7SUFDaEQsTUFBTTtRQUNGLE9BQU8saUJBQWlCLENBQUMsbUNBQVEsRUFBRTtZQUMvQixPQUFPLEVBQUUsR0FBRyxFQUFFO2dCQUNWLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ3ZDLENBQUM7U0FDSixDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7OztBQ2IrQztBQUNjO0FBQ1I7QUFDYztBQUU3RCxNQUFNLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQztJQUMvQixTQUFTLEVBQUUsb0JBQW9CO0lBQy9CLE9BQU8sRUFBRTtRQUNMLElBQUksY0FBYyxDQUFDO1lBQ2YsT0FBTyxFQUFFO2dCQUNMLElBQUksVUFBVSxDQUFDO29CQUNYLEtBQUssRUFBRSxLQUFLO29CQUNaLEtBQUssRUFBRSxNQUFNO2lCQUNoQixDQUFDO2dCQUNGLElBQUksVUFBVSxDQUFDO29CQUNYLEtBQUssRUFBRSxTQUFTO29CQUNoQixLQUFLLEVBQUUsT0FBTztpQkFDakIsQ0FBQztnQkFDRixJQUFJLFVBQVUsQ0FBQztvQkFDWCxLQUFLLEVBQUUsa0JBQWtCO29CQUN6QixLQUFLLEVBQUUsT0FBTztpQkFDakIsQ0FBQztnQkFDRixJQUFJLFVBQVUsQ0FBQztvQkFDWCxLQUFLLEVBQUUsT0FBTztvQkFDZCxLQUFLLEVBQUUsVUFBVTtpQkFDcEIsQ0FBQztnQkFDRixJQUFJLFVBQVUsQ0FBQztvQkFDWCxLQUFLLEVBQUUsT0FBTztvQkFDZCxLQUFLLEVBQUUsa0JBQWtCO2lCQUM1QixDQUFDO2dCQUNGLElBQUksVUFBVSxDQUFDO29CQUNYLEtBQUssRUFBRSxTQUFTO29CQUNoQixLQUFLLEVBQUUsaUJBQWlCO2lCQUMzQixDQUFDO2FBQ0w7U0FDSixDQUFDO1FBQ0YsSUFBSSxpQkFBaUIsRUFBRTtLQUMxQjtJQUNELFdBQVcsRUFBRSxPQUFPO0lBQ3BCLFNBQVMsRUFBRSxTQUFTO0NBQ3ZCLENBQUMsQ0FBQzs7O0FDeEN3QztBQUdwQyxNQUFNLFNBQVMsR0FBRyxJQUFJLFFBQVEsQ0FBYSxjQUFjLENBQUMsQ0FBQzs7O0FDSGQ7QUFDTTtBQUVZO0FBQ2hCO0FBQ0E7QUFDWDtBQUUzQyxNQUFNLFNBQVMsR0FBRyxJQUFJLFlBQVksQ0FBQztJQUMvQixLQUFLLEVBQUUsS0FBSztJQUNaLElBQUksRUFBRSxZQUFZO0lBQ2xCLElBQUksRUFBRSxNQUFNO0lBQ1osS0FBSyxFQUFFLE1BQU07Q0FDaEIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxVQUFVLEdBQUcsSUFBSSxZQUFZLENBQUM7SUFDaEMsS0FBSyxFQUFFLFNBQVM7SUFDaEIsSUFBSSxFQUFFLGFBQWE7SUFDbkIsSUFBSSxFQUFFLE1BQU07SUFDWixLQUFLLEVBQUUsT0FBTztDQUNqQixDQUFDLENBQUM7QUFFSCxNQUFNLGtCQUFLLEdBQUcsSUFBSSxZQUFZLENBQUM7SUFDM0IsS0FBSyxFQUFFLE9BQU87SUFDZCxJQUFJLEVBQUUsT0FBTztJQUNiLElBQUksRUFBRSxNQUFNO0lBQ1osS0FBSyxFQUFFLFVBQVU7Q0FDcEIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFZLENBQUM7SUFDM0IsS0FBSyxFQUFFLE9BQU87SUFDZCxJQUFJLEVBQUUsT0FBTztJQUNiLElBQUksRUFBRSxPQUFPO0lBQ2IsS0FBSyxFQUFFLGtCQUFrQjtDQUM1QixDQUFDLENBQUM7QUFFSCxNQUFNLEtBQUssR0FBRyxJQUFJLFlBQVksQ0FBQztJQUMzQixLQUFLLEVBQUUsU0FBUztJQUNoQixJQUFJLEVBQUUsT0FBTztJQUNiLElBQUksRUFBRSxLQUFLO0lBQ1gsS0FBSyxFQUFFLGlCQUFpQjtDQUMzQixDQUFDLENBQUM7QUFFSCxNQUFNLHFCQUFRLEdBQUcsSUFBSSxZQUFZLENBQUM7SUFDOUIsS0FBSyxFQUFFLFFBQVE7SUFDZixJQUFJLEVBQUUsVUFBVTtJQUNoQixJQUFJLEVBQUUsVUFBVTtJQUNoQixLQUFLLEVBQUUsVUFBVTtDQUNwQixDQUFDLENBQUM7QUFFSCxNQUFNLGNBQWMsR0FBRyxJQUFJLFlBQVksQ0FBQztJQUNwQyxLQUFLLEVBQUUsa0JBQWtCO0lBQ3pCLElBQUksRUFBRSxpQkFBaUI7SUFDdkIsSUFBSSxFQUFFLFVBQVU7SUFDaEIsS0FBSyxFQUFFLFVBQVU7Q0FDcEIsQ0FBQyxDQUFDO0FBRUksTUFBTSxZQUFZLEdBQUcsSUFBSSxTQUFTLENBQWlCO0lBQ3RELFdBQVcsRUFBRSxvQkFBb0I7SUFDakMsT0FBTyxFQUFFO1FBQ0wsU0FBUztRQUNULFVBQVU7UUFDVixrQkFBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wscUJBQVE7UUFDUixjQUFjO0tBQ2pCO0lBQ0QsZUFBZSxFQUFFLGlCQUFpQjtJQUNsQyxRQUFRLEVBQUUsUUFBUTtJQUNsQixTQUFTLEVBQUUsT0FBTztJQUNsQixJQUFJLEVBQUUsSUFBSTtJQUNWLFFBQVEsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ2pCLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFDRCxTQUFTLEVBQUUsYUFBYTtJQUN4QixTQUFTLEVBQUU7UUFDUCxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDakIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDakIsT0FBTyx3QkFBd0I7YUFDbEM7UUFDTCxDQUFDO1FBQ0QsUUFBUSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFO1lBQ3ZCLElBQUksZUFBZSxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUMzQixPQUFPLHdDQUF3QzthQUNsRDtRQUNMLENBQUM7UUFDRCxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDakIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDakIsT0FBTywyQ0FBMkMsQ0FBQzthQUN0RDtRQUNMLENBQUM7UUFDRCxlQUFlLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRTtZQUMvRCxJQUFJLFFBQVEsS0FBSyxjQUFjLEVBQUU7Z0JBQzdCLE9BQU8scUJBQXFCLENBQUM7YUFDaEM7UUFDTCxDQUFDO0tBQ0o7Q0FDSixDQUFDLENBQUM7OztBQ2xHbUM7QUFDQztBQUNBO0FBQ0g7QUFDRTtBQUNhO0FBQ2I7QUFDSTtBQUNVO0FBQ0Y7QUFFbEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFFbkMsTUFBTTtLQUNELEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLGNBQWMsQ0FBQztLQUMvQixHQUFHLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUM7S0FDcEMsR0FBRyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDO0tBQ3BDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQztLQUMxQixHQUFHLENBQUMsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLHdCQUF3QixDQUFDO0tBQzVELEdBQUcsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQztLQUM3QixHQUFHLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUM7S0FDcEMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLFlBQVksRUFBRSxhQUFhLENBQUM7S0FDbEQsS0FBSyxFQUFFLENBQUM7QUFFYix1QkFBdUIsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDIiwiZmlsZSI6IjU1Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uL2xpYi9Db21wb25lbnQnO1xuXG5leHBvcnQgY29uc3QgcmVuZGVyID0gKHNlbGVjdG9yOiBzdHJpbmcsIGNvbXBvbmVudDogQ29tcG9uZW50PGFueT4pID0+IHtcbiAgICBjb25zdCByb290ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgY29uc3QgZWxlbWVudCA9IGNvbXBvbmVudC5nZXRDb250ZW50KCk7XG5cbiAgICBpZiAocm9vdCAhPT0gbnVsbCAmJiBlbGVtZW50ICE9PSBudWxsKSB7XG4gICAgICAgIHJvb3Q/LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiByb290O1xufSIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gJy4uLy4uL3V0aWxzL3JlbmRlcic7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9Db21wb25lbnQnO1xuXG5leHBvcnQgY2xhc3MgUm91dGUge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIF9wYXRobmFtZTogc3RyaW5nLFxuICAgICAgICBwcml2YXRlIF9ibG9jazogQ29tcG9uZW50LFxuICAgICAgICBwcml2YXRlIF90aXRsZTogc3RyaW5nLFxuICAgICAgICBwcml2YXRlIF9zZWxlY3Rvcjogc3RyaW5nLFxuICAgICkge1xuICAgIH1cblxuICAgIGxlYXZlKCkge1xuICAgICAgICBpZiAodGhpcy5fYmxvY2sgIT09IG51bGwgJiYgdGhpcy5fYmxvY2suZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9ibG9jay5lbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNFcXVhbChhOiBzdHJpbmcsIGI6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gYSA9PT0gYjtcbiAgICB9XG5cbiAgICBtYXRjaChwYXRobmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzRXF1YWwocGF0aG5hbWUsIHRoaXMuX3BhdGhuYW1lKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGRvY3VtZW50LnRpdGxlID0gdGhpcy5fdGl0bGU7XG4gICAgICAgIHJlbmRlcih0aGlzLl9zZWxlY3RvciwgdGhpcy5fYmxvY2sgYXMgQ29tcG9uZW50KTtcbiAgICB9XG59IiwiaW1wb3J0IHsgUm91dGUgfSBmcm9tICcuL1JvdXRlJztcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uL0NvbXBvbmVudCc7XG5cbmV4cG9ydCBjbGFzcyBSb3V0ZXIge1xuICAgIHN0YXRpYyBfX2luc3RhbmNlOiBSb3V0ZXI7XG5cbiAgICBwdWJsaWMgcm91dGVzOiBSb3V0ZVtdID0gW107XG5cbiAgICBwdWJsaWMgaGlzdG9yeTogSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuXG4gICAgcHJpdmF0ZSBfY3VycmVudFJvdXRlOiBSb3V0ZSB8IG51bGwgPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgX3NlbGVjdG9yOiBzdHJpbmcsXG4gICAgKSB7XG4gICAgICAgIGlmIChSb3V0ZXIuX19pbnN0YW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIFJvdXRlci5fX2luc3RhbmNlO1xuICAgICAgICB9XG5cbiAgICAgICAgUm91dGVyLl9faW5zdGFuY2UgPSB0aGlzO1xuICAgIH1cblxuICAgIHVzZShwYXRobmFtZTogc3RyaW5nLCBibG9jazogQ29tcG9uZW50LCB0aXRsZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHJvdXRlID0gbmV3IFJvdXRlKHBhdGhuYW1lLCBibG9jaywgdGl0bGUsIHRoaXMuX3NlbGVjdG9yKTtcblxuICAgICAgICB0aGlzLnJvdXRlcy5wdXNoKHJvdXRlKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzdGFydCgpIHtcbiAgICAgICAgd2luZG93Lm9ucG9wc3RhdGUgPSAoKGV2ZW50OiBhbnkpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uUm91dGUoZXZlbnQuY3VycmVudFRhcmdldC5sb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX29uUm91dGUod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG5cbiAgICBfb25Sb3V0ZShwYXRobmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHJvdXRlID0gdGhpcy5nZXRSb3V0ZShwYXRobmFtZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRSb3V0ZSkge1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFJvdXRlLmxlYXZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jdXJyZW50Um91dGUgPSByb3V0ZSB8fCBudWxsO1xuXG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50Um91dGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRSb3V0ZS5yZW5kZXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdvKHBhdGhuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2hTdGF0ZSh7fSwgJycsIHBhdGhuYW1lKTtcblxuICAgICAgICB0aGlzLl9vblJvdXRlKHBhdGhuYW1lKTtcbiAgICB9XG5cbiAgICBiYWNrKCkge1xuICAgICAgICB0aGlzLmhpc3RvcnkuYmFjaygpO1xuICAgIH1cblxuICAgIGZvcndhcmQoKSB7XG4gICAgICAgIHRoaXMuaGlzdG9yeS5mb3J3YXJkKCk7XG4gICAgfVxuXG4gICAgZ2V0Um91dGUocGF0aG5hbWU6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5yb3V0ZXMuZmluZChyb3V0ZSA9PiByb3V0ZS5tYXRjaChwYXRobmFtZSkpO1xuICAgIH1cbn0iLCJleHBvcnQgY2xhc3MgRXZlbnRCdXMge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbGlzdGVuZXJzOiB7IFtrZXk6IHN0cmluZ106IEZ1bmN0aW9uW10gfTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xuICAgIH1cblxuICAgIHB1YmxpYyBvbihldmVudDogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24pIHtcbiAgICAgICAgaWYgKCF0aGlzLmxpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnRdLnB1c2goY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHB1YmxpYyBvZmYoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uKSB7XG4gICAgICAgIGlmICghdGhpcy5saXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYNCd0LXRgiDRgdC+0LHRi9GC0LjRjzogJHtldmVudH1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubGlzdGVuZXJzW2V2ZW50XSA9IHRoaXMubGlzdGVuZXJzW2V2ZW50XS5maWx0ZXIoXG4gICAgICAgICAgICBsaXN0ZW5lciA9PiBsaXN0ZW5lciAhPT0gY2FsbGJhY2tcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZW1pdChldmVudDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkge1xuICAgICAgICBpZiAoIXRoaXMubGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGDQndC10YIg0YHQvtCx0YvRgtC40Y86ICR7ZXZlbnR9YCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxpc3RlbmVyc1tldmVudF0uZm9yRWFjaChmdW5jdGlvbihsaXN0ZW5lcikge1xuICAgICAgICAgICAgbGlzdGVuZXIoLi4uYXJncyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBFdmVudEJ1cyB9IGZyb20gJy4uL0V2ZW50QnVzJztcblxuZXhwb3J0IGNsYXNzIENvbXBvbmVudDxUIGV4dGVuZHMge30gPSBhbnk+IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogVCA9IHt9IGFzIFQpIHtcbiAgICAgICAgY29uc3QgZXZlbnRCdXMgPSBuZXcgRXZlbnRCdXMoKTtcblxuICAgICAgICB0aGlzLnByb3BzID0gdGhpcy5fbWFrZVByb3BzUHJveHkocHJvcHMpO1xuXG4gICAgICAgIHRoaXMuZXZlbnRCdXMgPSAoKSA9PiBldmVudEJ1cztcblxuICAgICAgICB0aGlzLl9yZWdpc3RlckV2ZW50cyhldmVudEJ1cyk7XG4gICAgICAgIGV2ZW50QnVzLmVtaXQoQ29tcG9uZW50LkVWRU5UUy5JTklUKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgRVZFTlRTID0ge1xuICAgICAgICBJTklUOiBcImluaXRcIixcbiAgICAgICAgRkxPV19DRE06IFwiZmxvdzpjb21wb25lbnQtZGlkLW1vdW50XCIsXG4gICAgICAgIEZMT1dfUkVOREVSOiBcImZsb3c6cmVuZGVyXCIsXG4gICAgICAgIEZMT1dfU0NEVTogXCJmbG93OnNob3VsZC1jb21wb25lbnQtZGlkLXVwZGF0ZVwiLFxuICAgICAgICBGTE9XX0NEVTogXCJmbG93OmNvbXBvbmVudC1kaWQtdXBkYXRlXCIsXG4gICAgfTtcblxuICAgIHByaXZhdGUgX2VsZW1lbnQ6IFNWR0VsZW1lbnQgfCBEb2N1bWVudEZyYWdtZW50IHwgSFRNTEVsZW1lbnQgfCBUZXh0IHwgbnVsbCA9IG51bGw7XG5cbiAgICBwcml2YXRlIF9tb3VudGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvcHM6IFQ7XG5cbiAgICBwcml2YXRlIGV2ZW50QnVzOiAoKSA9PiBFdmVudEJ1cztcblxuICAgIHByaXZhdGUgX3JlZ2lzdGVyRXZlbnRzKGV2ZW50QnVzOiBFdmVudEJ1cykge1xuICAgICAgICBldmVudEJ1cy5vbihDb21wb25lbnQuRVZFTlRTLklOSVQsIHRoaXMuaW5pdC5iaW5kKHRoaXMpKTtcbiAgICAgICAgZXZlbnRCdXMub24oQ29tcG9uZW50LkVWRU5UUy5GTE9XX0NETSwgdGhpcy5fY29tcG9uZW50RGlkTW91bnQuYmluZCh0aGlzKSk7XG4gICAgICAgIGV2ZW50QnVzLm9uKENvbXBvbmVudC5FVkVOVFMuRkxPV19SRU5ERVIsIHRoaXMuX3JlbmRlci5iaW5kKHRoaXMpKTtcbiAgICAgICAgZXZlbnRCdXMub24oQ29tcG9uZW50LkVWRU5UUy5GTE9XX1NDRFUsIHRoaXMuX3Nob3VsZENvbXBvbmVudERpZFVwZGF0ZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgZXZlbnRCdXMub24oQ29tcG9uZW50LkVWRU5UUy5GTE9XX0NEVSwgdGhpcy5fY29tcG9uZW50RGlkVXBkYXRlLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5fcHJlcmVuZGVyKCk7XG5cbiAgICAgICAgdGhpcy5fcmVuZGVyKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50RGlkTW91bnQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY29tcG9uZW50RGlkTW91bnQoKSB7fVxuXG4gICAgX3Nob3VsZENvbXBvbmVudERpZFVwZGF0ZShvbGRQcm9wczogVCwgbmV3UHJvcHM6IFQpIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB0aGlzLnNob3VsZENvbXBvbmVudFVwZGF0ZShvbGRQcm9wcywgbmV3UHJvcHMpO1xuXG4gICAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICAgICAgdGhpcy5ldmVudEJ1cygpLmVtaXQoQ29tcG9uZW50LkVWRU5UUy5GTE9XX1JFTkRFUik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzaG91bGRDb21wb25lbnRVcGRhdGUob2xkUHJvcHM6IFQsIG5ld1Byb3BzOiBUKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBvbGRQcm9wcyAhPT0gbmV3UHJvcHM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjb21wb25lbnREaWRVcGRhdGUoKSB7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0UHJvcHMgPSAobmV4dFByb3BzOiBQYXJ0aWFsPFQ+KSA9PiB7XG4gICAgICAgIGlmICghbmV4dFByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMucHJvcHMsIG5leHRQcm9wcyk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgX3JlbmRlcigpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5yZW5kZXIoKTtcblxuICAgICAgICBpZiAoIXRoaXMuX21vdW50ZWQgfHwgdGhpcy5fZWxlbWVudCA9PT0gbnVsbCB8fCByZXN1bHQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQgPSByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5yZXBsYWNlV2l0aChyZXN1bHQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQgPSByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX21vdW50ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRCdXMoKS5lbWl0KENvbXBvbmVudC5FVkVOVFMuRkxPV19DRE0pO1xuICAgICAgICAgICAgdGhpcy5fbW91bnRlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50QnVzKCkuZW1pdChDb21wb25lbnQuRVZFTlRTLkZMT1dfQ0RVKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKTogU1ZHRWxlbWVudCB8IERvY3VtZW50RnJhZ21lbnR8IEhUTUxFbGVtZW50IHwgVGV4dCB8IG51bGwge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRDb250ZW50KCk6IFNWR0VsZW1lbnQgfCBEb2N1bWVudEZyYWdtZW50fCBIVE1MRWxlbWVudCB8IFRleHQgfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudDtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9tYWtlUHJvcHNQcm94eShwcm9wczogVCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb3h5PFQ+KHByb3BzLCB7XG4gICAgICAgICAgICBzZXQ6ICh0YXJnZXQ6IFQsIHByb3A6IHN0cmluZywgdmFsdWU6IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCBGdW5jdGlvbikgPT4ge1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgb2xkUHJvcHMgPSB7IC4uLnRoaXMucHJvcHMgfTtcblxuICAgICAgICAgICAgICAgICh0YXJnZXQgYXMgdW5rbm93biBhcyB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCBGdW5jdGlvbiB9KVtwcm9wXSA9IHZhbHVlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudEJ1cygpLmVtaXQoQ29tcG9uZW50LkVWRU5UUy5GTE9XX1NDRFUsIG9sZFByb3BzLCB0YXJnZXQpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzaG93KHByb3BlcnR5VmFsdWU6IHN0cmluZyA9ICdibG9jaycpIHtcbiAgICAgICAgaWYgKHRoaXMuX2VsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiB0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPT09ICdub25lJykge1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gcHJvcGVydHlWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRCdXMoKS5lbWl0KENvbXBvbmVudC5FVkVOVFMuRkxPV19DRFUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGhpZGUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9lbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ICE9PSAnbm9uZScpIHtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIHRoaXMuZXZlbnRCdXMoKS5lbWl0KENvbXBvbmVudC5FVkVOVFMuRkxPV19DRFUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHZpc2liaWxpdHlUb2dnbGUocHJvcGVydHlWYWx1ZTogc3RyaW5nID0gJ2Jsb2NrJykge1xuICAgICAgICBpZiAodGhpcy5fZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3cocHJvcGVydHlWYWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGZvcmNlVXBkYXRlKCkge1xuICAgICAgICB0aGlzLmV2ZW50QnVzKCkuZW1pdChDb21wb25lbnQuRVZFTlRTLkZMT1dfUkVOREVSKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9wcmVyZW5kZXIoKSB7XG4gICAgICAgIHRoaXMucHJlcmVuZGVyKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHByZXJlbmRlcigpIHtcblxuICAgIH1cbn0iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9Db21wb25lbnQnO1xuaW1wb3J0IHtcbiAgICBBbGxvd2VkQ29tcG9uZW50LFxuICAgIEFsbG93ZWRDb21wb25lbnRDb25zdHJ1Y3RvcixcbiAgICBUZW1wbGF0b3JUcmVlVHlwZSxcbiAgICBUZW1wbGF0b3JDb250ZXh0VHlwZVxufSBmcm9tICcuL3R5cGVzJztcblxuY2xhc3MgVGVtcGxhdG9yIHtcbiAgICBwcm90ZWN0ZWQgX2FsbG93ZWQ6IEFsbG93ZWRDb21wb25lbnRDb25zdHJ1Y3RvciB8IG51bGwgPSBudWxsO1xuXG4gICAgcHVibGljIEVWRU5UUzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHtcbiAgICAgICAgb25DaGFuZ2U6ICdpbnB1dCcsXG4gICAgICAgIG9uQ2xpY2s6ICdjbGljaycsXG4gICAgICAgIG9uU3VibWl0OiAnc3VibWl0JyxcbiAgICB9XG5cbiAgICBwdWJsaWMgU1ZHX1RBR1MgPSBbJ3N2ZycsICdjaXJjbGUnLCAncGF0aCcsICdzdHJva2UnLCAncmVjdCcsICdsaW5lJ107XG5cbiAgICBwcml2YXRlIF9zZXRBdHRyaWJ1dGVzPFQ+KG5vZGU6IEhUTUxFbGVtZW50IHwgU1ZHRWxlbWVudCwgYXR0cnM6IFJlZ0V4cE1hdGNoQXJyYXksIGN0eDogVGVtcGxhdG9yQ29udGV4dFR5cGUpIHtcbiAgICAgICAgY29uc3QgcmVnZXhwID0gLyg/PHByb3A+W2EtekEtWjAtOS1dKykoPVwiKD88dmFsdWU+Lio/KVwiKT8vO1xuICAgICAgICBhdHRycy5mb3JFYWNoKGF0dHIgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBwcm9wLCB2YWx1ZSA9ICcnIH0gPSBhdHRyLm1hdGNoKHJlZ2V4cCk/Lmdyb3VwcyBhcyB7IHByb3A6IHN0cmluZywgdmFsdWU/OiBzdHJpbmcgfTtcblxuICAgICAgICAgICAgbGV0IHZhbDogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IEZ1bmN0aW9uIHwgdW5kZWZpbmVkIHwgVCA9IHZhbHVlO1xuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSB2YWx1ZT8ubWF0Y2goL3t7IChcXHcrKSB9fS8pO1xuICAgICAgICAgICAgaWYgKG1hdGNoICE9PSBudWxsICYmIG1hdGNoICE9PSB1bmRlZmluZWQgJiYgbWF0Y2hbMV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3R4W21hdGNoWzFdXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB2YWwgPSBjdHhbbWF0Y2hbMV1dIGFzIHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCBGdW5jdGlvbiB8IHVuZGVmaW5lZCB8IFQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKGB7eyAke21hdGNoWzFdfSB9fWApXG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IHZhbD8ucmVwbGFjZShyZSwgY3R4W21hdGNoWzFdXSBhcyBzdHJpbmcgfHwgJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicgJiYgcHJvcCBpbiB0aGlzLkVWRU5UUykge1xuICAgICAgICAgICAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5FVkVOVFNbcHJvcF0sXG4gICAgICAgICAgICAgICAgICAgIHZhbCBhcyAodGhpczogRG9jdW1lbnQsIGV2OiBEb2N1bWVudEV2ZW50TWFwWydibHVyJyB8ICdjaGFuZ2UnIHwgJ2NsaWNrJyB8ICdzdWJtaXQnXSkgPT4gYW55XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvcCA9PT0gJ2NsYXNzJyAmJiB2YWwgIT09IHVuZGVmaW5lZCAmJiBub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBub2RlLmNsYXNzTmFtZSA9IFN0cmluZyh2YWwpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUocHJvcCwgXCJ0cnVlXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShwcm9wLCBTdHJpbmcodmFsKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2NyZWF0ZU5vZGU8VCBleHRlbmRzIEFsbG93ZWRDb21wb25lbnQ+KGVsZW1lbnQ6IFRlbXBsYXRvclRyZWVUeXBlLCBjdHg6IFRlbXBsYXRvckNvbnRleHRUeXBlKTogU1ZHRWxlbWVudCB8IERvY3VtZW50RnJhZ21lbnQgfCBIVE1MRWxlbWVudCB8IFRleHQge1xuICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBsZXQgbmV3SXRlbSA9IGVsZW1lbnQ7XG4gICAgICAgICAgICBjb25zdCB2YXJzID0gKGVsZW1lbnRcbiAgICAgICAgICAgICAgICAubWF0Y2goL3t7IChcXHcrKSB9fS9nKSB8fCBbXSlcbiAgICAgICAgICAgICAgICAucmVkdWNlPHN0cmluZ1tdPigocHJldiwgY3VycmVudCkgPT4gcHJldi5pbmNsdWRlcyhjdXJyZW50KSA/IHByZXYgOiBbLi4ucHJldiwgY3VycmVudC5yZXBsYWNlKC8oeyl8KH0pfCggKS9nLCAnJyldLCBbXSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHYgb2YgdmFycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4cCA9IG5ldyBSZWdFeHAoYHt7ICR7dn0gfX1gLCAnZycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2FsbG93ZWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN0eFt2XSBpbnN0YW5jZW9mIHRoaXMuX2FsbG93ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSAoY3R4W3ZdIGFzIEFsbG93ZWRDb21wb25lbnQpLmdldENvbnRlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY3R4W3ZdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgKGN0eFt2XSBhcyBBbGxvd2VkQ29tcG9uZW50W10pLmZvckVhY2goZWwgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBlbC5nZXRDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBuZXdJdGVtID0gbmV3SXRlbS5yZXBsYWNlKHJlZ2V4cCwgY3R4W3ZdIGFzIHN0cmluZyB8fCAnJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChBcnJheS5mcm9tKGZyYWdtZW50LmNoaWxkcmVuKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZyYWdtZW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobmV3SXRlbSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IGNoaWxkcmVuLCBmdWxsVGFnLCB0YWcgfSA9IGVsZW1lbnQ7XG5cbiAgICAgICAgaWYgKHRhZyA9PT0gJzw+Jykge1xuICAgICAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cbiAgICAgICAgICAgIGNoaWxkcmVuLmZvckVhY2goY2ggPT4ge1xuICAgICAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKHRoaXMuX2NyZWF0ZU5vZGUoY2gsIGN0eCkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBmcmFnbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHdyYXBwZXIgPSAhdGhpcy5TVkdfVEFHUy5pbmNsdWRlcyh0YWcpID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIHRhZyk7XG5cbiAgICAgICAgY29uc3QgYXR0cnMgPSBmdWxsVGFnLm1hdGNoKC8oW2EtekEtWjAtOS1dKyk9XCIoLio/KVwiL2cpO1xuXG4gICAgICAgIGlmIChhdHRycyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fc2V0QXR0cmlidXRlczxUPih3cmFwcGVyLCBhdHRycywgY3R4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMuX2NyZWF0ZU5vZGUoY2hpbGQsIGN0eCkpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9jcmVhdGVUcmVlKGVsZW1lbnRzOiBzdHJpbmdbXSk6IFRlbXBsYXRvclRyZWVUeXBlIHtcbiAgICAgICAgY29uc3QgaXNUYWcgPSAoc3RyOiBzdHJpbmcpID0+IC88KFthLXpBLVpdKy4qPyl8KFxcL1thLXpBLVpdKyk+L2lnLnRlc3Qoc3RyKTtcbiAgICAgICAgY29uc3QgcGFyc2VGdWxsVGFnID0gKHN0cjogc3RyaW5nKSA9PiBzdHIucmVwbGFjZSgvKDwpfCgoIC4qPyk/XFwvPz4pL2csICcnKTtcbiAgICAgICAgY29uc3QgaXNTZWxmQ2xvc2VkVGFnID0gKHN0cjogc3RyaW5nKSA9PiAvPFthLXpBLVpdKy4qP1xcLz4vaWcudGVzdChzdHIpO1xuXG4gICAgICAgIGNvbnN0IGZpcnN0RWxlbWVudCA9IGVsZW1lbnRzLnNoaWZ0KCkgYXMgc3RyaW5nO1xuXG4gICAgICAgIGlmIChpc1RhZyhmaXJzdEVsZW1lbnQpKSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSBwYXJzZUZ1bGxUYWcoZmlyc3RFbGVtZW50KTtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gW107XG4gICAgICAgICAgICBjb25zdCBlbmQgPSBgPC8ke3RhZ30+YDtcblxuICAgICAgICAgICAgaWYgKCFpc1NlbGZDbG9zZWRUYWcoZmlyc3RFbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIHdoaWxlIChlbGVtZW50cy5sZW5ndGggIT09IDAgJiYgZWxlbWVudHNbMF0gIT09IGVuZCkge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKHRoaXMuX2NyZWF0ZVRyZWUoZWxlbWVudHMpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlbGVtZW50cy5zaGlmdCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4geyB0YWcsIGZ1bGxUYWc6IGZpcnN0RWxlbWVudCwgY2hpbGRyZW4gfTtcbiAgICAgICAgfSBlbHNlIGlmIChmaXJzdEVsZW1lbnQgPT09ICc8PicpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gW107XG5cbiAgICAgICAgICAgIHdoaWxlIChlbGVtZW50c1swXSAhPT0gJzwvPicpIHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKHRoaXMuX2NyZWF0ZVRyZWUoZWxlbWVudHMpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHsgdGFnOiBmaXJzdEVsZW1lbnQsIGZ1bGxUYWc6IGZpcnN0RWxlbWVudCwgY2hpbGRyZW4gfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmaXJzdEVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF9wYXJzZVRlbXBsYXRlKHN0cjogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHJvdyA9IHN0ci5yZXBsYWNlKC8oW1xcclxcbl0rKS9nLCAnJykucmVwbGFjZSgvIHsyLH0vZywgJycpO1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IHJvdy5tYXRjaCgvKDwuKj8+KXwoW148XSspL2lnKSBhcyBzdHJpbmdbXTtcblxuICAgICAgICByZXR1cm4gZWxlbWVudHMuZmlsdGVyKGl0ZW0gPT4gaXRlbSAhPT0gJycpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjb21waWxlKHN0cjogc3RyaW5nLCBjdHg6IFRlbXBsYXRvckNvbnRleHRUeXBlID0ge30pOiBTVkdFbGVtZW50IHwgRG9jdW1lbnRGcmFnbWVudCB8IEhUTUxFbGVtZW50IHwgVGV4dCB7XG4gICAgICAgIC8vINC/0L7Qu9GD0YfQuNC8INC80LDRgdGB0LjQsiDRgtC10LPQvtCyINC4INGC0LXQutGB0YLQvtCy0YvRhSDQvdC+0LRcbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSB0aGlzLl9wYXJzZVRlbXBsYXRlKHN0cik7XG5cbiAgICAgICAgLy8g0L/RgNC10L7QsdGA0LDQt9GD0LXQvCDRjdGC0L7RgiDQvNCw0YHRgdC40LIg0LIg0LTQtdGA0LXQstC+XG4gICAgICAgIGNvbnN0IHRyZWUgPSB0aGlzLl9jcmVhdGVUcmVlKGVsZW1lbnRzKTtcblxuICAgICAgICAvLyDQstGL0LLQvtC00LjQvCDRjdC70LXQvNC10L3RgtGLINC00LXRgNC10LLQsFxuICAgICAgICByZXR1cm4gdGhpcy5fY3JlYXRlTm9kZSh0cmVlLCBjdHgpO1xuICAgIH1cbn1cblxuY2xhc3MgQ29tcG9uZW50VGVtcGxhdG9yIGV4dGVuZHMgVGVtcGxhdG9yIHtcbiAgICBwcm90ZWN0ZWQgX2FsbG93ZWQgPSBDb21wb25lbnQgYXMgdW5rbm93biBhcyBBbGxvd2VkQ29tcG9uZW50Q29uc3RydWN0b3I7XG59XG5cbmV4cG9ydCBjb25zdCB0ZW1wbGF0b3IgPSBuZXcgQ29tcG9uZW50VGVtcGxhdG9yKCk7IiwiZXhwb3J0IGNvbnN0IHRlbXBsYXRlID0gYFxuICAgICAgICA8bWFpbiBjbGFzcz1cIndyYXBwZXItY2VudGVyXCI+XG4gICAgICAgIDxoMSBjbGFzcz1cInZpc3VhbGx5LWhpZGRlblwiPtCe0YjQuNCx0LrQsDwvaDE+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJlcnJvclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVycm9yX190aXRsZVwiPnt7IGNvZGUgfX08L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlcnJvcl9fZGVzY3JpcHRpb25cIj7QnNGLINGD0LbQtSDRhNC40LrRgdC40Lw8L2Rpdj5cbiAgICAgICAgICAgIDxhIGhyZWY9XCIvXCIgY2xhc3M9XCJlcnJvcl9fbGlua1wiPtCd0LDQt9Cw0LQg0Log0YfQsNGC0LDQvDwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9tYWluPlxuYDsiLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi8uLi9saWIvQ29tcG9uZW50JztcbmltcG9ydCB7IHRlbXBsYXRvciB9IGZyb20gJy4uLy4uL2xpYi9UZW1wbGF0b3InO1xuaW1wb3J0IHsgdGVtcGxhdGUgfSBmcm9tICcuL3RlbXBsYXRlJztcbmltcG9ydCB7IElFcnJvciB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjbGFzcyBFcnIgZXh0ZW5kcyBDb21wb25lbnQ8SUVycm9yPiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdG9yLmNvbXBpbGUodGVtcGxhdGUsIHsgLi4udGhpcy5wcm9wcyB9KTtcbiAgICB9XG59IiwiaW1wb3J0IHsgRXJyIH0gZnJvbSAnLi4vY29tcG9uZW50cy9FcnJvcic7XG5cbmV4cG9ydCBjb25zdCBlcnJvcjQwNCA9IG5ldyBFcnIoe1xuICAgIGNvZGU6IDQwNCxcbn0pO1xuXG4iLCJpbXBvcnQgeyBFcnIgfSBmcm9tICcuLi9jb21wb25lbnRzL0Vycm9yJztcblxuZXhwb3J0IGNvbnN0IGVycm9yNTAwID0gbmV3IEVycih7XG4gICAgY29kZTogNTAwLFxufSk7IiwiZXhwb3J0IGNvbnN0IHRlbXBsYXRlID0gYFxuICAgIDxtYWluIGNsYXNzPVwiY2hhdFwiPlxuICAgICAgICB7eyBjaGF0SGVhZGVyIH19XG4gICAgICAgIHt7IG1lc3NhZ2VzIH19XG4gICAgICAgIHt7IG1lc3NhZ2VGb3JtIH19XG4gICAgICAgIHt7IGRlbGV0ZU1vZGFsIH19XG4gICAgPC9tYWluPlxuYDsiLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi8uLi9saWIvQ29tcG9uZW50JztcbmltcG9ydCB7IHRlbXBsYXRvciB9IGZyb20gJy4uLy4uL2xpYi9UZW1wbGF0b3InO1xuaW1wb3J0IHsgdGVtcGxhdGUgfSBmcm9tICcuL3RlbXBsYXRlJztcbmltcG9ydCB7IElDaGF0IH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGNsYXNzIENoYXQgZXh0ZW5kcyBDb21wb25lbnQ8SUNoYXQ+IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0b3IuY29tcGlsZSh0ZW1wbGF0ZSwgeyAuLi50aGlzLnByb3BzIH0pO1xuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgdGVtcGxhdGUgPSBgXG4gICAgPGJ1dHRvbiBjbGFzcz1cInt7IGNsYXNzTmFtZSB9fVwiIHR5cGU9XCJidXR0b25cIiB0aXRsZT1cInt7IHRpdGxlIH19XCIgb25DbGljaz1cInt7IG9uQ2xpY2sgfX1cIj5cbiAgICAgICAge3sgaWNvbiB9fVxuICAgIDwvYnV0dG9uPlxuYDsiLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi8uLi9saWIvQ29tcG9uZW50JztcbmltcG9ydCB7IHRlbXBsYXRvciB9IGZyb20gJy4uLy4uL2xpYi9UZW1wbGF0b3InO1xuaW1wb3J0IHsgdGVtcGxhdGUgfSBmcm9tICcuL3RlbXBsYXRlJztcbmltcG9ydCB7IElDaGF0QWN0aW9uc0J1dHRvbiB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjbGFzcyBDaGF0QWN0aW9uc0J1dHRvbiBleHRlbmRzIENvbXBvbmVudDxJQ2hhdEFjdGlvbnNCdXR0b24+IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0b3IuY29tcGlsZSh0ZW1wbGF0ZSwgeyAuLi50aGlzLnByb3BzIH0pO1xuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgdGVtcGxhdGUgPSBgXG4gICAgPGRpdiBjbGFzcz1cImNoYXQtYWN0aW9uc1wiPlxuICAgICAgICB7eyBidXR0b25zIH19XG4gICAgPC9kaXY+XG5gOyIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2xpYi9Db21wb25lbnQnO1xuaW1wb3J0IHsgdGVtcGxhdG9yIH0gZnJvbSAnLi4vLi4vbGliL1RlbXBsYXRvcic7XG5pbXBvcnQgeyB0ZW1wbGF0ZSB9IGZyb20gJy4vdGVtcGxhdGUnO1xuaW1wb3J0IHsgSUNoYXRBY3Rpb25zIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcblxuXG5leHBvcnQgY2xhc3MgQ2hhdEFjdGlvbnMgZXh0ZW5kcyBDb21wb25lbnQ8SUNoYXRBY3Rpb25zPiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdG9yLmNvbXBpbGUodGVtcGxhdGUsIHsgLi4udGhpcy5wcm9wcyB9KTtcbiAgICB9XG59IiwiZXhwb3J0IGNvbnN0IHRlbXBsYXRlID0gYFxuICAgIDxidXR0b24gY2xhc3M9XCJjaGF0LWFjdGlvbnNfX2l0ZW1cIiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz1cInt7IG9uQ2xpY2sgfX1cIj5cbiAgICAgICAge3sgaWNvbiB9fVxuICAgICAgICA8c3BhbiBjbGFzcz1cImNoYXQtYWN0aW9uc19faXRlbS1sYWJlbFwiPnt7IGxhYmVsIH19PC9zcGFuPlxuICAgIDwvYnV0dG9uPlxuYDsiLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi8uLi9saWIvQ29tcG9uZW50JztcbmltcG9ydCB7IHRlbXBsYXRvciB9IGZyb20gJy4uLy4uL2xpYi9UZW1wbGF0b3InO1xuaW1wb3J0IHsgdGVtcGxhdGUgfSBmcm9tICcuL3RlbXBsYXRlJztcbmltcG9ydCB7IElDaGF0QWN0aW9uc0l0ZW0gfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5leHBvcnQgY2xhc3MgQ2hhdEFjdGlvbnNJdGVtIGV4dGVuZHMgQ29tcG9uZW50PElDaGF0QWN0aW9uc0l0ZW0+IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0b3IuY29tcGlsZSh0ZW1wbGF0ZSwgeyAuLi50aGlzLnByb3BzIH0pO1xuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgdGVtcGxhdGUgPSBgXG4gICAgPGRpdiBjbGFzcz1cImNoYXQtbW9kYWwge3sgY2xhc3NOYW1lIH19XCI+XG4gICAgICAgIHt7IGNvbnRlbnQgfX1cbiAgICA8L2Rpdj5cbmA7IiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbGliL0NvbXBvbmVudCc7XG5pbXBvcnQgeyB0ZW1wbGF0b3IgfSBmcm9tICcuLi8uLi9saWIvVGVtcGxhdG9yJztcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XG5pbXBvcnQgeyBJQ2hhdEFjdGlvbnNNb2RhbCB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjbGFzcyBDaGF0QWN0aW9uc01vZGFsIGV4dGVuZHMgQ29tcG9uZW50PElDaGF0QWN0aW9uc01vZGFsPiB7XG4gICAgcHVibGljIGdldFhDbGFzc05hbWUoeDogJ2xlZnQnIHwgJ3JpZ2h0Jykge1xuICAgICAgICByZXR1cm4geCA9PT0gJ2xlZnQnID8gJ2NoYXQtbW9kYWxfbGVmdCcgOiAnY2hhdC1tb2RhbF9yaWdodCc7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFlDbGFzc05hbWUoeTogJ3RvcCcgfCAnYm90dG9tJykge1xuICAgICAgICByZXR1cm4geSA9PT0gJ3RvcCcgPyAnY2hhdC1tb2RhbF90b3AnIDogJ2NoYXQtbW9kYWxfYm90dG9tJztcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgY29udGVudCwgeCwgeSB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICByZXR1cm4gdGVtcGxhdG9yLmNvbXBpbGUodGVtcGxhdGUsIHtcbiAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICBjbGFzc05hbWU6IGAke3RoaXMuZ2V0WENsYXNzTmFtZSh4KX0gJHt0aGlzLmdldFlDbGFzc05hbWUoeSl9YFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjbG9zZU1vZGFsID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICBjb25zdCBtb2RhbCA9IHRoaXMuZ2V0Q29udGVudCgpO1xuXG4gICAgICAgIGlmIChtb2RhbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobW9kYWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbG9zZU1vZGFsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xvc2VNb2RhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiZXhwb3J0IGNvbnN0IHRlbXBsYXRlID0gYFxuICAgIDxkaXYgY2xhc3M9XCJjaGF0LXJvd1wiPlxuICAgICAgICA8aW1nIGNsYXNzPVwiY2hhdC1oZWFkZXJfX2F2YXRhclwiIHNyYz1cInt7IGF2YXRhclNyYyB9fVwiIGFsdD1cInt7IGF2YXRhckFsdCB9fVwiIHdpZHRoPVwiMzRcIiBoZWlnaHQ9XCIzNFwiIC8+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjaGF0LWhlYWRlcl9faW5mb3JtYXRpb25cIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjaGF0LWhlYWRlcl9fdGl0bGVcIj57eyBjaGF0TmFtZSB9fTwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNoYXQtaGVhZGVyX19zdGF0dXNcIj57eyBzdGF0dXMgfX08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHt7IGNoYXRBY3Rpb25zQnV0dG9uIH19XG4gICAgICAgIHt7IGNoYXRBY3Rpb25zTW9kYWwgfX1cbiAgICA8L2Rpdj5cbmA7IiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbGliL0NvbXBvbmVudCc7XG5pbXBvcnQgeyB0ZW1wbGF0b3IgfSBmcm9tICcuLi8uLi9saWIvVGVtcGxhdG9yJztcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XG5pbXBvcnQgeyBJQ2hhdEluZm9ybWF0aW9uIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcblxuXG5leHBvcnQgY2xhc3MgQ2hhdEluZm9ybWF0aW9uIGV4dGVuZHMgQ29tcG9uZW50PElDaGF0SW5mb3JtYXRpb24+IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0b3IuY29tcGlsZSh0ZW1wbGF0ZSwgeyAuLi50aGlzLnByb3BzIH0pO1xuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgdGVtcGxhdGUgPSBgXG4gICAgPGZvcm0gY2xhc3M9XCJjaGF0LWhlYWRlci1mb3JtXCIgb25TdWJtaXQ9XCJ7eyBvblN1Ym1pdCB9fVwiPlxuICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImNoYXQtaGVhZGVyLWZvcm1fX2lucHV0XCIgdmFsdWU9XCJ7eyB0aXRsZSB9fVwiIG9uQ2hhbmdlPVwie3sgb25DaGFuZ2UgfX1cIiAvPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cImNoYXQtaGVhZGVyLWZvcm1fX2J1dHRvblwiPtCh0L7RhdGA0LDQvdC40YLRjDwvYnV0dG9uPlxuICAgIDwvZm9ybT5cbmA7IiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbGliL0NvbXBvbmVudCc7XG5pbXBvcnQgeyB0ZW1wbGF0b3IgfSBmcm9tICcuLi8uLi9saWIvVGVtcGxhdG9yJztcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XG5pbXBvcnQgeyBJQ2hhdFJlbmFtZUZvcm0gfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5leHBvcnQgY2xhc3MgQ2hhdFJlbmFtZUZvcm0gZXh0ZW5kcyBDb21wb25lbnQ8SUNoYXRSZW5hbWVGb3JtPiB7XG4gICAgY29uc3RydWN0b3IocHJvcHM6IElDaGF0UmVuYW1lRm9ybSkge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgdGhpcy5tZXNzYWdlID0gdGhpcy5wcm9wcy50aXRsZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nID0gJyc7XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgb25TdWJtaXQsIHRpdGxlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICAgIHJldHVybiB0ZW1wbGF0b3IuY29tcGlsZSh0ZW1wbGF0ZSwge1xuICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICBvbkNoYW5nZTogKHsgdGFyZ2V0IH06IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gdGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblN1Ym1pdDogKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1lc3NhZ2UgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBjaGF0X25hbWU6ICR7dGhpcy5tZXNzYWdlfWApO1xuICAgICAgICAgICAgICAgICAgICBvblN1Ym1pdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmdldENvbnRlbnQoKVxuICAgICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmIGVsZW1lbnQuc3R5bGUuZGlzcGxheSAhPT0gJ25vbmUnKSB7XG4gICAgICAgICAgICBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk/LnNlbGVjdCgpO1xuICAgICAgICB9XG4gICAgfVxufSIsImV4cG9ydCBjb25zdCB0ZW1wbGF0ZSA9IGBcbiAgICA8aGVhZGVyIGNsYXNzPVwiY2hhdC1oZWFkZXJcIj5cbiAgICAgICAge3sgY2hhdEluZm9ybWF0aW9uIH19XG4gICAgICAgIHt7IGNoYXRSZW5hbWVGb3JtIH19XG4gICAgPC9oZWFkZXI+XG5gOyIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2xpYi9Db21wb25lbnQnO1xuaW1wb3J0IHsgdGVtcGxhdG9yIH0gZnJvbSAnLi4vLi4vbGliL1RlbXBsYXRvcic7XG5pbXBvcnQgeyB0ZW1wbGF0ZSB9IGZyb20gJy4vdGVtcGxhdGUnO1xuaW1wb3J0IHsgSUNoYXRIZWFkZXIgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5leHBvcnQgY2xhc3MgQ2hhdEhlYWRlciBleHRlbmRzIENvbXBvbmVudDxJQ2hhdEhlYWRlcj4ge1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRvci5jb21waWxlKHRlbXBsYXRlLCB7IC4uLnRoaXMucHJvcHMgfSk7XG4gICAgfVxufSIsImV4cG9ydCBjb25zdCB0ZW1wbGF0ZSA9IGBcbiAgICA8bGkgY2xhc3M9XCJjaGF0LWl0ZW0td3JhcHBlclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2hhdC1pdGVtXCI+XG4gICAgICAgICAgICA8aW1nIGNsYXNzPVwiY2hhdC1pdGVtX19hdmF0YXJcIiBzcmM9XCJ7eyBhdmF0YXJTcmMgfX1cIiBhbHQ9XCJ7eyBhdmF0YXJBbHQgfX1cIiB3aWR0aD1cIjQ3XCIgaGVpZ2h0PVwiNDdcIiAvPlxuICAgICAgICAgICAgPGgzIGNsYXNzPVwiY2hhdC1pdGVtX190aXRsZVwiPlxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJ7eyBjaGF0VXJsIH19XCIgY2xhc3M9XCJjaGF0LWl0ZW1fX2xpbmtcIj57eyBjaGF0TmFtZSB9fTwvYT5cbiAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2hhdC1pdGVtX19tZXNzYWdlXCI+e3sgY2hhdE1lc3NhZ2UgfX08L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjaGF0LWl0ZW1fX3RpbWUtd3JhcHBlclwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjaGF0LWl0ZW1fX3RpbWVcIj57eyBkYXRlIH19PC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHt7IG5ld01lc3NhZ2UgfX1cbiAgICAgICAgPC9kaXY+XG4gICAgPC9saT5cbmA7IiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbGliL0NvbXBvbmVudCc7XG5pbXBvcnQgeyB0ZW1wbGF0b3IgfSBmcm9tICcuLi8uLi9saWIvVGVtcGxhdG9yJztcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XG5pbXBvcnQgeyBJQ2hhdEl0ZW0gfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5cbmV4cG9ydCBjbGFzcyBDaGF0SXRlbSBleHRlbmRzIENvbXBvbmVudDxJQ2hhdEl0ZW0+IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0b3IuY29tcGlsZSh0ZW1wbGF0ZSwgeyAuLi50aGlzLnByb3BzIH0pO1xuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgdGVtcGxhdGUgPSBgXG4gICAgPGRpdiBjbGFzcz1cImNoYXQtaXRlbV9fbmV3LW1lc3NhZ2VcIj5cbiAgICAgICAge3sgY291bnQgfX1cbiAgICA8L2Rpdj5cbmA7IiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbGliL0NvbXBvbmVudCc7XG5pbXBvcnQgeyB0ZW1wbGF0b3IgfSBmcm9tICcuLi8uLi9saWIvVGVtcGxhdG9yJztcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XG5pbXBvcnQgeyBJTmV3TWVzc2FnZSB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjbGFzcyBOZXdNZXNzYWdlIGV4dGVuZHMgQ29tcG9uZW50PElOZXdNZXNzYWdlPiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdG9yLmNvbXBpbGUodGVtcGxhdGUsIHsgLi4udGhpcy5wcm9wcyB9KTtcbiAgICB9XG59IiwiZXhwb3J0IGNvbnN0IHRlbXBsYXRlID0gYFxuICAgIDw+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiY2hhdC1pdGVtX195b3UtbGFiZWxcIj7QktGLOjwvc3Bhbj4ge3sgbWVzc2FnZSB9fVxuICAgIDwvPlxuYDsiLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi8uLi9saWIvQ29tcG9uZW50JztcbmltcG9ydCB7IHRlbXBsYXRvciB9IGZyb20gJy4uLy4uL2xpYi9UZW1wbGF0b3InO1xuaW1wb3J0IHsgdGVtcGxhdGUgfSBmcm9tICcuL3RlbXBsYXRlJztcbmltcG9ydCB7IElDaGF0SXRlbU91dGdvaW5nTWVzc2FnZSB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjbGFzcyBDaGFySXRlbU91dGdvaW5nTWVzc2FnZSBleHRlbmRzIENvbXBvbmVudDxJQ2hhdEl0ZW1PdXRnb2luZ01lc3NhZ2U+IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0b3IuY29tcGlsZSh0ZW1wbGF0ZSwgeyAuLi50aGlzLnByb3BzIH0pO1xuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgdGVtcGxhdGUgPSBgXG4gICAgPGRpdiBjbGFzcz1cImNoYXRzLXdyYXBwZXJcIj5cbiAgICAgICAgPGgxIGNsYXNzPVwidmlzdWFsbHktaGlkZGVuXCI+e3sgcGFnZVRpdGxlIH19PC9oMT5cbiAgICAgICAgPGFzaWRlIGNsYXNzPVwiY2hhdHMtd3JhcHBlcl9fYXNpZGVcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsaW5rLXByb2ZpbGUtd3JhcHBlclwiPlxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIvcHJvZmlsZVwiIGNsYXNzPVwibGluay1wcm9maWxlXCI+0J/RgNC+0YTQuNC70Yw8L2E+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjaGF0cy1zZWFyY2hcIj5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInNlYXJjaFwiIGNsYXNzPVwiY2hhdHMtc2VhcmNoX19pbnB1dCBqcy1pbnB1dC1zZWFyY2hcIiBwbGFjZWhvbGRlcj1cItCf0L7QuNGB0LpcIiBuYW1lPVwic2VhcmNoXCIgIGF1dG9jb21wbGV0ZT1cIm9mZlwiIG9uQ2hhbmdlPVwie3sgb25DaGFuZ2UgfX1cIiAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8c2VjdGlvbiBjbGFzcz1cImNoYXRzLWxpc3RcIj5cbiAgICAgICAgICAgICAgICA8aDIgY2xhc3M9XCJ2aXN1YWxseS1oaWRkZW5cIj7QodC/0LjRgdC+0Log0YfQsNGC0L7QsjwvaDI+XG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwiY2hhdHMtbGlzdF9fY29udGVudFwiPlxuICAgICAgICAgICAgICAgICAgICB7eyBjaGF0SXRlbXMgfX1cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICA8L2FzaWRlPlxuICAgICAgICB7eyBjb250ZW50IH19XG4gICAgPC9kaXY+XG5gOyIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2xpYi9Db21wb25lbnQnO1xuaW1wb3J0IHsgdGVtcGxhdG9yIH0gZnJvbSAnLi4vLi4vbGliL1RlbXBsYXRvcic7XG5pbXBvcnQgeyB0ZW1wbGF0ZSB9IGZyb20gJy4vdGVtcGxhdGUnO1xuaW1wb3J0IHsgSUNoYXRzIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGNsYXNzIENoYXRzIGV4dGVuZHMgQ29tcG9uZW50PElDaGF0cz4ge1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRvci5jb21waWxlKHRlbXBsYXRlLCB7IC4uLnRoaXMucHJvcHMgfSk7XG4gICAgfVxufSIsImV4cG9ydCBjb25zdCB0ZW1wbGF0ZSA9IGBcbiAgICA8c3ZnIHdpZHRoPVwiM1wiIGhlaWdodD1cIjE2XCIgdmlld0JveD1cIjAgMCAzIDE2XCIgZmlsbD1cIm5vbmVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XG4gICAgICAgIDxjaXJjbGUgY3g9XCIxLjVcIiBjeT1cIjJcIiByPVwiMS41XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIC8+XG4gICAgICAgIDxjaXJjbGUgY3g9XCIxLjVcIiBjeT1cIjhcIiByPVwiMS41XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIC8+XG4gICAgICAgIDxjaXJjbGUgY3g9XCIxLjVcIiBjeT1cIjE0XCIgcj1cIjEuNVwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiAvPlxuICAgIDwvc3ZnPlxuYDsiLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi8uLi9saWIvQ29tcG9uZW50JztcbmltcG9ydCB7IHRlbXBsYXRvciB9IGZyb20gJy4uLy4uL2xpYi9UZW1wbGF0b3InO1xuaW1wb3J0IHsgdGVtcGxhdGUgfSBmcm9tICcuL3RlbXBsYXRlJztcblxuZXhwb3J0IGNsYXNzIEFjdGlvbnNJY29uIGV4dGVuZHMgQ29tcG9uZW50PHt9PiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdG9yLmNvbXBpbGUodGVtcGxhdGUpO1xuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgdGVtcGxhdGUgPSBgXG4gICAgPHN2ZyB3aWR0aD1cIjIyXCIgaGVpZ2h0PVwiMTlcIiB2aWV3Qm94PVwiMCAwIDIyIDE5XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICA8cGF0aCBkPVwiTTAgMTloMjJ2LTEuNUgwelwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiAvPlxuICAgICAgICA8cGF0aCBmaWxsLXJ1bGU9XCJldmVub2RkXCIgY2xpcC1ydWxlPVwiZXZlbm9kZFwiIGQ9XCJNMTYuMjYgMEwxOSAyLjc0bC0yLjA1NSAyLjA1NS0yLjc0LTIuNzRMMTYuMjYgMHptLTIuNzQgMi43NGwyLjc0IDIuNzRMNi43NCAxNUg0di0yLjc0bDkuNTItOS41MnpcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgLz5cbiAgICA8L3N2Zz5cbmA7IiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbGliL0NvbXBvbmVudCc7XG5pbXBvcnQgeyB0ZW1wbGF0b3IgfSBmcm9tICcuLi8uLi9saWIvVGVtcGxhdG9yJztcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XG5cbmV4cG9ydCBjbGFzcyBSZW5hbWVJY29uIGV4dGVuZHMgQ29tcG9uZW50PHt9PiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdG9yLmNvbXBpbGUodGVtcGxhdGUpO1xuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgdGVtcGxhdGUgPSBgXG4gICAgPHN2ZyB3aWR0aD1cIjIyXCIgaGVpZ2h0PVwiMjJcIiB2aWV3Qm94PVwiMCAwIDIyIDIyXCIgZmlsbD1cIm5vbmVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XG4gICAgICAgIDxjaXJjbGUgY3g9XCIxMVwiIGN5PVwiMTFcIiByPVwiMTAuMjVcIiBzdHJva2Utd2lkdGg9XCIxLjVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiAvPlxuICAgICAgICA8cGF0aCBzdHJva2Utd2lkdGg9XCIxLjVcIiBkPVwiTTcuMTExIDcuMTExbDcuNzc4IDcuNzc4bS03Ljc3OCAwbDcuNzc4LTcuNzc4XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgLz5cbiAgICA8L3N2Zz5cbmA7IiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbGliL0NvbXBvbmVudCc7XG5pbXBvcnQgeyB0ZW1wbGF0b3IgfSBmcm9tICcuLi8uLi9saWIvVGVtcGxhdG9yJztcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XG5cbmV4cG9ydCBjbGFzcyBEZWxldGVJY29uIGV4dGVuZHMgQ29tcG9uZW50PHt9PiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdG9yLmNvbXBpbGUodGVtcGxhdGUpO1xuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgdGVtcGxhdGUgPSBgXG4gICAgPGRpdiBjbGFzcz1cImNoYXRfX2NvbnRlbnRcIj5cbiAgICAgICAgPGgyIGNsYXNzPVwidmlzdWFsbHktaGlkZGVuXCI+0KHQv9C40YHQvtC6INGB0L7QvtCx0YnQtdC90LjQuTwvaDI+XG4gICAgICAgIDx1bCBjbGFzcz1cImNoYXRfX21lc3NhZ2VzXCI+XG4gICAgICAgICAgICB7eyBtZXNzYWdlcyB9fVxuICAgICAgICA8L3VsPlxuICAgIDwvZGl2PlxuYDsiLCJleHBvcnQgY29uc3QgdGVtcGxhdGUgPSBgXG4gICAgPGxpIGNsYXNzPVwibWVzc2FnZXMtZGF0ZVwiPlxuICAgICAgICB7eyBkYXRlIH19XG4gICAgPC9saT5cbmA7IiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbGliL0NvbXBvbmVudCc7XG5pbXBvcnQgeyB0ZW1wbGF0b3IgfSBmcm9tICcuLi8uLi9saWIvVGVtcGxhdG9yJztcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XG5pbXBvcnQgeyBJTWVzc2FnZURhdGUgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5leHBvcnQgY2xhc3MgTWVzc2FnZURhdGUgZXh0ZW5kcyBDb21wb25lbnQ8SU1lc3NhZ2VEYXRlPiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdG9yLmNvbXBpbGUodGVtcGxhdGUsIHsgLi4udGhpcy5wcm9wcyB9KTtcbiAgICB9XG59IiwiZXhwb3J0IGNvbnN0IHRlbXBsYXRlID0gYFxuICAgIDxsaSBjbGFzcz1cIm1lc3NhZ2Uge3sgY2xhc3NOYW1lIH19XCI+XG4gICAgICAgIHt7IGNvbnRlbnQgfX1cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJtZXNzYWdlX190aW1lXCI+XG4gICAgICAgICAgICB7eyB0aW1lSWNvbiB9fVxuICAgICAgICAgICAgPHRpbWU+e3sgdGltZSB9fTwvdGltZT5cbiAgICAgICAgPC9zcGFuPlxuICAgIDwvbGk+XG5gOyIsImV4cG9ydCBjb25zdCB0ZW1wbGF0ZSA9IGBcbiAgICA8c3ZnIHdpZHRoPVwiOFwiIGhlaWdodD1cIjRcIiB2aWV3Qm94PVwiMCAwIDExIDVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XG4gICAgICAgIDxsaW5lIHkxPVwiLTAuNVwiIHgyPVwiMy43NjVcIiB5Mj1cIi0wLjVcIiB0cmFuc2Zvcm09XCJtYXRyaXgoMC43MDU5MzMgMC43MDgyNzggLTAuNzA1OTMzIDAuNzA4Mjc4IDAuNzAwMTk1IDIuMzMzMDEpXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgLz5cbiAgICAgICAgPGxpbmUgeTE9XCItMC41XCIgeDI9XCI1LjY0NzVcIiB5Mj1cIi0wLjVcIiB0cmFuc2Zvcm09XCJtYXRyaXgoMC43MDU5MzMgLTAuNzA4Mjc4IDAuNzA1OTMzIDAuNzA4Mjc4IDMuMzU4NCA1KVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIC8+XG4gICAgPC9zdmc+XG5gOyIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2xpYi9Db21wb25lbnQnO1xuaW1wb3J0IHsgdGVtcGxhdG9yIH0gZnJvbSAnLi4vLi4vbGliL1RlbXBsYXRvcic7XG5pbXBvcnQgeyB0ZW1wbGF0ZSB9IGZyb20gJy4vdGVtcGxhdGUnO1xuXG5leHBvcnQgY2xhc3MgU2VudEljb24gZXh0ZW5kcyBDb21wb25lbnQ8e30+IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0b3IuY29tcGlsZSh0ZW1wbGF0ZSk7XG4gICAgfVxufSIsImV4cG9ydCBjb25zdCB0ZW1wbGF0ZSA9IGBcbiAgICA8c3ZnIHdpZHRoPVwiOFwiIGhlaWdodD1cIjRcIiB2aWV3Qm94PVwiMCAwIDExIDVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XG4gICAgICAgIDxsaW5lIHkxPVwiLTAuNVwiIHgyPVwiMy43NjVcIiB5Mj1cIi0wLjVcIiB0cmFuc2Zvcm09XCJtYXRyaXgoMC43MDU5MzMgMC43MDgyNzggLTAuNzA1OTMzIDAuNzA4Mjc4IDAuNzAwMTk1IDIuMzMzMDEpXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgLz5cbiAgICAgICAgPGxpbmUgeTE9XCItMC41XCIgeDI9XCI1LjY0NzVcIiB5Mj1cIi0wLjVcIiB0cmFuc2Zvcm09XCJtYXRyaXgoMC43MDU5MzMgLTAuNzA4Mjc4IDAuNzA1OTMzIDAuNzA4Mjc4IDMuMzU4NCA1KVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIC8+XG4gICAgICAgIDxsaW5lIHkxPVwiLTAuNVwiIHgyPVwiNS42NDc1XCIgeTI9XCItMC41XCIgdHJhbnNmb3JtPVwibWF0cml4KDAuNzA1OTMzIC0wLjcwODI3OCAwLjcwNTkzMyAwLjcwODI3OCA2LjAxNjExIDUpXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgLz5cbiAgICA8L3N2Zz5cbmA7IiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbGliL0NvbXBvbmVudCc7XG5pbXBvcnQgeyB0ZW1wbGF0b3IgfSBmcm9tICcuLi8uLi9saWIvVGVtcGxhdG9yJztcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XG5cbmV4cG9ydCBjbGFzcyBSZWFkSWNvbiBleHRlbmRzIENvbXBvbmVudDx7fT4ge1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRvci5jb21waWxlKHRlbXBsYXRlKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbGliL0NvbXBvbmVudCc7XG5pbXBvcnQgeyB0ZW1wbGF0b3IgfSBmcm9tICcuLi8uLi9saWIvVGVtcGxhdG9yJztcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XG5pbXBvcnQgeyBJTWVzc2FnZSB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBTZW50SWNvbiB9IGZyb20gJy4uLy4uL2Fzc2V0cy9TZW50SWNvbic7XG5pbXBvcnQgeyBSZWFkSWNvbiB9IGZyb20gJy4uLy4uL2Fzc2V0cy9SZWFkSWNvbic7XG5cbmV4cG9ydCBjbGFzcyBNZXNzYWdlIGV4dGVuZHMgQ29tcG9uZW50PElNZXNzYWdlPiB7XG4gICAgc2VudEljb24hOiBDb21wb25lbnQ7XG5cbiAgICByZWFkSWNvbiE6IENvbXBvbmVudDtcblxuICAgIHB1YmxpYyBnZXRBdHRhY2hDbGFzc05hbWUoYXR0YWNoPzogYm9vbGVhbikge1xuICAgICAgICByZXR1cm4gYXR0YWNoID8gJ21lc3NhZ2VfYXR0YWNoJyA6ICcnO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTdGF0dXNDbGFzc05hbWUodHlwZTogJ2luY29taW5nJyB8ICdvdXRnb2luZycsIHN0YXR1cz86ICdyZWFkJyB8ICdzZW50Jykge1xuICAgICAgICByZXR1cm4gdHlwZSA9PT0gJ291dGdvaW5nJyA/IChcbiAgICAgICAgICAgIHN0YXR1cyA9PT0gJ3JlYWQnID8gJ21lc3NhZ2VfcmVhZCcgOiAoXG4gICAgICAgICAgICAgICAgc3RhdHVzID09PSAnc2VudCcgPyAnbWVzc2FnZV9zZW50JyA6ICcnXG4gICAgICAgICAgICApXG4gICAgICAgICkgOiAnJztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VHlwZUNsYXNzTmFtZSh0eXBlOiAnaW5jb21pbmcnIHwgJ291dGdvaW5nJykge1xuICAgICAgICByZXR1cm4gdHlwZSA9PT0gJ2luY29taW5nJyA/ICdtZXNzYWdlX2luY29taW5nJyA6IChcbiAgICAgICAgICAgIHR5cGUgPT09ICdvdXRnb2luZycgPyAnbWVzc2FnZV9vdXRnb2luZycgOiAnJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRUaW1lSWNvbih0eXBlOiAnaW5jb21pbmcnIHwgJ291dGdvaW5nJywgc3RhdHVzPzogJ3JlYWQnIHwgJ3NlbnQnKSB7XG4gICAgICAgIHJldHVybiB0eXBlID09PSAnb3V0Z29pbmcnID8gKFxuICAgICAgICAgICAgc3RhdHVzID09PSAncmVhZCcgPyB0aGlzLnJlYWRJY29uIDogKFxuICAgICAgICAgICAgICAgIHN0YXR1cyA9PT0gJ3NlbnQnID8gdGhpcy5zZW50SWNvbiA6ICcnXG4gICAgICAgICAgICApXG4gICAgICAgICkgOiAnJztcbiAgICB9XG5cbiAgICBwdWJsaWMgcHJlcmVuZGVyKCkge1xuICAgICAgICB0aGlzLnNlbnRJY29uID0gbmV3IFNlbnRJY29uKCk7XG4gICAgICAgIHRoaXMucmVhZEljb24gPSBuZXcgUmVhZEljb24oKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBhdHRhY2gsXG4gICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgICAgdGltZSxcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICAgIHJldHVybiB0ZW1wbGF0b3IuY29tcGlsZSh0ZW1wbGF0ZSwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBgJHt0aGlzLmdldEF0dGFjaENsYXNzTmFtZShhdHRhY2gpfSAke3RoaXMuZ2V0U3RhdHVzQ2xhc3NOYW1lKHR5cGUsIHN0YXR1cyl9ICR7dGhpcy5nZXRUeXBlQ2xhc3NOYW1lKHR5cGUpfWAsXG4gICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgdGltZSxcbiAgICAgICAgICAgIHRpbWVJY29uOiB0aGlzLmdldFRpbWVJY29uKHR5cGUsIHN0YXR1cyksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuIiwiZXhwb3J0IGNvbnN0IHRlbXBsYXRlID0gYFxuICAgIDxkaXYgY2xhc3M9XCJtZXNzYWdlX19jb250ZW50XCI+e3sgdGV4dCB9fTxzcGFuIGNsYXNzPVwie3sgdGltZUhvbGRlckNsYXNzTmFtZSB9fVwiPjwvc3Bhbj48L2Rpdj5cbmA7IiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbGliL0NvbXBvbmVudCc7XG5pbXBvcnQgeyB0ZW1wbGF0b3IgfSBmcm9tICcuLi8uLi9saWIvVGVtcGxhdG9yJztcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XG5pbXBvcnQgeyBJTWVzc2FnZUNvbnRlbnQgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5leHBvcnQgY2xhc3MgTWVzc2FnZUNvbnRlbnQgZXh0ZW5kcyBDb21wb25lbnQ8SU1lc3NhZ2VDb250ZW50PiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IHRleHQsIGxhc3QgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0b3IuY29tcGlsZSh0ZW1wbGF0ZSwge1xuICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgIHRpbWVIb2xkZXJDbGFzc05hbWU6IGxhc3QgPyAnbWVzc2FnZV9fdGltZS1ob2xkZXInIDogJycsXG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgdGVtcGxhdGUgPSBgXG4gICAgPHBpY3R1cmU+XG4gICAgICAgIDxzb3VyY2Ugc3Jjc2V0PVwie3sgc3Jjc2V0IH19XCIgLz5cbiAgICAgICAgPGltZyBzcmM9XCJ7eyBzcmMgfX1cIiBhbHQ9XCJ7eyBhbHQgfX1cIiAvPlxuICAgIDwvcGljdHVyZT5cbmA7IiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbGliL0NvbXBvbmVudCc7XG5pbXBvcnQgeyB0ZW1wbGF0b3IgfSBmcm9tICcuLi8uLi9saWIvVGVtcGxhdG9yJztcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XG5pbXBvcnQgeyBJTWVzc2FnZUF0dGFjaCB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjbGFzcyBNZXNzYWdlQXR0YWNoIGV4dGVuZHMgQ29tcG9uZW50PElNZXNzYWdlQXR0YWNoPiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdG9yLmNvbXBpbGUodGVtcGxhdGUsIHsgLi4udGhpcy5wcm9wcyB9KTtcbiAgICB9XG59IiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbGliL0NvbXBvbmVudCc7XG5pbXBvcnQgeyB0ZW1wbGF0b3IgfSBmcm9tICcuLi8uLi9saWIvVGVtcGxhdG9yJztcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XG5pbXBvcnQgeyBNZXNzYWdlRGF0ZSB9IGZyb20gJy4uL01lc3NhZ2VEYXRlJztcbmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tICcuLi9NZXNzYWdlJztcbmltcG9ydCB7IE1lc3NhZ2VDb250ZW50IH0gZnJvbSAnLi4vTWVzc2FnZUNvbnRlbnQnO1xuaW1wb3J0IHsgTWVzc2FnZUF0dGFjaCB9IGZyb20gJy4uL01lc3NhZ2VBdHRhY2gnO1xuXG5leHBvcnQgY2xhc3MgTWVzc2FnZXMgZXh0ZW5kcyBDb21wb25lbnQ8e30+IHtcbiAgICBtZXNzYWdlczogQ29tcG9uZW50W10gPSBbXTtcblxuICAgIHByZXJlbmRlcigpIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlcyA9IFtcbiAgICAgICAgICAgIG5ldyBNZXNzYWdlRGF0ZSh7IGRhdGU6ICcxOSDQuNGO0L3RjycgfSksXG4gICAgICAgICAgICBuZXcgTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgY29udGVudDogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgTWVzc2FnZUNvbnRlbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ9Cf0YDQuNCy0LXRgiEg0KHQvNC+0YLRgNC4LCDRgtGD0YIg0LLRgdC/0LvRi9C7INC40L3RgtC10YDQtdGB0L3Ri9C5INC60YPRgdC+0Log0LvRg9C90L3QvtC5INC60L7RgdC80LjRh9C10YHQutC+0Lkg0LjRgdGC0L7RgNC40Lgg4oCUINCd0JDQodCQINCyINC60LDQutC+0Lkt0YLQviDQvNC+0LzQtdC90YIg0L/QvtC/0YDQvtGB0LjQu9CwINCl0LDRgdGB0LXQu9GM0LHQu9Cw0LQg0LDQtNCw0L/RgtC40YDQvtCy0LDRgtGMINC80L7QtNC10LvRjCBTV0Mg0LTQu9GPINC/0L7Qu9C10YLQvtCyINC90LAg0JvRg9C90YMuINCh0LXQudGH0LDRgSDQvNGLINCy0YHQtSDQt9C90LDQtdC8INGH0YLQviDQsNGB0YLRgNC+0L3QsNCy0YLRiyDQu9C10YLQsNC70Lgg0YEg0LzQvtC00LXQu9GM0Y4gNTAwIEVMIOKAlCDQuCDQuiDRgdC70L7QstGDINCz0L7QstC+0YDRjywg0LLRgdC1INGC0YPRiNC60Lgg0Y3RgtC40YUg0LrQsNC80LXRgCDQstGB0LUg0LXRidC1INC90LDRhdC+0LTRj9GC0YHRjyDQvdCwINC/0L7QstC10YDRhdC90L7RgdGC0Lgg0JvRg9C90YssINGC0LDQuiDQutCw0Log0LDRgdGC0YDQvtC90LDQstGC0Ysg0YEg0YHQvtCx0L7QuSDQt9Cw0LHRgNCw0LvQuCDRgtC+0LvRjNC60L4g0LrQsNGB0YHQtdGC0Ysg0YEg0L/Qu9C10L3QutC+0LkuJyxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBNZXNzYWdlQ29udGVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ9Cl0LDRgdGB0LXQu9GM0LHQu9Cw0LQg0LIg0LjRgtC+0LPQtSDQsNC00LDQv9GC0LjRgNC+0LLQsNC7IFNXQyDQtNC70Y8g0LrQvtGB0LzQvtGB0LAsINC90L4g0YfRgtC+LdGC0L4g0L/QvtGI0LvQviDQvdC1INGC0LDQuiDQuCDQvdCwINGA0LDQutC10YLRgyDQvtC90Lgg0YLQsNC6INC90LjQutC+0LPQtNCwINC4INC90LUg0L/QvtC/0LDQu9C4LiDQktGB0LXQs9C+INC40YUg0LHRi9C70L4g0L/RgNC+0LjQt9Cy0LXQtNC10L3QviAyNSDRiNGC0YPQuiwg0L7QtNC90YMg0LjQtyDQvdC40YUg0L3QtdC00LDQstC90L4g0L/RgNC+0LTQsNC70Lgg0L3QsCDQsNGD0LrRhtC40L7QvdC1INC30LAgNDUwMDAg0LXQstGA0L4uJyxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB0aW1lOiAnMTE6NTYnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdpbmNvbWluZycsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICBhdHRhY2g6IHRydWUsXG4gICAgICAgICAgICAgICAgY29udGVudDogW1xuICAgICAgICAgICAgICAgICAgICBuZXcgTWVzc2FnZUF0dGFjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICdwaG90by5qcGcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiAnL2Fzc2V0cy9waG90by5qcGcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3Jjc2V0OiAnL2Fzc2V0cy9waG90by53ZWJwJyxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHRpbWU6ICcxMTo1NicsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2luY29taW5nJyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IE1lc3NhZ2VDb250ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAn0JrRgNGD0YLQviEnLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHN0YXR1czogJ3JlYWQnLFxuICAgICAgICAgICAgICAgIHRpbWU6ICcxMjowMCcsXG4gICAgICAgICAgICAgICAgdHlwZTogJ291dGdvaW5nJyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRvci5jb21waWxlKHRlbXBsYXRlLCB7IG1lc3NhZ2VzOiB0aGlzLm1lc3NhZ2VzIH0pO1xuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgdGVtcGxhdGUgPSBgXG4gICAgPGZvcm0gY2xhc3M9XCJtZXNzYWdlLWZvcm1cIiBvblN1Ym1pdD1cInt7IG9uU3VibWl0IH19XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjaGF0LXJvd1wiPlxuICAgICAgICAgICAge3sgYnV0dG9uQXR0YWNoIH19XG4gICAgICAgICAgICB7eyBhdHRhY2hNb2RhbCB9fVxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJtZXNzYWdlLWZvcm1fX2lucHV0XCIgcGxhY2Vob2xkZXI9XCLQodC+0L7QsdGJ0LXQvdC40LVcIiBuYW1lPVwibWVzc2FnZVwiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIG9uQ2hhbmdlPVwie3sgb25DaGFuZ2UgfX1cIiAvPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJtZXNzYWdlLWZvcm1fX3N1Ym1pdFwiIHRpdGxlPVwi0J7RgtC/0YDQsNCy0LjRgtGMINGB0L7QvtCx0YnQtdC90LjQtVwiPlxuICAgICAgICAgICAgICAgIDxzdmcgd2lkdGg9XCIxM1wiIGhlaWdodD1cIjEyXCIgdmlld0JveD1cIjAgMCAxMyAxMlwiIGZpbGw9XCJub25lXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICAgICAgICAgICAgICA8cmVjdCB5PVwiNS4yMDAyXCIgd2lkdGg9XCIxMVwiIGhlaWdodD1cIjEuNlwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTcgMUwxMSA2TDcgMTFcIiBzdHJva2Utd2lkdGg9XCIxLjZcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiAvPlxuICAgICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgPC9idXR0b24+ICAgICAgICAgICAgXG4gICAgICAgIDwvZGl2PlxuICAgIDwvZm9ybT5cbmA7IiwiZXhwb3J0IGNvbnN0IHRlbXBsYXRlID0gYFxuICAgIDxzdmcgd2lkdGg9XCIzMlwiIGhlaWdodD1cIjMyXCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAgICAgICAgPHBhdGggZmlsbC1ydWxlPVwiZXZlbm9kZFwiIGNsaXAtcnVsZT1cImV2ZW5vZGRcIiBkPVwiTTcuMTg3IDEzLjVsNy41NzYtNy41NzYuOTQzLjk0My03LjU3NyA3LjU3Ni0uOTQyLS45NDN6TTkuNyAxNi4wMTRsNy41NzctNy41NzYuOTQzLjk0My03LjU3NiA3LjU3Ni0uOTQzLS45NDN6bTUuMzQzIDUuMzQzbDcuNTc3LTcuNTc3Ljk0Mi45NDMtNy41NzYgNy41NzYtLjk0My0uOTQyem0yLjUxNCAyLjUxM2w3LjU3Ni03LjU3Ni45NDMuOTQzLTcuNTc2IDcuNTc2LS45NDMtLjk0MnpcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgLz5cbiAgICAgICAgPHBhdGggZmlsbC1ydWxlPVwiZXZlbm9kZFwiIGNsaXAtcnVsZT1cImV2ZW5vZGRcIiBkPVwiTTE3LjU1NyAyMy44N2MtMi42MTUgMi42MTYtNi44NDUgMi42MjUtOS40NDkuMDIyLTIuNjAzLTIuNjA0LTIuNTk0LTYuODM0LjAyMS05LjQ1bC0uOTQyLS45NDJjLTMuMTM5IDMuMTM4LTMuMTUgOC4yMTUtLjAyNiAxMS4zMzkgMy4xMjUgMy4xMjQgOC4yMDEgMy4xMTMgMTEuMzQtLjAyNWwtLjk0NC0uOTQzem01LjA2My0xMC4wOWwuOTQyLjk0M2MyLjQ0MS0yLjQ0IDIuNDUtNi4zODkuMDItOC44MTktMi40My0yLjQzLTYuMzc5LTIuNDIxLTguODIuMDJsLjk0NC45NDNjMS45MTctMS45MTggNS4wMi0xLjkyNSA2LjkyOS0uMDE2IDEuOTEgMS45MSAxLjkwMiA1LjAxMi0uMDE2IDYuOTN6XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIC8+XG4gICAgICAgIDxwYXRoIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiBjbGlwLXJ1bGU9XCJldmVub2RkXCIgZD1cIk05LjcgMTYuMDE1Yy0xLjc0MyAxLjc0My0xLjc0OSA0LjU2My0uMDEzIDYuMyAxLjczNSAxLjczNSA0LjU1NiAxLjcyOSA2LjMtLjAxNWwtLjk0NC0uOTQzYTMuMTE4IDMuMTE4IDAgMCAxLTQuNDEuMDEgMy4xMTggMy4xMTggMCAwIDEgLjAxLTQuNDFsLS45NDItLjk0MnpcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgLz5cbiAgICA8L3N2Zz5cbmA7IiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbGliL0NvbXBvbmVudCc7XG5pbXBvcnQgeyB0ZW1wbGF0b3IgfSBmcm9tICcuLi8uLi9saWIvVGVtcGxhdG9yJztcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XG5cbmV4cG9ydCBjbGFzcyBBdHRhY2hJY29uIGV4dGVuZHMgQ29tcG9uZW50PHt9PiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdG9yLmNvbXBpbGUodGVtcGxhdGUpO1xuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgdGVtcGxhdGUgPSBgXG4gICAgPHN2ZyB3aWR0aD1cIjIyXCIgaGVpZ2h0PVwiMjJcIiB2aWV3Qm94PVwiMCAwIDIyIDIyXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICA8cGF0aCBmaWxsLXJ1bGU9XCJldmVub2RkXCIgY2xpcC1ydWxlPVwiZXZlbm9kZFwiIGQ9XCJNNCAxLjVoMTRBMi41IDIuNSAwIDAgMSAyMC41IDR2MTBsLTUuOTgtMS41OTVBMTEuOTk4IDExLjk5OCAwIDAgMCAxMS40MjcgMTJoLS44NTZjLTEuMDQzIDAtMi4wODMuMTM2LTMuMDkxLjQwNUwxLjUgMTRWNEEyLjUgMi41IDAgMCAxIDQgMS41ek0wIDRhNCA0IDAgMCAxIDQtNGgxNGE0IDQgMCAwIDEgNCA0djE0YTQgNCAwIDAgMS00IDRINGE0IDQgMCAwIDEtNC00VjR6bTggMmEyIDIgMCAxIDEtNCAwIDIgMiAwIDAgMSA0IDB6XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIC8+XG4gICAgPC9zdmc+XG5gOyIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2xpYi9Db21wb25lbnQnO1xuaW1wb3J0IHsgdGVtcGxhdG9yIH0gZnJvbSAnLi4vLi4vbGliL1RlbXBsYXRvcic7XG5pbXBvcnQgeyB0ZW1wbGF0ZSB9IGZyb20gJy4vdGVtcGxhdGUnO1xuXG5leHBvcnQgY2xhc3MgUGhvdG9JY29uIGV4dGVuZHMgQ29tcG9uZW50PHt9PiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdG9yLmNvbXBpbGUodGVtcGxhdGUpO1xuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgdGVtcGxhdGUgPSBgXG4gICAgPHN2ZyB2aWV3Qm94PVwiMCAwIDIyIDIyXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICA8cGF0aCBmaWxsLXJ1bGU9XCJldmVub2RkXCIgY2xpcC1ydWxlPVwiZXZlbm9kZFwiIGQ9XCJNNCAxLjVoMTRBMi41IDIuNSAwIDAgMSAyMC41IDR2OEgxNmE0IDQgMCAwIDAtNCA0djQuNUg0QTIuNSAyLjUgMCAwIDEgMS41IDE4VjRBMi41IDIuNSAwIDAgMSA0IDEuNXpNMTIgMjJINGE0IDQgMCAwIDEtNC00VjRhNCA0IDAgMCAxIDQtNGgxNGE0IDQgMCAwIDEgNCA0djE0YTQgNCAwIDAgMS00IDRoLTZ6XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIC8+XG4gICAgPC9zdmc+XG5gOyIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2xpYi9Db21wb25lbnQnO1xuaW1wb3J0IHsgdGVtcGxhdG9yIH0gZnJvbSAnLi4vLi4vbGliL1RlbXBsYXRvcic7XG5pbXBvcnQgeyB0ZW1wbGF0ZSB9IGZyb20gJy4vdGVtcGxhdGUnO1xuXG5leHBvcnQgY2xhc3MgRmlsZUljb24gZXh0ZW5kcyBDb21wb25lbnQ8e30+IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0b3IuY29tcGlsZSh0ZW1wbGF0ZSk7XG4gICAgfVxufSIsImV4cG9ydCBjb25zdCB0ZW1wbGF0ZSA9IGBcbiAgICA8c3ZnIHdpZHRoPVwiMjJcIiBoZWlnaHQ9XCIyMlwiIHZpZXdCb3g9XCIwIDAgMjIgMjJcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XG4gICAgICAgIDxwYXRoIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiBjbGlwLXJ1bGU9XCJldmVub2RkXCIgZD1cIk0yMC41IDExYTkuNSA5LjUgMCAxIDEtMTkgMCA5LjUgOS41IDAgMCAxIDE5IDB6bTEuNSAwYzAgNi4wNzUtNC45MjUgMTEtMTEgMTFTMCAxNy4wNzUgMCAxMSA0LjkyNSAwIDExIDBzMTEgNC45MjUgMTEgMTF6bS0xMSAzYTMgMyAwIDEgMCAwLTYgMyAzIDAgMCAwIDAgNnpcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgLz5cbiAgICA8L3N2Zz5cbmA7IiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbGliL0NvbXBvbmVudCc7XG5pbXBvcnQgeyB0ZW1wbGF0b3IgfSBmcm9tICcuLi8uLi9saWIvVGVtcGxhdG9yJztcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XG5cbmV4cG9ydCBjbGFzcyBMb2NhdGlvbkljb24gZXh0ZW5kcyBDb21wb25lbnQ8e30+IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0b3IuY29tcGlsZSh0ZW1wbGF0ZSk7XG4gICAgfVxufSIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2xpYi9Db21wb25lbnQnO1xuaW1wb3J0IHsgdGVtcGxhdG9yIH0gZnJvbSAnLi4vLi4vbGliL1RlbXBsYXRvcic7XG5pbXBvcnQgeyB0ZW1wbGF0ZSB9IGZyb20gJy4vdGVtcGxhdGUnO1xuaW1wb3J0IHsgQ2hhdEFjdGlvbnNCdXR0b24gfSBmcm9tICcuLi9DaGF0QWN0aW9uc0J1dHRvbic7XG5pbXBvcnQgeyBDaGF0QWN0aW9uc01vZGFsIH0gZnJvbSAnLi4vQ2hhdEFjdGlvbnNNb2RhbCc7XG5pbXBvcnQgeyBBdHRhY2hJY29uIH0gZnJvbSAnLi4vLi4vYXNzZXRzL0F0dGFjaEljb24nO1xuaW1wb3J0IHsgQ2hhdEFjdGlvbnMgfSBmcm9tICcuLi9DaGF0QWN0aW9ucyc7XG5pbXBvcnQgeyBDaGF0QWN0aW9uc0l0ZW0gfSBmcm9tICcuLi9DaGF0QWN0aW9uc0l0ZW0nO1xuaW1wb3J0IHsgUGhvdG9JY29uIH0gZnJvbSAnLi4vLi4vYXNzZXRzL1Bob3RvSWNvbic7XG5pbXBvcnQgeyBGaWxlSWNvbiB9IGZyb20gJy4uLy4uL2Fzc2V0cy9GaWxlSWNvbic7XG5pbXBvcnQgeyBMb2NhdGlvbkljb24gfSBmcm9tICcuLi8uLi9hc3NldHMvTG9jYXRpb25JY29uJztcblxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VGb3JtIGV4dGVuZHMgQ29tcG9uZW50PHt9PiB7XG4gICAgcHVibGljIGF0dGFjaEZvcm1NZXNzYWdlTW9kYWwhOiBDaGF0QWN0aW9uc01vZGFsO1xuXG4gICAgcHVibGljIGJ1dHRvbkZvcm1NZXNzYWdlQXR0YWNoITogQ2hhdEFjdGlvbnNCdXR0b247XG5cbiAgICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nID0gJyc7XG5cbiAgICBwdWJsaWMgcHJlcmVuZGVyKCkge1xuICAgICAgICB0aGlzLmF0dGFjaEZvcm1NZXNzYWdlTW9kYWwgPSBuZXcgQ2hhdEFjdGlvbnNNb2RhbCh7XG4gICAgICAgICAgICBjb250ZW50OiBuZXcgQ2hhdEFjdGlvbnMoe1xuICAgICAgICAgICAgICAgIGJ1dHRvbnM6IFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IENoYXRBY3Rpb25zSXRlbSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBuZXcgUGhvdG9JY29uKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ9Ck0L7RgtC+INC40LvQuCDQktC40LTQtdC+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IGNvbnNvbGUubG9nKCfQpNC+0YLQviDQuNC70Lgg0JLQuNC00LXQvicpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IENoYXRBY3Rpb25zSXRlbSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBuZXcgRmlsZUljb24oKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAn0KTQsNC50LsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogKCkgPT4gY29uc29sZS5sb2coJ9Ck0LDQudC7JyksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQ2hhdEFjdGlvbnNJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IG5ldyBMb2NhdGlvbkljb24oKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAn0JvQvtC60LDRhtC40Y8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogKCkgPT4gY29uc29sZS5sb2coJ9Cb0L7QutCw0YbQuNGPJyksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHg6ICdsZWZ0JyxcbiAgICAgICAgICAgIHk6ICd0b3AnLFxuICAgICAgICB9KTtcblxuXG4gICAgICAgIGNvbnN0IGF0dGFjaEZvcm1NZXNzYWdlTW9kYWxUb2dnbGUgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmF0dGFjaEZvcm1NZXNzYWdlTW9kYWwudmlzaWJpbGl0eVRvZ2dsZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5idXR0b25Gb3JtTWVzc2FnZUF0dGFjaCA9IG5ldyBDaGF0QWN0aW9uc0J1dHRvbih7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICdtZXNzYWdlLWZvcm1fX2F0dGFjaCcsXG4gICAgICAgICAgICBpY29uOiBuZXcgQXR0YWNoSWNvbigpLFxuICAgICAgICAgICAgb25DbGljazogYXR0YWNoRm9ybU1lc3NhZ2VNb2RhbFRvZ2dsZSxcbiAgICAgICAgICAgIHRpdGxlOiAn0JTQvtCx0LDQstC40YLRjCDQstC70L7QttC10L3QuNC1JyxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdG9yLmNvbXBpbGUodGVtcGxhdGUsIHtcbiAgICAgICAgICAgIGF0dGFjaE1vZGFsOiB0aGlzLmF0dGFjaEZvcm1NZXNzYWdlTW9kYWwsXG4gICAgICAgICAgICBidXR0b25BdHRhY2g6IHRoaXMuYnV0dG9uRm9ybU1lc3NhZ2VBdHRhY2gsXG4gICAgICAgICAgICBvbkNoYW5nZTogKHsgdGFyZ2V0IH06IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gdGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblN1Ym1pdDogKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1lc3NhZ2UgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBtZXNzYWdlOiAke3RoaXMubWVzc2FnZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgdGVtcGxhdGUgPSBgXG4gICAgPGRpdiBjbGFzcz1cIm1vZGFsLWRlbGV0ZSBqcy1tb2RhbC1kZWxldGVcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWRlbGV0ZV9fY29udGVudFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWRlbGV0ZV9fdGl0bGVcIj7QktGLINGF0L7RgtC40YLQtSDRg9C00LDQu9C40YLRjCDRh9Cw0YI/PC9kaXY+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwibW9kYWwtZGVsZXRlX19idXR0b24gbW9kYWwtZGVsZXRlX19idXR0b25fY29uZmlybVwiIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPVwie3sgb25Db25maXJtIH19XCI+0KPQtNCw0LvQuNGC0Yw8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJtb2RhbC1kZWxldGVfX2J1dHRvbiBtb2RhbC1kZWxldGVfX2J1dHRvbi1jYW5jZWxcIiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz1cInt7IG9uQ2FuY2VsIH19XCI+0J7RgtC80LXQvdC40YLRjDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbmA7IiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbGliL0NvbXBvbmVudCc7XG5pbXBvcnQgeyB0ZW1wbGF0b3IgfSBmcm9tICcuLi8uLi9saWIvVGVtcGxhdG9yJztcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XG5cbmV4cG9ydCBjbGFzcyBDaGF0RGVsZXRlTW9kYWwgZXh0ZW5kcyBDb21wb25lbnQ8e30+e1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRvci5jb21waWxlKHRlbXBsYXRlLCB7XG4gICAgICAgICAgICBvbkNhbmNlbDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjYW5jZWwnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkNvbmZpcm06ICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY29uZmlybScpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBjbG9zZU1vZGFsID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICBjb25zdCBtb2RhbCA9IHRoaXMuZ2V0Q29udGVudCgpO1xuXG4gICAgICAgIGlmIChtb2RhbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobW9kYWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbG9zZU1vZGFsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xvc2VNb2RhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiZXhwb3J0IGNvbnN0IGNoYXRJdGVtc0RhdGEgPSBbe1xuICAgIGF2YXRhckFsdDogJ9CQ0LLQsNGC0LDRgCDQsdC10YHQtdC00Ysg0YEg0JDQvdC00YDQtdC10LwnLFxuICAgIGF2YXRhclNyYzogJy9hc3NldHMvYXZhdGFyLmpwZycsXG4gICAgaW5jb21pbmdNZXNzYWdlOiAn0JjQt9C+0LHRgNCw0LbQtdC90LjQtScsXG4gICAgY2hhdE5hbWU6ICfQkNC90LTRgNC10LknLFxuICAgIGNoYXRVcmw6ICcvY2hhdCcsXG4gICAgZGF0ZTogJzEwOjQ5JyxcbiAgICBuZXdNZXNzYWdlOiAyLFxufSwge1xuICAgIGF2YXRhckFsdDogJ9CQ0LLQsNGC0LDRgCDQsdC10YHQtdC00Ysg0JrQuNC90L7QutC70YPQsScsXG4gICAgYXZhdGFyU3JjOiAnL2Fzc2V0cy9hdmF0YXIuanBnJyxcbiAgICBvdXRnb2luZ01lc3NhZ2U6ICfRgdGC0LjQutC10YAnLFxuICAgIGNoYXROYW1lOiAn0JrQuNC90L7QutC70YPQsScsXG4gICAgY2hhdFVybDogJy9jaGF0JyxcbiAgICBkYXRlOiAnMTI6MDAnLFxufSwge1xuICAgIGF2YXRhckFsdDogJ9CQ0LLQsNGC0LDRgCDQsdC10YHQtdC00Ysg0YEg0JjQu9GM0Y8nLFxuICAgIGF2YXRhclNyYzogJy9hc3NldHMvYXZhdGFyLmpwZycsXG4gICAgaW5jb21pbmdNZXNzYWdlOiAn0JTRgNGD0LfRjNGPLCDRgyDQvNC10L3RjyDQtNC70Y8g0LLQsNGBINC+0YHQvtCx0LXQvdC90YvQuSDQstGL0L/Rg9GB0Log0L3QvtCy0L7RgdGC0LXQuSEg0KLRg9GCINC10YnQtSDRgtC10LrRgdGCLCDQutC+0YLQvtGA0YvQuSDQvdC1INCy0LvQtdC30LDQtdGCJyxcbiAgICBjaGF0TmFtZTogJ9CY0LvRjNGPJyxcbiAgICBjaGF0VXJsOiAnL2NoYXQnLFxuICAgIGRhdGU6ICcxNToxMicsXG4gICAgbmV3TWVzc2FnZTogNCxcbn0sIHtcbiAgICBhdmF0YXJBbHQ6ICfQkNCy0LDRgtCw0YAg0LHQtdGB0LXQtNGLINGBINCS0LDQtNC40LzQvtC8JyxcbiAgICBhdmF0YXJTcmM6ICcvYXNzZXRzL2F2YXRhci5qcGcnLFxuICAgIG91dGdvaW5nTWVzc2FnZTogJ9Ca0YDRg9GC0L4hJyxcbiAgICBjaGF0TmFtZTogJ9CS0LDQtNC40LwnLFxuICAgIGNoYXRVcmw6ICcvY2hhdCcsXG4gICAgZGF0ZTogJ9Cf0YInLFxufSwge1xuICAgIGF2YXRhckFsdDogJ9CQ0LLQsNGC0LDRgCDQsdC10YHQtdC00Ysg0YLQtdGCLdCwLdGC0LXRgtGLJyxcbiAgICBhdmF0YXJTcmM6ICcvYXNzZXRzL2F2YXRhci5qcGcnLFxuICAgIGluY29taW5nTWVzc2FnZTogJ9CYIEh1bWFuIEludGVyZmFjZSBHdWlkZWxpbmVzINC4IE1hdGVyaWFsIERlc2lnbiDRgNC10LrQvtC80LXQvdC00YPRjtGCINC4INC10YnQtSDRgtC10LrRgdGCLCDQutC+0YLQvtGA0YvQuSDQvdC1INCy0LvQtdC30LDQtdGCJyxcbiAgICBjaGF0TmFtZTogJ9GC0LXRgi3QsC3RgtC10YLRiycsXG4gICAgY2hhdFVybDogJy9jaGF0JyxcbiAgICBkYXRlOiAn0KHRgCcsXG59LCB7XG4gICAgYXZhdGFyQWx0OiAn0JDQstCw0YLQsNGAINCx0LXRgdC10LTRiyAxLCAyLCAzJyxcbiAgICBhdmF0YXJTcmM6ICcvYXNzZXRzL2F2YXRhci5qcGcnLFxuICAgIGluY29taW5nTWVzc2FnZTogJ9Cc0LjQu9C70LjQvtC90Ysg0YDQvtGB0YHQuNGP0L0g0LXQttC10LTQvdC10LLQvdC+INC/0YDQvtCy0L7QtNGP0YIg0LTQtdGB0Y/RgtC60Lgg0YfQsNGB0L7QsiDRgdCy0L7QtSDQuCDRgtGD0YIg0YLQvtC20LUg0LXRgdGC0Ywg0YLQtdC60YHRgiwg0LrQvtGC0L7RgNGL0Lkg0L3QtSDQstC70LXQt9Cw0LXRgicsXG4gICAgY2hhdE5hbWU6ICcxLCAyLCAzJyxcbiAgICBjaGF0VXJsOiAnL2NoYXQnLFxuICAgIGRhdGU6ICfQn9C9Jyxcbn0sIHtcbiAgICBhdmF0YXJBbHQ6ICfQkNCy0LDRgtCw0YAg0LHQtdGB0LXQtNGLIERlc2lnbiBEZXN0cm95ZXInLFxuICAgIGF2YXRhclNyYzogJy9hc3NldHMvYXZhdGFyLmpwZycsXG4gICAgaW5jb21pbmdNZXNzYWdlOiAn0JIgMjAwOCDQs9C+0LTRgyDRhdGD0LTQvtC20L3QuNC6IEpvbiBSYWZtYW4g0L3QsNGH0LDQuyDRgdC+0LHQuNGA0LDRgtGMIC0g0LTQsC3QtNCwLCDQuCDRjdGC0L7RgiDRgtC10LrRgdGCINGC0L7QttC1INC90LUg0LLQu9C10LfQsNC10YInLFxuICAgIGNoYXROYW1lOiAnRGVzaWduIERlc3Ryb3llcicsXG4gICAgY2hhdFVybDogJy9jaGF0JyxcbiAgICBkYXRlOiAn0J/QvScsXG59LCB7XG4gICAgYXZhdGFyQWx0OiAn0JDQstCw0YLQsNGAINCx0LXRgdC10LTRiyBEYXkuJyxcbiAgICBhdmF0YXJTcmM6ICcvYXNzZXRzL2F2YXRhci5qcGcnLFxuICAgIGluY29taW5nTWVzc2FnZTogJ9Ci0LDQuiDRg9Cy0LvRkdC60YHRjyDRgNCw0LHQvtGC0L7QuSDQv9C+INC60YPRgNGB0YMsINGH0YLQviDRgdC+0LLRgdC10Lwg0LfQsNCx0YvQuyDQtdCz0L4g0LDQvdC+0L3RgdC40YDQvtCy0LDRgtGMIC0g0YTRg9GFLCDRjdGC0L4g0L/QvtGB0LvQtdC00L3QuNC5INGC0LXQutGB0YIsINC60L7RgtC+0YDRi9C5INC90LUg0LLQu9C10LfQsNC10YInLFxuICAgIGNoYXROYW1lOiAnRGF5LicsXG4gICAgY2hhdFVybDogJy9jaGF0JyxcbiAgICBkYXRlOiAnMzEg0JzQsNGPIDIwMjAnLFxufV07IiwiaW1wb3J0IHsgQ2hhdCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ2hhdCc7XG5pbXBvcnQgeyBDaGF0QWN0aW9uc0J1dHRvbiB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ2hhdEFjdGlvbnNCdXR0b24nO1xuaW1wb3J0IHsgQ2hhdEFjdGlvbnMgfSBmcm9tICcuLi9jb21wb25lbnRzL0NoYXRBY3Rpb25zJztcbmltcG9ydCB7IENoYXRBY3Rpb25zSXRlbSB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ2hhdEFjdGlvbnNJdGVtJztcbmltcG9ydCB7IENoYXRBY3Rpb25zTW9kYWwgfSBmcm9tICcuLi9jb21wb25lbnRzL0NoYXRBY3Rpb25zTW9kYWwnO1xuaW1wb3J0IHsgQ2hhdEluZm9ybWF0aW9uIH0gZnJvbSAnLi4vY29tcG9uZW50cy9DaGF0SW5mb3JtYXRpb24nO1xuaW1wb3J0IHsgQ2hhdFJlbmFtZUZvcm0gfSBmcm9tICcuLi9jb21wb25lbnRzL0NoYXRSZW5hbWVGb3JtJztcbmltcG9ydCB7IENoYXRIZWFkZXIgfSBmcm9tICcuLi9jb21wb25lbnRzL0NoYXRIZWFkZXInO1xuaW1wb3J0IHsgQ2hhdEl0ZW0gfSBmcm9tICcuLi9jb21wb25lbnRzL0NoYXRJdGVtJztcbmltcG9ydCB7IE5ld01lc3NhZ2UgfSBmcm9tICcuLi9jb21wb25lbnRzL05ld01lc3NhZ2UnO1xuaW1wb3J0IHsgQ2hhckl0ZW1PdXRnb2luZ01lc3NhZ2UgfSBmcm9tICcuLi9jb21wb25lbnRzL0NoYXRJdGVtT3V0Z29pbmdNZXNzYWdlJztcbmltcG9ydCB7IENoYXRzIH0gZnJvbSAnLi4vY29tcG9uZW50cy9DaGF0cyc7XG5pbXBvcnQgeyBBY3Rpb25zSWNvbiB9IGZyb20gJy4uL2Fzc2V0cy9BY3Rpb25zSWNvbic7XG5pbXBvcnQgeyBSZW5hbWVJY29uIH0gZnJvbSAnLi4vYXNzZXRzL1JlbmFtZUljb24nO1xuaW1wb3J0IHsgRGVsZXRlSWNvbiB9IGZyb20gJy4uL2Fzc2V0cy9EZWxldGVJY29uJztcbmltcG9ydCB7IE1lc3NhZ2VzIH0gZnJvbSAnLi4vY29tcG9uZW50cy9NZXNzYWdlcyc7XG5pbXBvcnQgeyBNZXNzYWdlRm9ybSB9IGZyb20gJy4uL2NvbXBvbmVudHMvTWVzc2FnZUZvcm0nO1xuaW1wb3J0IHsgQ2hhdERlbGV0ZU1vZGFsIH0gZnJvbSAnLi4vY29tcG9uZW50cy9DaGF0RGVsZXRlTW9kYWwnO1xuaW1wb3J0IHsgY2hhdEl0ZW1zRGF0YSB9IGZyb20gJy4uL2RhdGEvY2hhdEl0ZW1zRGF0YSc7XG5pbXBvcnQgeyBJQ2hhdEl0ZW0gfSBmcm9tICcuLi9jb21wb25lbnRzL0NoYXRJdGVtL2ludGVyZmFjZXMnO1xuXG5jb25zdCByZW5hbWVGb3JtVG9nZ2xlID0gKCkgPT4ge1xuICAgIGNoYXRSZW5hbWVGb3JtLnZpc2liaWxpdHlUb2dnbGUoJ2dyaWQnKTtcbiAgICBjaGF0SW5mb3JtYXRpb24udmlzaWJpbGl0eVRvZ2dsZSgnZ3JpZCcpO1xufVxuXG5jb25zdCBkZWxldGVNb2RhbFRvZ2dsZSA9ICgpID0+IHtcbiAgICBjaGF0TW9kYWxEZWxldGUudmlzaWJpbGl0eVRvZ2dsZSgnZmxleCcpO1xufVxuXG5jb25zdCByZW5hbWVJY29uID0gbmV3IFJlbmFtZUljb24oKTtcbmNvbnN0IGRlbGV0ZUljb24gPSBuZXcgRGVsZXRlSWNvbigpO1xuXG5jb25zdCBjaGF0QWN0aW9ucyA9IG5ldyBDaGF0QWN0aW9ucyh7XG4gICAgYnV0dG9uczogW1xuICAgICAgICBuZXcgQ2hhdEFjdGlvbnNJdGVtKHtcbiAgICAgICAgICAgIGljb246IHJlbmFtZUljb24sXG4gICAgICAgICAgICBsYWJlbDogJ9Cf0LXRgNC10LjQvNC10L3QvtCy0LDRgtGMJyxcbiAgICAgICAgICAgIG9uQ2xpY2s6IHJlbmFtZUZvcm1Ub2dnbGUsXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgQ2hhdEFjdGlvbnNJdGVtKHtcbiAgICAgICAgICAgIGljb246IGRlbGV0ZUljb24sXG4gICAgICAgICAgICBsYWJlbDogJ9Cj0LTQsNC70LjRgtGMJyxcbiAgICAgICAgICAgIG9uQ2xpY2s6IGRlbGV0ZU1vZGFsVG9nZ2xlLFxuICAgICAgICB9KSxcbiAgICBdLFxufSk7XG5cbmNvbnN0IGNoYXRBY3Rpb25zTW9kYWwgPSBuZXcgQ2hhdEFjdGlvbnNNb2RhbCh7XG4gICAgY29udGVudDogY2hhdEFjdGlvbnMsXG4gICAgeDogJ3JpZ2h0JyxcbiAgICB5OiAnYm90dG9tJ1xufSk7XG5cbmNvbnN0IGNoYXRBY3Rpb25zTW9kYWxUb2dnbGUgPSAoKSA9PiB7XG4gICAgY2hhdEFjdGlvbnNNb2RhbC52aXNpYmlsaXR5VG9nZ2xlKCk7XG59XG5cbmNvbnN0IGFjdGlvbnNJY29uID0gbmV3IEFjdGlvbnNJY29uKCk7XG5cbmNvbnN0IGNoYXRBY3Rpb25zQnV0dG9uID0gbmV3IENoYXRBY3Rpb25zQnV0dG9uKHtcbiAgICBjbGFzc05hbWU6ICdjaGF0LWhlYWRlcl9fYWN0aW9ucycsXG4gICAgaWNvbjogYWN0aW9uc0ljb24sXG4gICAgb25DbGljazogY2hhdEFjdGlvbnNNb2RhbFRvZ2dsZSxcbiAgICB0aXRsZTogJ9CU0LXQudGB0YLQstC40Y8g0YEg0YfQsNGC0L7QvCcsXG59KTtcblxuY29uc3QgY2hhdFJlbmFtZUZvcm0gPSBuZXcgQ2hhdFJlbmFtZUZvcm0oe1xuICAgIG9uU3VibWl0OiByZW5hbWVGb3JtVG9nZ2xlLFxuICAgIHRpdGxlOiAn0JLQsNC00LjQvCcsXG59KTtcblxuY29uc3QgY2hhdEluZm9ybWF0aW9uID0gbmV3IENoYXRJbmZvcm1hdGlvbih7XG4gICAgYXZhdGFyQWx0OiAn0JDQstCw0YLQsNGAINCx0LXRgdC10LTRiyDRgSDQktCw0LTQuNC80L7QvCcsXG4gICAgYXZhdGFyU3JjOiAnL2Fzc2V0cy9hdmF0YXIuanBnJyxcbiAgICBjaGF0QWN0aW9uc0J1dHRvbixcbiAgICBjaGF0QWN0aW9uc01vZGFsLFxuICAgIGNoYXROYW1lOiAn0JLQsNC00LjQvCcsXG4gICAgc3RhdHVzOiAn0JHRi9C7IDUg0LzQuNC90YPRgiDQvdCw0LfQsNC0Jyxcbn0pO1xuXG5jb25zdCBjaGF0SGVhZGVyID0gbmV3IENoYXRIZWFkZXIoe1xuICAgIGNoYXRSZW5hbWVGb3JtLFxuICAgIGNoYXRJbmZvcm1hdGlvbixcbn0pO1xuXG5jb25zdCBtZXNzYWdlcyA9IG5ldyBNZXNzYWdlcygpO1xuXG5jb25zdCBtZXNzYWdlRm9ybSA9IG5ldyBNZXNzYWdlRm9ybSgpO1xuXG5jb25zdCBjaGF0TW9kYWxEZWxldGUgPSBuZXcgQ2hhdERlbGV0ZU1vZGFsKCk7XG5cbmNvbnN0IGNoYXRCbG9jayA9IG5ldyBDaGF0KCB7XG4gICAgY2hhdEhlYWRlcixcbiAgICBkZWxldGVNb2RhbDogY2hhdE1vZGFsRGVsZXRlLFxuICAgIG1lc3NhZ2VzLFxuICAgIG1lc3NhZ2VGb3JtLFxufSk7XG5cbmNvbnN0IGNoYXRJdGVtczogQ2hhdEl0ZW1bXSA9IGNoYXRJdGVtc0RhdGEubWFwKCh7IG5ld01lc3NhZ2UsIGluY29taW5nTWVzc2FnZSwgb3V0Z29pbmdNZXNzYWdlLCAuLi5tYWluUHJvcHMgfSkgPT4ge1xuICAgIGNvbnN0IHByb3BzOiBQYXJ0aWFsPElDaGF0SXRlbT4gPSB7IC4uLm1haW5Qcm9wcyB9O1xuXG4gICAgaWYgKG5ld01lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwcm9wcy5uZXdNZXNzYWdlID0gbmV3IE5ld01lc3NhZ2UoeyBjb3VudDogbmV3TWVzc2FnZSB9KTtcbiAgICB9XG4gICAgaWYgKGluY29taW5nTWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHByb3BzLmNoYXRNZXNzYWdlID0gaW5jb21pbmdNZXNzYWdlO1xuICAgIH0gZWxzZSBpZiAob3V0Z29pbmdNZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJvcHMuY2hhdE1lc3NhZ2UgPSBuZXcgQ2hhckl0ZW1PdXRnb2luZ01lc3NhZ2UoeyBtZXNzYWdlOiBvdXRnb2luZ01lc3NhZ2UgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBDaGF0SXRlbSh7IC4uLnByb3BzIH0gYXMgSUNoYXRJdGVtKTtcbn0pO1xuXG5leHBvcnQgY29uc3QgY2hhdCA9IG5ldyBDaGF0cyh7XG4gICAgY2hhdEl0ZW1zLFxuICAgIGNvbnRlbnQ6IGNoYXRCbG9jayxcbiAgICBvbkNoYW5nZTogKHsgdGFyZ2V0IH06IEV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IHRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXG4gICAgICAgIGNvbnNvbGUubG9nKGBzZWFyY2g6ICR7dmFsdWV9YCk7XG4gICAgfSxcbiAgICBwYWdlVGl0bGU6ICfQktGL0LHQvtGAINGH0LDRgtCwJyxcbn0pO1xuXG4iLCJleHBvcnQgY29uc3QgdGVtcGxhdGUgPSBgXG4gICAgPG1haW4gY2xhc3M9XCJ3cmFwcGVyLWNlbnRlclwiPlxuICAgICAgICDQktGL0LHQtdGA0LjRgtC1INGH0LDRgiwg0YfRgtC+0LHRiyDQvtGC0L/RgNCw0LLQuNGC0Ywg0YHQvtC+0LHRidC10L3QuNC1XG4gICAgPC9tYWluPlxuYDsiLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi8uLi9saWIvQ29tcG9uZW50JztcbmltcG9ydCB7IHRlbXBsYXRvciB9IGZyb20gJy4uLy4uL2xpYi9UZW1wbGF0b3InO1xuaW1wb3J0IHsgdGVtcGxhdGUgfSBmcm9tICcuL3RlbXBsYXRlJztcblxuZXhwb3J0IGNsYXNzIFNlbGVjdENoYXQgZXh0ZW5kcyBDb21wb25lbnQ8e30+IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0b3IuY29tcGlsZSh0ZW1wbGF0ZSk7XG4gICAgfVxufSIsImltcG9ydCB7IENoYXRzIH0gZnJvbSAnLi4vY29tcG9uZW50cy9DaGF0cyc7XG5pbXBvcnQgeyBDaGF0SXRlbSB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ2hhdEl0ZW0nO1xuaW1wb3J0IHsgU2VsZWN0Q2hhdCB9IGZyb20gJy4uL2NvbXBvbmVudHMvU2VsZWN0Q2hhdCc7XG5pbXBvcnQgeyBOZXdNZXNzYWdlICB9IGZyb20gJy4uL2NvbXBvbmVudHMvTmV3TWVzc2FnZSc7XG5pbXBvcnQgeyBDaGFySXRlbU91dGdvaW5nTWVzc2FnZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ2hhdEl0ZW1PdXRnb2luZ01lc3NhZ2UnO1xuaW1wb3J0IHsgY2hhdEl0ZW1zRGF0YSB9IGZyb20gJy4uL2RhdGEvY2hhdEl0ZW1zRGF0YSc7XG5pbXBvcnQgeyBJQ2hhdEl0ZW0gfSBmcm9tICcuLi9jb21wb25lbnRzL0NoYXRJdGVtL2ludGVyZmFjZXMnO1xuXG5jb25zdCBzZWxlY3RDaGF0ID0gbmV3IFNlbGVjdENoYXQoKTtcblxuY29uc3QgY2hhdEl0ZW1zOiBDaGF0SXRlbVtdID0gY2hhdEl0ZW1zRGF0YS5tYXAoKHsgbmV3TWVzc2FnZSwgaW5jb21pbmdNZXNzYWdlLCBvdXRnb2luZ01lc3NhZ2UsIC4uLm1haW5Qcm9wcyB9KSA9PiB7XG4gICAgY29uc3QgcHJvcHM6IFBhcnRpYWw8SUNoYXRJdGVtPiA9IHsgLi4ubWFpblByb3BzIH07XG5cbiAgICBpZiAobmV3TWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHByb3BzLm5ld01lc3NhZ2UgPSBuZXcgTmV3TWVzc2FnZSh7IGNvdW50OiBuZXdNZXNzYWdlIH0pO1xuICAgIH1cbiAgICBpZiAoaW5jb21pbmdNZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJvcHMuY2hhdE1lc3NhZ2UgPSBpbmNvbWluZ01lc3NhZ2U7XG4gICAgfSBlbHNlIGlmIChvdXRnb2luZ01lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwcm9wcy5jaGF0TWVzc2FnZSA9IG5ldyBDaGFySXRlbU91dGdvaW5nTWVzc2FnZSh7IG1lc3NhZ2U6IG91dGdvaW5nTWVzc2FnZSB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IENoYXRJdGVtKHsgLi4ucHJvcHMgfSBhcyBJQ2hhdEl0ZW0pO1xufSk7XG5cbmV4cG9ydCBjb25zdCBjaGF0cyA9IG5ldyBDaGF0cyh7XG4gICAgY2hhdEl0ZW1zLFxuICAgIGNvbnRlbnQ6IHNlbGVjdENoYXQsXG4gICAgb25DaGFuZ2U6ICh7IHRhcmdldCB9OiBFdmVudCkgPT4ge1xuICAgICAgICBjb25zdCB7IHZhbHVlIH0gPSB0YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcblxuICAgICAgICBjb25zb2xlLmxvZyhgc2VhcmNoOiAke3ZhbHVlfWApO1xuICAgIH0sXG4gICAgcGFnZVRpdGxlOiAn0JLRi9Cx0L7RgCDRh9Cw0YLQsCcsXG59KTsiLCJleHBvcnQgY29uc3QgdGVtcGxhdGUgPSBgXG4gICAgPGRpdiBjbGFzcz1cInByb2ZpbGUtcGFnZVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZmlsZV9fYmFjay1saW5rLXdyYXBwZXJcIj5cbiAgICAgICAgICAgIDxhIGhyZWY9XCIvXCIgY2xhc3M9XCJwcm9maWxlLWJhY2stbGlua1wiIHRpdGxlPVwi0JLQtdGA0L3Rg9GC0YzRgdGPINC6INCy0YvQsdC+0YDRgyDRh9Cw0YLQsFwiPlxuICAgICAgICAgICAgICAgIDxzdmcgd2lkdGg9XCIxM1wiIGhlaWdodD1cIjEyXCIgdmlld0JveD1cIjAgMCAxMyAxMlwiIGZpbGw9XCJub25lXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICAgICAgICAgICAgICA8cmVjdCB4PVwiMTNcIiB5PVwiNi44MDAwNVwiIHdpZHRoPVwiMTFcIiBoZWlnaHQ9XCIxLjZcIiB0cmFuc2Zvcm09XCJyb3RhdGUoLTE4MCAxMyA2LjgwMDA1KVwiIGZpbGw9XCJ3aGl0ZVwiIC8+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNNiAxMUwyIDZMNiAxXCIgc3Ryb2tlPVwid2hpdGVcIiBzdHJva2Utd2lkdGg9XCIxLjZcIiAvPlxuICAgICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgPC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPG1haW4gY2xhc3M9XCJwcm9maWxlIHt7IGNsYXNzTmFtZSB9fVwiPlxuICAgICAgICAgICAgPGgxIGNsYXNzPVwidmlzdWFsbHktaGlkZGVuXCI+XG4gICAgICAgICAgICAgICAge3sgcGFnZVRpdGxlIH19XG4gICAgICAgICAgICA8L2gxPlxuICAgICAgICAgICAgPGltZyBzcmM9XCJ7eyBhdmF0YXJTcmMgfX1cIiBhbHQ9XCLQkNCy0LDRgtCw0YAg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPIHt7IGRpc3BsYXlOYW1lIH19XCIgd2lkdGg9XCIxMzFcIiBoZWlnaHQ9XCIxMzFcIiAvPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2ZpbGVfX3RpdGxlXCI+XG4gICAgICAgICAgICAgICAge3sgZGlzcGxheU5hbWUgfX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAge3sgY29udGVudCB9fVxuICAgICAgICA8L21haW4+XG4gICAgPC9kaXY+XG5gOyIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2xpYi9Db21wb25lbnQnO1xuaW1wb3J0IHsgdGVtcGxhdG9yIH0gZnJvbSAnLi4vLi4vbGliL1RlbXBsYXRvcic7XG5pbXBvcnQgeyB0ZW1wbGF0ZSB9IGZyb20gJy4vdGVtcGxhdGUnO1xuaW1wb3J0IHsgSVByb2ZpbGUgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5leHBvcnQgY2xhc3MgUHJvZmlsZSBleHRlbmRzIENvbXBvbmVudDxJUHJvZmlsZT4ge1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBsb25nLCAuLi5vdGhlcnMgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIHRlbXBsYXRvci5jb21waWxlKHRlbXBsYXRlLCB7XG4gICAgICAgICAgICAuLi5vdGhlcnMsXG4gICAgICAgICAgICBjbGFzc05hbWU6IGxvbmcgPyAncHJvZmlsZV9sb25nJyA6ICcnLFxuICAgICAgICB9KTtcbiAgICB9XG59IiwiZXhwb3J0IGNvbnN0IHRlbXBsYXRlID0gYFxuICAgIDxmb3JtIGNsYXNzPVwicHJvZmlsZS1zZWN0aW9uXCI+XG4gICAgICAgIHt7IGNvbnRlbnQgfX1cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJwcm9maWxlX19zdWJtaXRcIj7QodC+0YXRgNCw0L3QuNGC0Yw8L2J1dHRvbj5cbiAgICA8L2Zvcm0+XG5gOyIsImV4cG9ydCBjb25zdCB0ZW1wbGF0ZVJlYWRvbmx5ID0gYFxuICAgIDxkaXYgY2xhc3M9XCJwcm9maWxlX19yb3cgcHJvZmlsZS1yb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInByb2ZpbGUtcm93X190aXRsZVwiPnt7IHRpdGxlIH19PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJwcm9maWxlLXJvd19fdmFsdWVcIj57eyB2YWx1ZSB9fTwvZGl2PlxuICAgIDwvZGl2PlxuYDsiLCJleHBvcnQgY29uc3QgdGVtcGxhdGVXcml0YWJsZSA9IGBcbiAgICA8ZGl2IGNsYXNzPVwicHJvZmlsZV9fcm93IHByb2ZpbGUtcm93XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJwcm9maWxlLXJvd19fdGl0bGVcIj57eyB0aXRsZSB9fTwvZGl2PlxuICAgICAgICA8aW5wdXQgdHlwZT1cInt7IHR5cGUgfX1cIiBjbGFzcz1cInByb2ZpbGUtcm93X192YWx1ZVwiIHZhbHVlPVwie3sgdmFsdWUgfX1cIiBuYW1lPVwie3sgbmFtZSB9fVwiIC8+XG4gICAgPC9kaXY+XG5gOyIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2xpYi9Db21wb25lbnQnO1xuaW1wb3J0IHsgdGVtcGxhdG9yIH0gZnJvbSAnLi4vLi4vbGliL1RlbXBsYXRvcic7XG5pbXBvcnQgeyB0ZW1wbGF0ZVJlYWRvbmx5IH0gZnJvbSAnLi90ZW1wbGF0ZVJlYWRvbmx5JztcbmltcG9ydCB7IHRlbXBsYXRlV3JpdGFibGUgfSBmcm9tICcuL3RlbXBsYXRlV3JpdGFibGUnO1xuaW1wb3J0IHsgSVByb2ZpbGVSb3dSZWFkb25seSwgSVByb2ZpbGVSb3dXcml0YWJsZSB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjbGFzcyBQcm9maWxlUm93IGV4dGVuZHMgQ29tcG9uZW50PElQcm9maWxlUm93UmVhZG9ubHkgfCBJUHJvZmlsZVJvd1dyaXRhYmxlPiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IHdyaXRhYmxlLCAuLi5vdGhlcnMgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgaWYgKHdyaXRhYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGVtcGxhdG9yLmNvbXBpbGUodGVtcGxhdGVXcml0YWJsZSwgeyAuLi5vdGhlcnMgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRlbXBsYXRvci5jb21waWxlKHRlbXBsYXRlUmVhZG9ubHksIHsgLi4ub3RoZXJzIH0pO1xuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgaXNFbWFpbCA9IChzdHI6IHN0cmluZyk6IGJvb2xlYW4gPT4gL15cXFMrQFxcUyskLy50ZXN0KHN0cik7IiwiZXhwb3J0IGNvbnN0IGlzU2hvcnRQYXNzd29yZCA9IChwYXNzd29yZDogc3RyaW5nKSA9PiBwYXNzd29yZC5sZW5ndGggPCA4OyIsImV4cG9ydCBjb25zdCBpc1Bob25lID0gKHN0cjogc3RyaW5nKTogYm9vbGVhbiA9PiAvXigoOHxcXCs3KVstIF0/KT8oKFxcZHszfSk/Wy0gXT8pP1tcXGQtIF17NywxMH0kLy50ZXN0KHN0cik7IiwiZXhwb3J0IGNvbnN0IGNsZWFuT2JqZWN0ID0gKG9iajogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWQgfCBudWxsIH0pID0+IHtcbiAgICBjb25zdCByZXM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7fTtcblxuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gb2JqW2tleV07XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzW2tleV0gPSBvYmpba2V5XSBhcyBzdHJpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xufSIsImltcG9ydCB7IEZvcm1UeXBlLCBWYWxpZGF0aW9uRnVuY3Rpb25UeXBlIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBjbGVhbk9iamVjdCB9IGZyb20gJy4uLy4uL3V0aWxzL2NsZWFuT2JqZWN0JztcblxuZXhwb3J0IGNsYXNzIEZvcm08VD4ge1xuICAgIHB1YmxpYyBmb3JtOiBIVE1MRm9ybUVsZW1lbnQgfCBudWxsO1xuXG4gICAgcHVibGljIGZvcm1EYXRhOiBGb3JtRGF0YTtcblxuICAgIHB1YmxpYyBlcnJvcnM6IFBhcnRpYWw8eyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfT4gPSB7fTtcblxuICAgIHB1YmxpYyB0b3VjaGVkOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgcHJpdmF0ZSBfSU5QVVRfRVJST1JfQ0xBU1NOQU1FID0gJ2Zvcm0taW5wdXQtZXJyb3InO1xuXG4gICAgcHJpdmF0ZSBfRVJST1JfQ0xBU1NOQU1FID0gJ2Zvcm0tZXJyb3InO1xuXG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICBvblN1Ym1pdCxcbiAgICAgICAgd3JhcHBlcixcbiAgICAgICAgdmFsaWRhdG9yID0ge30sXG4gICAgICAgIGV4Y2x1ZGUsXG4gICAgfTogRm9ybVR5cGU8VD4pIHtcbiAgICAgICAgdGhpcy5mb3JtID0gd3JhcHBlci50YWdOYW1lID09PSAnRk9STScgPyB3cmFwcGVyIGFzIEhUTUxGb3JtRWxlbWVudCA6IHdyYXBwZXIucXVlcnlTZWxlY3RvcignZm9ybScpO1xuXG4gICAgICAgIHRoaXMuZm9ybURhdGEgPSBuZXcgRm9ybURhdGEodGhpcy5mb3JtIHx8IHVuZGVmaW5lZCk7XG5cbiAgICAgICAgdGhpcy5mb3JtRGF0YS5mb3JFYWNoKChfLCBuYW1lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbnB1dCA9IHRoaXMuZm9ybT8ucXVlcnlTZWxlY3RvcihgW25hbWU9XCIke25hbWV9XCJgKTtcblxuICAgICAgICAgICAgaW5wdXQ/LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKHsgdGFyZ2V0IH06IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gdGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNldEZpZWxkVmFsdWUobmFtZSwgdmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0ZSh2YWxpZGF0b3IpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93RXJyb3JzKCk7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpbnB1dD8uYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEZpZWxkVG91Y2hlZChuYW1lKTtcblxuICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdGUodmFsaWRhdG9yKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Vycm9ycygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZm9ybT8uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgY29uc3QgaXNWYWxpZCA9IE9iamVjdC5rZXlzKHRoaXMuZXJyb3JzKS5sZW5ndGggPT09IDA7XG5cbiAgICAgICAgICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJtaXQob25TdWJtaXQsIGV4Y2x1ZGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dFcnJvcnModHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMudmFsaWRhdGUodmFsaWRhdG9yKTtcblxuICAgICAgICB0aGlzLnRvdWNoZWQgPSBbXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0RmllbGRWYWx1ZShuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5mb3JtRGF0YS5zZXQobmFtZSwgdmFsdWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRGaWVsZFRvdWNoZWQobmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMudG91Y2hlZC5wdXNoKG5hbWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzaG93RXJyb3JzKG5lY2Vzc2FyaWx5OiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5mb3JtRGF0YS5mb3JFYWNoKChfLCBuYW1lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbnB1dCA9IHRoaXMuZm9ybT8ucXVlcnlTZWxlY3RvcihgW25hbWU9XCIke25hbWV9XCJgKTtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGlucHV0Py5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgY29uc3QgZXJyb3JFbGVtZW50ID0gcGFyZW50Py5xdWVyeVNlbGVjdG9yKGAuJHt0aGlzLl9FUlJPUl9DTEFTU05BTUV9YCkgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgICAgICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9ICcnO1xuXG4gICAgICAgICAgICBpbnB1dD8uY2xhc3NMaXN0LnJlbW92ZShgJHt0aGlzLl9JTlBVVF9FUlJPUl9DTEFTU05BTUV9YCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGlzVG91Y2hlZCA9IHRoaXMudG91Y2hlZC5pbmNsdWRlcyhuYW1lKSB8fCBuZWNlc3NhcmlseTtcblxuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSB0aGlzLmVycm9yc1tuYW1lXTtcblxuICAgICAgICAgICAgaWYgKGlzVG91Y2hlZCAmJiBlcnJvcikge1xuICAgICAgICAgICAgICAgIGlucHV0Py5jbGFzc0xpc3QuYWRkKGAke3RoaXMuX0lOUFVUX0VSUk9SX0NMQVNTTkFNRX1gKTtcbiAgICAgICAgICAgICAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBlcnJvcjtcblxuICAgICAgICAgICAgICAgIGlmIChlcnJvckVsZW1lbnQucGFyZW50RWxlbWVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9FUlJPUl9DTEFTU05BTUUpO1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ/LmFwcGVuZENoaWxkKGVycm9yRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdmFsaWRhdGUodmFsaWRhdG9yOiBQYXJ0aWFsPHsgW2tleSBpbiBrZXlvZiBUXTogVmFsaWRhdGlvbkZ1bmN0aW9uVHlwZTxUPiB9Pikge1xuICAgICAgICBsZXQgZGF0YTogVCA9IHt9IGFzIFQ7XG5cbiAgICAgICAgdGhpcy5mb3JtRGF0YS5mb3JFYWNoKCh2YWx1ZSwgbmFtZSkgPT4ge1xuICAgICAgICAgICAgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAuLi5kYXRhLFxuICAgICAgICAgICAgICAgIFtuYW1lXTogdmFsdWUsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZXJyb3JzID0gY2xlYW5PYmplY3QoXG4gICAgICAgICAgICBPYmplY3RcbiAgICAgICAgICAgICAgICAuZW50cmllczxWYWxpZGF0aW9uRnVuY3Rpb25UeXBlPFQ+Pih2YWxpZGF0b3IgYXMgeyBba2V5OiBzdHJpbmddOiBWYWxpZGF0aW9uRnVuY3Rpb25UeXBlPFQ+IH0pXG4gICAgICAgICAgICAgICAgLnJlZHVjZSgocHJldiwgW25hbWUsIHZhbGlkYXRlXSkgPT4gKHsgLi4ucHJldiwgW25hbWVdOiB2YWxpZGF0ZShkYXRhKSB9KSwge30pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIHN1Ym1pdChvblN1Ym1pdDogKHZhbHVlczogVCkgPT4gdm9pZCwgZXhjbHVkZT86IGtleW9mIFQgfCAoa2V5b2YgVClbXSkge1xuICAgICAgICBpZiAoZXhjbHVkZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGV4Y2x1ZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtRGF0YS5kZWxldGUoZXhjbHVkZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZXhjbHVkZSkpIHtcbiAgICAgICAgICAgICAgICBleGNsdWRlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtRGF0YS5kZWxldGUoaXRlbSBhcyBzdHJpbmcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGRhdGE6IFBhcnRpYWw8eyBba2V5IGluIGtleW9mIFRdOiBhbnkgfT4gPSB7fTtcblxuICAgICAgICB0aGlzLmZvcm1EYXRhLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgIGRhdGFba2V5IGFzIGtleW9mIFRdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG9uU3VibWl0KGRhdGEgYXMgVCk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IHF1ZXJ5U3RyaW5naWZ5ID0gKGRhdGE/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPik6IHN0cmluZyA9PiB7XG4gICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgY29uc3QgdHJhbnNmb3JtID0gKHZhbHVlOiBhbnksIHByb3A6IHN0cmluZyk6IGFueSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUubWFwKChpdGVtLCBpKSA9PiB0cmFuc2Zvcm0oaXRlbSwgYCR7cHJvcH1bJHtpfV1gKSkuam9pbignJicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdFxuICAgICAgICAgICAgICAgIC5lbnRyaWVzKHZhbHVlIGFzIG9iamVjdClcbiAgICAgICAgICAgICAgICAubWFwKChbcCwgdl0pID0+IHRyYW5zZm9ybSh2LCBgJHtwcm9wfVske3B9XWApKS5qb2luKCcmJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvcCArICc9JyArIHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICByZXR1cm4gJz8nICsgT2JqZWN0XG4gICAgICAgIC5lbnRyaWVzKGRhdGEpXG4gICAgICAgIC5tYXAoKFtwcm9wLCB2YWx1ZV0pID0+IHRyYW5zZm9ybSh2YWx1ZSwgcHJvcCkpXG4gICAgICAgIC5qb2luKCcmJyk7XG59IiwiZXhwb3J0IGVudW0gSFRUUE1ldGhvZHMge1xuICAgIEdFVCA9ICdHRVQnLFxuICAgIFBVVCA9ICdQVVQnLFxuICAgIFBPU1QgPSAnUE9TVCcsXG4gICAgREVMRVRFID0gJ0RFTEVURScsXG59XG5cbmV4cG9ydCB0eXBlIEhUVFBUcmFuc3BvcnRPcHRpb25zVHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiDQotC10LvQviDQt9Cw0L/RgNC+0YHQsFxuICAgICAqL1xuICAgIGJvZHk/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcblxuICAgIC8qKlxuICAgICAqINCX0LDQs9C+0LvQvtCy0LrQuCDQt9Cw0L/RgNC+0YHQsFxuICAgICAqL1xuICAgIGhlYWRlcnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuXG4gICAgLyoqXG4gICAgICog0KLQsNC50Lwt0LDRg9GCINC30LDQv9GA0L7RgdCwXG4gICAgICovXG4gICAgdGltZW91dD86IG51bWJlcjtcbn1cblxuZXhwb3J0IHR5cGUgSFRUUFJlcXVlc3RPcHRpb25zVHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiAg0JzQtdGC0L7QtCDQt9Cw0L/RgNC+0YHQsFxuICAgICAqL1xuICAgIG1ldGhvZDogSFRUUE1ldGhvZHM7XG59ICYgSFRUUFRyYW5zcG9ydE9wdGlvbnNUeXBlOyIsImltcG9ydCB7IHF1ZXJ5U3RyaW5naWZ5IH0gZnJvbSAnLi4vLi4vdXRpbHMvcXVlcnlTdHJpbmdpZnknO1xuaW1wb3J0IHsgSFRUUE1ldGhvZHMsIEhUVFBSZXF1ZXN0T3B0aW9uc1R5cGUsIEhUVFBUcmFuc3BvcnRPcHRpb25zVHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgSFRUUFRyYW5zcG9ydCB7XG4gICAgcHJpdmF0ZSBfZG9tYWluOiBzdHJpbmcgPSAnJztcblxuICAgIHNldERvbWFpbiA9IChkb21haW46IHN0cmluZykgPT4ge1xuICAgICAgICB0aGlzLl9kb21haW4gPSBkb21haW47XG4gICAgfVxuXG4gICAgZ2V0ID0gKHVybDogc3RyaW5nLCBvcHRpb25zOiBIVFRQVHJhbnNwb3J0T3B0aW9uc1R5cGUgPSB7fSkgPT4ge1xuICAgICAgICBjb25zdCB7IGJvZHkgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG5ld1VybCA9IHVybCArIHF1ZXJ5U3RyaW5naWZ5KGJvZHkpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG5ld1VybCwgeyAuLi5vcHRpb25zLCBtZXRob2Q6IEhUVFBNZXRob2RzLkdFVCB9LCBvcHRpb25zLnRpbWVvdXQpO1xuICAgIH07XG5cbiAgICBwdXQgPSAodXJsOiBzdHJpbmcsIG9wdGlvbnM6IEhUVFBUcmFuc3BvcnRPcHRpb25zVHlwZSA9IHt9KSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXJsLCB7IC4uLm9wdGlvbnMsIG1ldGhvZDogSFRUUE1ldGhvZHMuUFVUIH0sIG9wdGlvbnMudGltZW91dCk7XG4gICAgfTtcblxuICAgIHBvc3QgPSAodXJsOiBzdHJpbmcsIG9wdGlvbnM6IEhUVFBUcmFuc3BvcnRPcHRpb25zVHlwZSA9IHt9KSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXJsLCB7IC4uLm9wdGlvbnMsIG1ldGhvZDogSFRUUE1ldGhvZHMuUE9TVCB9LCBvcHRpb25zLnRpbWVvdXQpO1xuICAgIH07XG5cbiAgICBkZWxldGUgPSAodXJsOiBzdHJpbmcsIG9wdGlvbnM6IEhUVFBUcmFuc3BvcnRPcHRpb25zVHlwZSA9IHt9KSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXJsLCB7IC4uLm9wdGlvbnMsIG1ldGhvZDogSFRUUE1ldGhvZHMuREVMRVRFIH0sIG9wdGlvbnMudGltZW91dCk7XG4gICAgfTtcblxuICAgIHJlcXVlc3QgPSAodXJsOiBzdHJpbmcsIG9wdGlvbnM6IEhUVFBSZXF1ZXN0T3B0aW9uc1R5cGUsIHRpbWVvdXQgPSA1MDAwKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgbWV0aG9kLCBib2R5LCBoZWFkZXJzID0ge30gfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgeGhyLm9wZW4obWV0aG9kLCB0aGlzLl9kb21haW4gKyB1cmwpO1xuXG4gICAgICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh4aHIucmVzcG9uc2UpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgeGhyLm9uYWJvcnQgPSByZWplY3Q7XG4gICAgICAgICAgICB4aHIub25lcnJvciA9IHJlamVjdDtcbiAgICAgICAgICAgIHhoci5vbnRpbWVvdXQgPSByZWplY3Q7XG4gICAgICAgICAgICB4aHIudGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhoZWFkZXJzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAobWV0aG9kID09PSBIVFRQTWV0aG9kcy5HRVQgfHwgIWJvZHkpIHtcbiAgICAgICAgICAgICAgICB4aHIuc2VuZCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB4aHIuc2VuZChKU09OLnN0cmluZ2lmeShib2R5KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGh0dHBUcmFuc3BvcnQgPSBuZXcgSFRUUFRyYW5zcG9ydCgpO1xuIiwiLy8g0L3QsCDRgNCw0LHQvtGH0LjRhSDQv9GA0L7QtdC60YLQsNGFINGDINC80LXQvdGPINC80L3QvtCz0L4g0YDQsNC30LvQuNGH0L3Ri9GFINC30LDQv9GA0L7RgdC+0LIsXG4vLyDQv9C+0Y3RgtC+0LzRgyDQvNGLINC40YHQv9C+0LvRjNC30YPQtdC8INC/0YDQuNC80LXRgNC90L4g0YLQsNC60LjQtSBkdG8n0YjQutC4XG4vLyDQvNC90LUg0L7QvdC4INC+0YfQtdC90Ywg0L3RgNCw0LLRj9GC0YHRjywg0L/QvtGN0YLQvtC80YMg0YDQtdGI0LjQuyDQt9Cw0YLQsNGJ0LjRgtGMINC40YUg0LIg0Y3RgtC+0YIg0L/RgNC+0LXQutGCXG4vLyDRhdC+0YLRjyDQsiDQv9GA0LjQvdGG0LjQv9C1INGC0YPRgiwg0L3QsNCy0LXRgNC90L7QtSwg0L7QvdC4INC+0YHQvtCx0L4g0Lgg0L3QtSDQvdGD0LbQvdGLXG4vLyDQv9C+0YLQvtC80YMg0YfRgtC+INC30LTQtdGB0Ywg0L7QsdGL0YfQvdC+INC6IFwi0YDRg9GH0LrQsNC8XCIg0YLQvtC70YzQutC+INC/0L4g0L7QtNC90L7QvNGDINC/0YDQvtGC0L7QutC+0LvRgyDQt9Cw0L/RgNC+0YHRiyDQuNC00YPRglxuLy8g0LjQvdGC0LXRgNC10YHQvdC+INGC0LLQvtC1INC80L3QtdC90LjQtSDQsiDRhtC10LvQvtC8INC+INGC0LDQutC40YUg0LrQu9Cw0YHRgdCw0YUsXG4vLyDQvNCxINC10YnQtSDQutCw0LrQuNC1LdGC0L4g0YHQv9C+0YHQvtCx0Ysg0LXRgdGC0Ywg0LjQvdGC0LXRgNC10YHQvdGL0LU/XG5cbmltcG9ydCB7IGh0dHBUcmFuc3BvcnQgfSBmcm9tICcuLi9IVFRQVHJhbnNwb3J0JztcblxuZXhwb3J0IGNsYXNzIERUT01vZGVsPFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIF9uYW1lOiBzdHJpbmcsXG4gICAgKSB7XG4gICAgfVxuXG4gICAgZmluZCA9IChib2R5PzogVCkgPT4ge1xuICAgICAgICByZXR1cm4gaHR0cFRyYW5zcG9ydC5nZXQodGhpcy5fbmFtZSwgeyBib2R5IH0pO1xuICAgIH1cblxuICAgIHVwZGF0ZSA9IChib2R5OiBUKSA9PiB7XG4gICAgICAgIHJldHVybiBodHRwVHJhbnNwb3J0LnB1dCh0aGlzLl9uYW1lLCB7IGJvZHkgfSk7XG4gICAgfVxuXG4gICAgZGVsZXRlID0gKGJvZHk/OiBUKSA9PiB7XG4gICAgICAgIHJldHVybiBodHRwVHJhbnNwb3J0LmRlbGV0ZSh0aGlzLl9uYW1lLCB7IGJvZHkgfSk7XG4gICAgfVxuXG4gICAgY3JlYXRlID0gKGJvZHk/OiBUKSA9PiB7XG4gICAgICAgIHJldHVybiBodHRwVHJhbnNwb3J0LnBvc3QodGhpcy5fbmFtZSwgeyBib2R5IH0pO1xuICAgIH1cblxuICAgIGdldCA9IChpZDogbnVtYmVyKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgRFRPTW9kZWwoYCR7dGhpcy5fbmFtZX0vJHtpZH1gKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgRFRPTW9kZWwgfSBmcm9tICcuLi9saWIvRFRPTW9kZWwnO1xuaW1wb3J0IHsgVXNlclJlcXVlc3RUeXBlIH0gZnJvbSAnLi4vbW9kZWxzL3Byb2ZpbGUnO1xuXG5leHBvcnQgY29uc3QgcHJvZmlsZURUTyA9IG5ldyBEVE9Nb2RlbDxVc2VyUmVxdWVzdFR5cGU+KCcvdXNlci9wcm9maWxlJyk7IiwiaW1wb3J0IHsgRFRPTW9kZWwgfSBmcm9tICcuLi9saWIvRFRPTW9kZWwnO1xuaW1wb3J0IHsgVXNlckF2YXRhclR5cGUgfSBmcm9tICcuLi9tb2RlbHMvcHJvZmlsZSc7XG5cbmV4cG9ydCBjb25zdCBwcm9maWxlQXZhdGFyRFRPID0gbmV3IERUT01vZGVsPFVzZXJBdmF0YXJUeXBlPignL3VzZXIvcHJvZmlsZS9hdmF0YXInKTsiLCJpbXBvcnQgeyBEVE9Nb2RlbCB9IGZyb20gJy4uL2xpYi9EVE9Nb2RlbCc7XG5pbXBvcnQgeyBDaGFuZ2VQYXNzd29yZFJlcXVlc3RUeXBlIH0gZnJvbSAnLi4vbW9kZWxzL3Byb2ZpbGUnO1xuXG5leHBvcnQgY29uc3QgcHJvZmlsZVBhc3N3b3JkRFRPID0gbmV3IERUT01vZGVsPENoYW5nZVBhc3N3b3JkUmVxdWVzdFR5cGU+KCcvdXNlci9wYXNzd29yZCcpIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbGliL0NvbXBvbmVudCc7XG5pbXBvcnQgeyB0ZW1wbGF0b3IgfSBmcm9tICcuLi8uLi9saWIvVGVtcGxhdG9yJztcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XG5pbXBvcnQgeyBQcm9maWxlUm93IH0gZnJvbSBcIi4uL1Byb2ZpbGVSb3dcIjtcbmltcG9ydCB7IFVzZXJGdWxsVHlwZSB9IGZyb20gJy4uLy4uL21vZGVscy9wcm9maWxlJztcbmltcG9ydCB7IGlzRW1haWwgfSBmcm9tICcuLi8uLi91dGlscy92YWxpZGF0aW9uL2lzRW1haWwnO1xuaW1wb3J0IHsgaXNTaG9ydFBhc3N3b3JkIH0gZnJvbSAnLi4vLi4vdXRpbHMvdmFsaWRhdGlvbi9pc1Nob3J0UGFzc3dvcmQnO1xuaW1wb3J0IHsgaXNQaG9uZSB9IGZyb20gJy4uLy4uL3V0aWxzL3ZhbGlkYXRpb24vaXNQaG9uZSc7XG5pbXBvcnQgeyBGb3JtIH0gZnJvbSAnLi4vLi4vbGliL0Zvcm0nO1xuaW1wb3J0IHsgVmFsaWRhdGlvbkZ1bmN0aW9uVHlwZSB9IGZyb20gJy4uLy4uL2xpYi9Gb3JtL3R5cGVzJztcbmltcG9ydCB7IHByb2ZpbGVEVE8gfSBmcm9tICcuLi8uLi9hcGkvcHJvZmlsZURUTyc7XG5pbXBvcnQgeyBwcm9maWxlQXZhdGFyRFRPIH0gZnJvbSAnLi4vLi4vYXBpL3Byb2ZpbGVBdmF0YXJEVE8nO1xuaW1wb3J0IHsgcHJvZmlsZVBhc3N3b3JkRFRPIH0gZnJvbSAnLi4vLi4vYXBpL3Byb2ZpbGVQYXNzd29yZERUTyc7XG5cbmV4cG9ydCBjbGFzcyBQcm9maWxlRm9ybSBleHRlbmRzIENvbXBvbmVudDx7fT4ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcih7fSk7XG5cbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICBuZXcgRm9ybTxVc2VyRnVsbFR5cGU+KHtcbiAgICAgICAgICAgICAgICBvblN1Ym1pdDogdGhpcy5vblN1Ym1pdCxcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IHRoaXMudmFsaWRhdG9yLFxuICAgICAgICAgICAgICAgIHdyYXBwZXI6IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25TdWJtaXQgPSAoe1xuICAgICAgICBmaXJzdF9uYW1lLFxuICAgICAgICBzZWNvbmRfbmFtZSxcbiAgICAgICAgZGlzcGxheV9uYW1lLFxuICAgICAgICBsb2dpbixcbiAgICAgICAgZW1haWwsXG4gICAgICAgIHBob25lLFxuICAgICAgICBhdmF0YXIsXG4gICAgICAgIG9sZFBhc3N3b3JkLFxuICAgICAgICBuZXdQYXNzd29yZFxuICAgIH06IFVzZXJGdWxsVHlwZSkgPT4ge1xuICAgICAgICBjb25zdCBwcm9maWxlID0ge1xuICAgICAgICAgICAgZmlyc3RfbmFtZSxcbiAgICAgICAgICAgIHNlY29uZF9uYW1lLFxuICAgICAgICAgICAgZGlzcGxheV9uYW1lLFxuICAgICAgICAgICAgbG9naW4sXG4gICAgICAgICAgICBlbWFpbCxcbiAgICAgICAgICAgIHBob25lXG4gICAgICAgIH07XG4gICAgICAgIHByb2ZpbGVEVE8uY3JlYXRlKHByb2ZpbGUpO1xuXG4gICAgICAgIGlmIChhdmF0YXIgJiYgT2JqZWN0LmtleXMoYXZhdGFyKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHByb2ZpbGVBdmF0YXJEVE8uY3JlYXRlKHsgYXZhdGFyIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvZmlsZVBhc3N3b3JkRFRPLmNyZWF0ZSh7XG4gICAgICAgICAgICBvbGRQYXNzd29yZCxcbiAgICAgICAgICAgIG5ld1Bhc3N3b3JkLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YWxpZGF0b3I6IFBhcnRpYWw8eyBba2V5IGluIGtleW9mIFVzZXJGdWxsVHlwZV06IFZhbGlkYXRpb25GdW5jdGlvblR5cGU8VXNlckZ1bGxUeXBlPiB9PiA9IHtcbiAgICAgICAgZW1haWw6ICh7IGVtYWlsIH0pID0+IHtcbiAgICAgICAgICAgIGlmICghaXNFbWFpbChlbWFpbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Cj0LrQsNC20LjRgtC1INCy0LDQu9C40LTQvdGL0LkgZW1haWwnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG5ld1Bhc3N3b3JkOiAoeyBuZXdQYXNzd29yZCB9KSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNTaG9ydFBhc3N3b3JkKG5ld1Bhc3N3b3JkKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0JzQsNC60YHQuNC80LDQu9GM0L3QsNGPINC00LvQuNC90LAg0L/QsNGA0L7Qu9GPIC0gOCDRgdC40LzQstC+0LvQvtCyJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwaG9uZTogKHsgcGhvbmUgfSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFpc1Bob25lKHBob25lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0KPQutCw0LbQuNGC0LUg0YLQtdC70LXRhNC+0L0g0LIg0YTQvtGA0LzQsNGC0LUgKzcgWFhYIFhYWCBYWFhYJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVwZWF0TmV3UGFzc3dvcmQ6ICh7IG5ld1Bhc3N3b3JkLCByZXBlYXROZXdQYXNzd29yZCB9KSA9PiB7XG4gICAgICAgICAgICBpZiAobmV3UGFzc3dvcmQgIT09IHJlcGVhdE5ld1Bhc3N3b3JkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQn9Cw0YDQvtC70Lgg0L3QtSDRgdC+0LLQv9Cw0LTQsNGO0YInO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH1cblxuICAgIGNvbnRlbnQ6IENvbXBvbmVudFtdID0gW107XG5cbiAgICBwcmVyZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IGZpcnN0TmFtZSA9IG5ldyBQcm9maWxlUm93KHtcbiAgICAgICAgICAgIG5hbWU6ICdmaXJzdF9uYW1lJyxcbiAgICAgICAgICAgIHRpdGxlOiAn0JjQvNGPJyxcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIHZhbHVlOiAn0JLQsNGB0Y8nLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHNlY29uZE5hbWUgPSBuZXcgUHJvZmlsZVJvdyh7XG4gICAgICAgICAgICBuYW1lOiAnc2Vjb25kX25hbWUnLFxuICAgICAgICAgICAgdGl0bGU6ICfQpNCw0LzQuNC70LjRjycsXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICB2YWx1ZTogJ9CS0LDRgdC40L0nLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGRpc3BsYXlOYW1lID0gbmV3IFByb2ZpbGVSb3coe1xuICAgICAgICAgICAgbmFtZTogJ2Rpc3BsYXlfbmFtZScsXG4gICAgICAgICAgICB0aXRsZTogJ9Ce0YLQvtCx0YDQsNC20LDQtdC80L7QtSDQuNC80Y8nLFxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgdmFsdWU6ICfQktCw0YHRj9C9JyxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBsb2dpbiA9IG5ldyBQcm9maWxlUm93KHtcbiAgICAgICAgICAgIG5hbWU6ICdsb2dpbicsXG4gICAgICAgICAgICB0aXRsZTogJ9Cb0L7Qs9C40L0nLFxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgdmFsdWU6ICd1c2VybmFtZScsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgZW1haWwgPSBuZXcgUHJvZmlsZVJvdyh7XG4gICAgICAgICAgICBuYW1lOiAnZW1haWwnLFxuICAgICAgICAgICAgdGl0bGU6ICfQn9C+0YfRgtCwJyxcbiAgICAgICAgICAgIHR5cGU6ICdlbWFpbCcsXG4gICAgICAgICAgICB2YWx1ZTogJ3BvY2h0YUB5YW5kZXgucnUnLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHBob25lID0gbmV3IFByb2ZpbGVSb3coe1xuICAgICAgICAgICAgbmFtZTogJ3Bob25lJyxcbiAgICAgICAgICAgIHRpdGxlOiAn0KLQtdC70LXRhNC+0L0nLFxuICAgICAgICAgICAgdHlwZTogJ3RlbCcsXG4gICAgICAgICAgICB2YWx1ZTogJys3IDkwMyAxMjMgNDU2NycsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qgb2xkUGFzc3dvcmQgPSBuZXcgUHJvZmlsZVJvdyh7XG4gICAgICAgICAgICBuYW1lOiAnb2xkUGFzc3dvcmQnLFxuICAgICAgICAgICAgdGl0bGU6ICfQotC10LrRg9GJ0LjQuSDQv9Cw0YDQvtC70YwnLFxuICAgICAgICAgICAgdHlwZTogJ3Bhc3N3b3JkJyxcbiAgICAgICAgICAgIHZhbHVlOiAncGFzc3dvcmQnLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IG5ld1Bhc3N3b3JkID0gbmV3IFByb2ZpbGVSb3coe1xuICAgICAgICAgICAgbmFtZTogJ25ld1Bhc3N3b3JkJyxcbiAgICAgICAgICAgIHRpdGxlOiAn0J3QvtCy0YvQuSDQv9Cw0YDQvtC70YwnLFxuICAgICAgICAgICAgdHlwZTogJ3Bhc3N3b3JkJyxcbiAgICAgICAgICAgIHZhbHVlOiAncGFzc3dvcmQnLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHJlcGVhdE5ld1Bhc3N3b3JkID0gbmV3IFByb2ZpbGVSb3coe1xuICAgICAgICAgICAgbmFtZTogJ3JlcGVhdE5ld1Bhc3N3b3JkJyxcbiAgICAgICAgICAgIHRpdGxlOiAn0J3QvtCy0YvQuSDQv9Cw0YDQvtC70YwgKNC10YnQtSDRgNCw0LcpJyxcbiAgICAgICAgICAgIHR5cGU6ICdwYXNzd29yZCcsXG4gICAgICAgICAgICB2YWx1ZTogJ9C30YTRi9GL0YbRidC60LInLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGF2YXRhciA9IG5ldyBQcm9maWxlUm93KHtcbiAgICAgICAgICAgIG5hbWU6ICdhdmF0YXInLFxuICAgICAgICAgICAgdGl0bGU6ICfQl9Cw0LPRgNGD0LfQuNGC0Ywg0LDQstCw0YLQsNGAJyxcbiAgICAgICAgICAgIHR5cGU6ICdmaWxlJyxcbiAgICAgICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmNvbnRlbnQgPSBbXG4gICAgICAgICAgICBmaXJzdE5hbWUsXG4gICAgICAgICAgICBzZWNvbmROYW1lLFxuICAgICAgICAgICAgZGlzcGxheU5hbWUsXG4gICAgICAgICAgICBsb2dpbixcbiAgICAgICAgICAgIGVtYWlsLFxuICAgICAgICAgICAgcGhvbmUsXG4gICAgICAgICAgICBvbGRQYXNzd29yZCxcbiAgICAgICAgICAgIG5ld1Bhc3N3b3JkLFxuICAgICAgICAgICAgcmVwZWF0TmV3UGFzc3dvcmQsXG4gICAgICAgICAgICBhdmF0YXIsXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdG9yLmNvbXBpbGUodGVtcGxhdGUsIHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHRoaXMuY29udGVudCxcbiAgICAgICAgfSk7XG4gICAgfVxufSIsImltcG9ydCB7IFByb2ZpbGUgfSBmcm9tICcuLi9jb21wb25lbnRzL1Byb2ZpbGUnO1xuaW1wb3J0IHsgUHJvZmlsZUZvcm0gfSBmcm9tICcuLi9jb21wb25lbnRzL1Byb2ZpbGVGb3JtJztcblxuZXhwb3J0IGNvbnN0IGVkaXRQcm9maWxlID0gbmV3IFByb2ZpbGUoe1xuICAgIGF2YXRhclNyYzogJy9hc3NldHMvYXZhdGFyLmpwZycsXG4gICAgY29udGVudDogbmV3IFByb2ZpbGVGb3JtKCksXG4gICAgZGlzcGxheU5hbWU6ICfQktCw0YHRj9C9JyxcbiAgICBsb25nOiB0cnVlLFxuICAgIHBhZ2VUaXRsZTogJ9Cg0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40LUg0L/RgNC+0YTQuNC70Y8nXG59KTtcblxuIiwiZXhwb3J0IGNvbnN0IHRlbXBsYXRlID0gYFxuICAgIDxtYWluIGNsYXNzPVwid3JhcHBlci1jZW50ZXJcIj5cbiAgICAgICAgPGZvcm0gY2xhc3M9XCJsb2dpbi1mb3JtIHt7IGNsYXNzTmFtZSB9fVwiPlxuICAgICAgICAgICAgPGgxIGNsYXNzPVwibG9naW4tZm9ybV9fdGl0bGVcIj57eyBwYWdlVGl0bGUgfX08L2gxPlxuICAgICAgICAgICAge3sgY29udGVudCB9fVxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImxvZ2luLWZvcm1fX3N1Ym1pdFwiIHR5cGU9XCJzdWJtaXRcIj57eyBidXR0b25MYWJlbCB9fTwvYnV0dG9uPlxuICAgICAgICAgICAgPGEgaHJlZj1cInt7IGxpbmtIcmVmIH19XCIgY2xhc3M9XCJsb2dpbi1mb3JtX19saW5rXCI+e3sgbGlua0xhYmVsIH19PC9hPlxuICAgICAgICA8L2Zvcm0+XG4gICAgPC9tYWluPlxuYDsiLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi8uLi9saWIvQ29tcG9uZW50JztcbmltcG9ydCB7IHRlbXBsYXRvciB9IGZyb20gJy4uLy4uL2xpYi9UZW1wbGF0b3InO1xuaW1wb3J0IHsgdGVtcGxhdGUgfSBmcm9tICcuL3RlbXBsYXRlJztcbmltcG9ydCB7IEZvcm0gfSBmcm9tICcuLi8uLi9saWIvRm9ybSc7XG5pbXBvcnQgeyBJTG9naW5Gb3JtIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGNsYXNzIExvZ2luRm9ybTxUPiBleHRlbmRzIENvbXBvbmVudDxJTG9naW5Gb3JtPFQ+PiB7XG4gICAgY29uc3RydWN0b3IocHJvcHM6IElMb2dpbkZvcm08VD4pIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIGV4Y2x1ZGVPblN1Ym1pdDogZXhjbHVkZSxcbiAgICAgICAgICAgICAgICBvblN1Ym1pdCxcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3IsXG4gICAgICAgICAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICAgICAgbmV3IEZvcm08VD4oe1xuICAgICAgICAgICAgICAgIGV4Y2x1ZGUsXG4gICAgICAgICAgICAgICAgb25TdWJtaXQsXG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yLFxuICAgICAgICAgICAgICAgIHdyYXBwZXI6IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBidXR0b25MYWJlbCxcbiAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICBsaW5rSHJlZixcbiAgICAgICAgICAgIGxpbmtMYWJlbCxcbiAgICAgICAgICAgIGxvbmcsXG4gICAgICAgICAgICBwYWdlVGl0bGUsXG4gICAgICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICAgIHJldHVybiB0ZW1wbGF0b3IuY29tcGlsZSh0ZW1wbGF0ZSwge1xuICAgICAgICAgICAgYnV0dG9uTGFiZWwsXG4gICAgICAgICAgICBjbGFzc05hbWU6IGxvbmcgPyAnbG9naW4tZm9ybV9sb25nJyA6ICcnLFxuICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgIGxpbmtIcmVmLFxuICAgICAgICAgICAgbGlua0xhYmVsLFxuICAgICAgICAgICAgbG9uZyxcbiAgICAgICAgICAgIHBhZ2VUaXRsZSxcbiAgICAgICAgfSk7XG4gICAgfVxufSIsImV4cG9ydCBjb25zdCB0ZW1wbGF0ZSA9IGBcbiAgICA8bGFiZWwgY2xhc3M9XCJsb2dpbi1mb3JtX19yb3dcIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJ7eyB0eXBlIH19XCIgY2xhc3M9XCJsb2dpbi1mb3JtX19pbnB1dFwiIHZhbHVlPVwie3sgdmFsdWUgfX1cIiBuYW1lPVwie3sgbmFtZSB9fVwiIC8+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwibG9naW4tZm9ybV9fbGFiZWxcIj57eyBsYWJlbCB9fTwvc3Bhbj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJsb2dpbi1mb3JtX19lcnJvclwiPjwvc3Bhbj5cbiAgICA8L2xhYmVsPlxuYDsiLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi8uLi9saWIvQ29tcG9uZW50JztcbmltcG9ydCB7IHRlbXBsYXRvciB9IGZyb20gJy4uLy4uL2xpYi9UZW1wbGF0b3InO1xuaW1wb3J0IHsgdGVtcGxhdGUgfSBmcm9tICcuL3RlbXBsYXRlJztcbmltcG9ydCB7IElMb2dpbkZvcm1Sb3cgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5leHBvcnQgY2xhc3MgTG9naW5Gb3JtUm93IGV4dGVuZHMgQ29tcG9uZW50PElMb2dpbkZvcm1Sb3c+IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0b3IuY29tcGlsZSh0ZW1wbGF0ZSwgeyAuLi50aGlzLnByb3BzIH0pO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBEVE9Nb2RlbCB9IGZyb20gJy4uL2xpYi9EVE9Nb2RlbCc7XG5pbXBvcnQgeyBTaWduSW5UeXBlIH0gZnJvbSAnLi4vbW9kZWxzL3NpZ25Jbic7XG5cbmV4cG9ydCBjb25zdCBzaWduSW5EVE8gPSBuZXcgRFRPTW9kZWw8U2lnbkluVHlwZT4oJy9hdXRoL3NpZ25pbicpIiwiaW1wb3J0IHsgTG9naW5Gb3JtIH0gZnJvbSAnLi4vY29tcG9uZW50cy9Mb2dpbkZvcm0nO1xuaW1wb3J0IHsgTG9naW5Gb3JtUm93IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Mb2dpbkZvcm1Sb3cnO1xuaW1wb3J0IHsgU2lnbkluVHlwZSB9IGZyb20gJy4uL21vZGVscy9zaWduSW4nO1xuaW1wb3J0IHsgaXNTaG9ydFBhc3N3b3JkIH0gZnJvbSAnLi4vdXRpbHMvdmFsaWRhdGlvbi9pc1Nob3J0UGFzc3dvcmQnO1xuaW1wb3J0IHtzaWduSW5EVE99IGZyb20gXCIuLi9hcGkvc2lnbkluRFRPXCI7XG5cbmNvbnN0IGxvZ2luRWxlbWVudCA9IG5ldyBMb2dpbkZvcm1Sb3coe1xuICAgIGxhYmVsOiAn0JvQvtCz0LjQvScsXG4gICAgbmFtZTogJ2xvZ2luJyxcbiAgICB0eXBlOiAndGV4dCcsXG4gICAgdmFsdWU6ICd1c2VybmFtZScsXG59KTtcblxuY29uc3QgcGFzc3dvcmRFbGVtZW50ID0gbmV3IExvZ2luRm9ybVJvdyh7XG4gICAgbGFiZWw6ICfQn9Cw0YDQvtC70YwnLFxuICAgIG5hbWU6ICdwYXNzd29yZCcsXG4gICAgdHlwZTogJ3Bhc3N3b3JkJyxcbiAgICB2YWx1ZTogJ3Bhc3N3b3JkJyxcbn0pO1xuXG5leHBvcnQgY29uc3QgbG9naW4gPSBuZXcgTG9naW5Gb3JtPFNpZ25JblR5cGU+KHtcbiAgICBidXR0b25MYWJlbDogJ9CQ0LLRgtC+0YDQuNC30L7QstCw0YLRjNGB0Y8nLFxuICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgbG9naW5FbGVtZW50LFxuICAgICAgICBwYXNzd29yZEVsZW1lbnQsXG4gICAgXSxcbiAgICBsaW5rSHJlZjogJ3JlZ2lzdHJhdGlvbicsXG4gICAgbGlua0xhYmVsOiAn0J3QtdGCINCw0LrQutCw0YPQvdGC0LA/JyxcbiAgICBvblN1Ym1pdDogKHZhbHVlcykgPT4ge1xuICAgICAgICBzaWduSW5EVE8uY3JlYXRlKHZhbHVlcyk7XG4gICAgfSxcbiAgICBwYWdlVGl0bGU6ICfQktGF0L7QtCcsXG4gICAgdmFsaWRhdG9yOiB7XG4gICAgICAgIGxvZ2luOiAoeyBsb2dpbiB9KSA9PiB7XG4gICAgICAgICAgICBpZiAobG9naW4gPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQntCx0Y/Qt9Cw0YLQtdC70YzQvdC+0LUg0L/QvtC70LUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwYXNzd29yZDogKHsgcGFzc3dvcmQgfSkgPT4ge1xuICAgICAgICAgICAgaWYgKGlzU2hvcnRQYXNzd29yZChwYXNzd29yZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Cc0LjQvdC40LzQsNC70YzQvdCw0Y8g0LTQu9C40L3QsCDQv9Cw0YDQvtC70Y8gLSA4INGB0LjQvNCy0L7Qu9C+0LInO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSk7XG5cbiIsImV4cG9ydCBjb25zdCB0ZW1wbGF0ZSA9IGBcbiAgICA8ZGl2IGNsYXNzPVwicHJvZmlsZS1zZWN0aW9uXCI+XG4gICAgICAgIHt7IGNvbnRlbnQgfX1cbiAgICA8L2Rpdj5cbmA7IiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbGliL0NvbXBvbmVudCc7XG5pbXBvcnQgeyB0ZW1wbGF0b3IgfSBmcm9tICcuLi8uLi9saWIvVGVtcGxhdG9yJztcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSc7XG5pbXBvcnQgeyBJUHJvZmlsZVNlY3Rpb24gfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5leHBvcnQgY2xhc3MgUHJvZmlsZVNlY3Rpb24gZXh0ZW5kcyBDb21wb25lbnQ8SVByb2ZpbGVTZWN0aW9uPiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdG9yLmNvbXBpbGUodGVtcGxhdGUsIHsgLi4udGhpcy5wcm9wcyB9KTtcbiAgICB9XG59IiwiZXhwb3J0IGNvbnN0IHRlbXBsYXRlID0gYFxuICAgIDxkaXYgY2xhc3M9XCJwcm9maWxlLXNlY3Rpb25cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInByb2ZpbGVfX3JvdyBwcm9maWxlLXJvd1wiPlxuICAgICAgICAgICAgPGEgaHJlZj1cIi9lZGl0LXByb2ZpbGVcIiBjbGFzcz1cInByb2ZpbGUtcm93X19saW5rXCI+0JjQt9C80LXQvdC40YLRjCDQtNCw0L3QvdGL0LU8L2E+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZmlsZV9fcm93IHByb2ZpbGUtcm93XCI+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwicHJvZmlsZS1yb3dfX2xvZ291dFwiIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPVwie3sgb25DbGljayB9fVwiPtCS0YvQudGC0Lg8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5gOyIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2xpYi9Db21wb25lbnQnO1xuaW1wb3J0IHsgdGVtcGxhdG9yIH0gZnJvbSAnLi4vLi4vbGliL1RlbXBsYXRvcic7XG5pbXBvcnQgeyB0ZW1wbGF0ZSB9IGZyb20gJy4vdGVtcGxhdGUnO1xuaW1wb3J0IHsgaHR0cFRyYW5zcG9ydCB9IGZyb20gJy4uLy4uL2xpYi9IVFRQVHJhbnNwb3J0JztcblxuZXhwb3J0IGNsYXNzIFByb2ZpbGVWaWV3Rm9vdGVyIGV4dGVuZHMgQ29tcG9uZW50PHt9PiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdG9yLmNvbXBpbGUodGVtcGxhdGUsIHtcbiAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBodHRwVHJhbnNwb3J0LnBvc3QoJy9hdXRoL2xvZ291dCcpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxufSIsImltcG9ydCB7IFByb2ZpbGUgfSBmcm9tICcuLi9jb21wb25lbnRzL1Byb2ZpbGUnO1xuaW1wb3J0IHsgUHJvZmlsZVNlY3Rpb24gfSBmcm9tICcuLi9jb21wb25lbnRzL1Byb2ZpbGVTZWN0aW9uJztcbmltcG9ydCB7IFByb2ZpbGVSb3cgfSBmcm9tICcuLi9jb21wb25lbnRzL1Byb2ZpbGVSb3cnO1xuaW1wb3J0IHsgUHJvZmlsZVZpZXdGb290ZXIgfSBmcm9tICcuLi9jb21wb25lbnRzL1Byb2ZpbGVWaWV3Rm9vdGVyJztcblxuZXhwb3J0IGNvbnN0IHByb2ZpbGUgPSBuZXcgUHJvZmlsZSh7XG4gICAgYXZhdGFyU3JjOiAnL2Fzc2V0cy9hdmF0YXIuanBnJyxcbiAgICBjb250ZW50OiBbXG4gICAgICAgIG5ldyBQcm9maWxlU2VjdGlvbih7XG4gICAgICAgICAgICBjb250ZW50OiBbXG4gICAgICAgICAgICAgICAgbmV3IFByb2ZpbGVSb3coe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ9CY0LzRjycsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAn0JLQsNGB0Y8nLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBQcm9maWxlUm93KHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfQpNCw0LzQuNC70LjRjycsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAn0JLQsNGB0LjQvScsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbmV3IFByb2ZpbGVSb3coe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ9Ce0YLQvtCx0YDQsNC20LDQtdC80L7QtSDQuNC80Y8nLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ9CS0LDRgdGP0L0nLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBQcm9maWxlUm93KHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfQm9C+0LPQuNC9JyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICd1c2VybmFtZScsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbmV3IFByb2ZpbGVSb3coe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ9Cf0L7Rh9GC0LAnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ3BvY2h0YUB5YW5kZXgucnUnLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBQcm9maWxlUm93KHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfQotC10LvQtdGE0L7QvScsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnKzcgOTAzIDEyMyA0NTY3JyxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgUHJvZmlsZVZpZXdGb290ZXIoKSxcbiAgICBdLFxuICAgIGRpc3BsYXlOYW1lOiAn0JLQsNGB0Y/QvScsXG4gICAgcGFnZVRpdGxlOiAn0J/RgNC+0YTQuNC70YwnXG59KTsiLCJpbXBvcnQgeyBEVE9Nb2RlbCB9IGZyb20gJy4uL2xpYi9EVE9Nb2RlbCc7XG5pbXBvcnQgeyBTaWduVXBUeXBlIH0gZnJvbSAnLi4vbW9kZWxzL3NpZ25VcCc7XG5cbmV4cG9ydCBjb25zdCBzaWduVXBEVE8gPSBuZXcgRFRPTW9kZWw8U2lnblVwVHlwZT4oJy9hdXRoL3NpZ251cCcpOyIsImltcG9ydCB7IExvZ2luRm9ybSB9IGZyb20gJy4uL2NvbXBvbmVudHMvTG9naW5Gb3JtJztcbmltcG9ydCB7IExvZ2luRm9ybVJvdyB9IGZyb20gJy4uL2NvbXBvbmVudHMvTG9naW5Gb3JtUm93JztcbmltcG9ydCB7IFNpZ25VcEZ1bGxUeXBlIH0gZnJvbSAnLi4vbW9kZWxzL3NpZ25VcCc7XG5pbXBvcnQgeyBpc1Nob3J0UGFzc3dvcmQgfSBmcm9tICcuLi91dGlscy92YWxpZGF0aW9uL2lzU2hvcnRQYXNzd29yZCc7XG5pbXBvcnQgeyBpc1Bob25lIH0gZnJvbSAnLi4vdXRpbHMvdmFsaWRhdGlvbi9pc1Bob25lJztcbmltcG9ydCB7IGlzRW1haWwgfSBmcm9tICcuLi91dGlscy92YWxpZGF0aW9uL2lzRW1haWwnO1xuaW1wb3J0IHtzaWduVXBEVE99IGZyb20gXCIuLi9hcGkvc2lnblVwRFRPXCI7XG5cbmNvbnN0IGZpcnN0TmFtZSA9IG5ldyBMb2dpbkZvcm1Sb3coe1xuICAgIGxhYmVsOiAn0JjQvNGPJyxcbiAgICBuYW1lOiAnZmlyc3RfbmFtZScsXG4gICAgdHlwZTogJ3RleHQnLFxuICAgIHZhbHVlOiAn0JLQsNGB0Y8nLFxufSk7XG5cbmNvbnN0IHNlY29uZE5hbWUgPSBuZXcgTG9naW5Gb3JtUm93KHtcbiAgICBsYWJlbDogJ9Ck0LDQvNC40LvQuNGPJyxcbiAgICBuYW1lOiAnc2Vjb25kX25hbWUnLFxuICAgIHR5cGU6ICd0ZXh0JyxcbiAgICB2YWx1ZTogJ9CS0LDRgdC40L0nLFxufSk7XG5cbmNvbnN0IGxvZ2luID0gbmV3IExvZ2luRm9ybVJvdyh7XG4gICAgbGFiZWw6ICfQm9C+0LPQuNC9JyxcbiAgICBuYW1lOiAnbG9naW4nLFxuICAgIHR5cGU6ICd0ZXh0JyxcbiAgICB2YWx1ZTogJ3VzZXJuYW1lJyxcbn0pO1xuXG5jb25zdCBlbWFpbCA9IG5ldyBMb2dpbkZvcm1Sb3coe1xuICAgIGxhYmVsOiAn0J/QvtGH0YLQsCcsXG4gICAgbmFtZTogJ2VtYWlsJyxcbiAgICB0eXBlOiAnZW1haWwnLFxuICAgIHZhbHVlOiAncG9jaHRhQHlhbmRleC5ydScsXG59KTtcblxuY29uc3QgcGhvbmUgPSBuZXcgTG9naW5Gb3JtUm93KHtcbiAgICBsYWJlbDogJ9Ci0LXQu9C10YTQvtC9JyxcbiAgICBuYW1lOiAncGhvbmUnLFxuICAgIHR5cGU6ICd0ZWwnLFxuICAgIHZhbHVlOiAnKzcgOTAzIDEyMyA0NTY3Jyxcbn0pO1xuXG5jb25zdCBwYXNzd29yZCA9IG5ldyBMb2dpbkZvcm1Sb3coe1xuICAgIGxhYmVsOiAn0J/QsNGA0L7Qu9GMJyxcbiAgICBuYW1lOiAncGFzc3dvcmQnLFxuICAgIHR5cGU6ICdwYXNzd29yZCcsXG4gICAgdmFsdWU6ICdwYXNzd29yZCcsXG59KTtcblxuY29uc3QgcmVwZWF0UGFzc3dvcmQgPSBuZXcgTG9naW5Gb3JtUm93KHtcbiAgICBsYWJlbDogJ9Cf0LDRgNC+0LvRjCAo0LXRidC1INGA0LDQtyknLFxuICAgIG5hbWU6ICdyZXBlYXRfcGFzc3dvcmQnLFxuICAgIHR5cGU6ICdwYXNzd29yZCcsXG4gICAgdmFsdWU6ICfQt9GE0YvRi9GG0L7QutCyJyxcbn0pO1xuXG5leHBvcnQgY29uc3QgcmVnaXN0cmF0aW9uID0gbmV3IExvZ2luRm9ybTxTaWduVXBGdWxsVHlwZT4oe1xuICAgIGJ1dHRvbkxhYmVsOiAn0JfQsNGA0LXQs9C40YHRgtGA0LjRgNC+0LLQsNGC0YzRgdGPJyxcbiAgICBjb250ZW50OiBbXG4gICAgICAgIGZpcnN0TmFtZSxcbiAgICAgICAgc2Vjb25kTmFtZSxcbiAgICAgICAgbG9naW4sXG4gICAgICAgIGVtYWlsLFxuICAgICAgICBwaG9uZSxcbiAgICAgICAgcGFzc3dvcmQsXG4gICAgICAgIHJlcGVhdFBhc3N3b3JkLFxuICAgIF0sXG4gICAgZXhjbHVkZU9uU3VibWl0OiAncmVwZWF0X3Bhc3N3b3JkJyxcbiAgICBsaW5rSHJlZjogJy9sb2dpbicsXG4gICAgbGlua0xhYmVsOiAn0JLQvtC50YLQuCcsXG4gICAgbG9uZzogdHJ1ZSxcbiAgICBvblN1Ym1pdDogKHZhbHVlcykgPT4ge1xuICAgICAgICBzaWduVXBEVE8uY3JlYXRlKHZhbHVlcyk7XG4gICAgfSxcbiAgICBwYWdlVGl0bGU6ICfQoNC10LPQuNGB0YLRgNCw0YbQuNGPJyxcbiAgICB2YWxpZGF0b3I6IHtcbiAgICAgICAgZW1haWw6ICh7IGVtYWlsIH0pID0+IHtcbiAgICAgICAgICAgIGlmICghaXNFbWFpbChlbWFpbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Cj0LrQsNC20LjRgtC1INCy0LDQu9C40LTQvdGL0LkgZW1haWwnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHBhc3N3b3JkOiAoeyBwYXNzd29yZCB9KSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNTaG9ydFBhc3N3b3JkKHBhc3N3b3JkKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0JzQsNC60YHQuNC80LDQu9GM0L3QsNGPINC00LvQuNC90LAg0L/QsNGA0L7Qu9GPIC0gOCDRgdC40LzQstC+0LvQvtCyJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwaG9uZTogKHsgcGhvbmUgfSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFpc1Bob25lKHBob25lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0KPQutCw0LbQuNGC0LUg0YLQtdC70LXRhNC+0L0g0LIg0YTQvtGA0LzQsNGC0LUgKzcgWFhYIFhYWCBYWFhYJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVwZWF0X3Bhc3N3b3JkOiAoeyBwYXNzd29yZCwgcmVwZWF0X3Bhc3N3b3JkOiByZXBlYXRQYXNzd29yZCB9KSA9PiB7XG4gICAgICAgICAgICBpZiAocGFzc3dvcmQgIT09IHJlcGVhdFBhc3N3b3JkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQn9Cw0YDQvtC70Lgg0L3QtSDRgdC+0LLQv9Cw0LTQsNGO0YInO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH1cbn0pOyIsImltcG9ydCB7IFJvdXRlciB9IGZyb20gJy4vbGliL1JvdXRlcic7XG5pbXBvcnQgeyBlcnJvcjQwNCB9IGZyb20gJy4vcGFnZXMvNDA0JztcbmltcG9ydCB7IGVycm9yNTAwIH0gZnJvbSAnLi9wYWdlcy81MDAnO1xuaW1wb3J0IHsgY2hhdCB9IGZyb20gJy4vcGFnZXMvY2hhdCc7XG5pbXBvcnQgeyBjaGF0cyB9IGZyb20gJy4vcGFnZXMvY2hhdHMnO1xuaW1wb3J0IHsgZWRpdFByb2ZpbGUgfSBmcm9tICcuL3BhZ2VzL2VkaXQtcHJvZmlsZSc7XG5pbXBvcnQgeyBsb2dpbiB9IGZyb20gJy4vcGFnZXMvbG9naW4nO1xuaW1wb3J0IHsgcHJvZmlsZSB9IGZyb20gJy4vcGFnZXMvcHJvZmlsZSc7XG5pbXBvcnQgeyByZWdpc3RyYXRpb24gfSBmcm9tICcuL3BhZ2VzL3JlZ2lzdHJhdGlvbic7XG5pbXBvcnQge2h0dHBUcmFuc3BvcnR9IGZyb20gXCIuL2xpYi9IVFRQVHJhbnNwb3J0XCI7XG5cbmNvbnN0IHJvdXRlciA9IG5ldyBSb3V0ZXIoJyNyb290Jyk7XG5cbnJvdXRlclxuICAgIC51c2UoJy8nLCBjaGF0cywgJ9CS0YvQsdC10YDQuNGC0LUg0YfQsNGCJylcbiAgICAudXNlKCcvNDA0LycsIGVycm9yNDA0LCAn0J7RiNC40LHQutCwIDQwNCcpXG4gICAgLnVzZSgnLzUwMC8nLCBlcnJvcjUwMCwgJ9Ce0YjQuNCx0LrQsCA1MDAnKVxuICAgIC51c2UoJy9jaGF0LycsIGNoYXQsICfQp9Cw0YInKVxuICAgIC51c2UoJy9lZGl0LXByb2ZpbGUvJywgZWRpdFByb2ZpbGUsICfQoNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNC1INC/0YDQvtGE0LjQu9GPJylcbiAgICAudXNlKCcvbG9naW4vJywgbG9naW4sICfQktGF0L7QtCcpXG4gICAgLnVzZSgnL3Byb2ZpbGUvJywgcHJvZmlsZSwgJ9Cf0YDQvtGE0LjQu9GMJylcbiAgICAudXNlKCcvcmVnaXN0cmF0aW9uLycsIHJlZ2lzdHJhdGlvbiwgJ9Cg0LXQs9C40YHRgtGA0LDRhtC40Y8nKVxuICAgIC5zdGFydCgpO1xuXG5odHRwVHJhbnNwb3J0LnNldERvbWFpbignaHR0cHM6Ly95YS1wcmFrdGlrdW0udGVjaC9hcGkvdjInKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///557\n")})();